
Master_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008900  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08008b54  08008b54  00009b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bd0  08008bd0  0000a05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008bd0  08008bd0  00009bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bd8  08008bd8  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bd8  08008bd8  00009bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008bdc  08008bdc  00009bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008be0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  2000005c  08008c3c  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08008c3c  0000a358  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001202d  00000000  00000000  0000a092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f87  00000000  00000000  0001c0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  0001e048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c6  00000000  00000000  0001ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c084  00000000  00000000  0001f6be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010429  00000000  00000000  0004b742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011bff6  00000000  00000000  0005bb6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177b61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac8  00000000  00000000  00177ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0017b66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000005c 	.word	0x2000005c
 8000270:	00000000 	.word	0x00000000
 8000274:	08008b3c 	.word	0x08008b3c

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000060 	.word	0x20000060
 8000290:	08008b3c 	.word	0x08008b3c

08000294 <strlen>:
 8000294:	4603      	mov	r3, r0
 8000296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029a:	2a00      	cmp	r2, #0
 800029c:	d1fb      	bne.n	8000296 <strlen+0x2>
 800029e:	1a18      	subs	r0, r3, r0
 80002a0:	3801      	subs	r0, #1
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b8:	f000 b9b0 	b.w	800061c <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002da:	4688      	mov	r8, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	468e      	mov	lr, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d95f      	bls.n	80003aa <__udivmoddi4+0xd6>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	b14e      	cbz	r6, 8000304 <__udivmoddi4+0x30>
 80002f0:	f1c6 0320 	rsb	r3, r6, #32
 80002f4:	fa01 fe06 	lsl.w	lr, r1, r6
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	40b4      	lsls	r4, r6
 80002fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000300:	ea43 0e0e 	orr.w	lr, r3, lr
 8000304:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fbbe f1f8 	udiv	r1, lr, r8
 8000312:	fb08 ee11 	mls	lr, r8, r1, lr
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800031e:	429a      	cmp	r2, r3
 8000320:	d907      	bls.n	8000332 <__udivmoddi4+0x5e>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000328:	d202      	bcs.n	8000330 <__udivmoddi4+0x5c>
 800032a:	429a      	cmp	r2, r3
 800032c:	f200 8154 	bhi.w	80005d8 <__udivmoddi4+0x304>
 8000330:	4601      	mov	r1, r0
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	b2a2      	uxth	r2, r4
 8000336:	fbb3 f0f8 	udiv	r0, r3, r8
 800033a:	fb08 3310 	mls	r3, r8, r0, r3
 800033e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000342:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000346:	4594      	cmp	ip, r2
 8000348:	d90b      	bls.n	8000362 <__udivmoddi4+0x8e>
 800034a:	18ba      	adds	r2, r7, r2
 800034c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000350:	bf2c      	ite	cs
 8000352:	2401      	movcs	r4, #1
 8000354:	2400      	movcc	r4, #0
 8000356:	4594      	cmp	ip, r2
 8000358:	d902      	bls.n	8000360 <__udivmoddi4+0x8c>
 800035a:	2c00      	cmp	r4, #0
 800035c:	f000 813f 	beq.w	80005de <__udivmoddi4+0x30a>
 8000360:	4618      	mov	r0, r3
 8000362:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000366:	eba2 020c 	sub.w	r2, r2, ip
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa2>
 800036e:	40f2      	lsrs	r2, r6
 8000370:	2300      	movs	r3, #0
 8000372:	e9c5 2300 	strd	r2, r3, [r5]
 8000376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xb6>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb0>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa2>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d14e      	bne.n	8000430 <__udivmoddi4+0x15c>
 8000392:	4543      	cmp	r3, r8
 8000394:	f0c0 8112 	bcc.w	80005bc <__udivmoddi4+0x2e8>
 8000398:	4282      	cmp	r2, r0
 800039a:	f240 810f 	bls.w	80005bc <__udivmoddi4+0x2e8>
 800039e:	4608      	mov	r0, r1
 80003a0:	2d00      	cmp	r5, #0
 80003a2:	d0e8      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003a4:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a8:	e7e5      	b.n	8000376 <__udivmoddi4+0xa2>
 80003aa:	2a00      	cmp	r2, #0
 80003ac:	f000 80ac 	beq.w	8000508 <__udivmoddi4+0x234>
 80003b0:	fab2 f682 	clz	r6, r2
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	f040 80bb 	bne.w	8000530 <__udivmoddi4+0x25c>
 80003ba:	1a8b      	subs	r3, r1, r2
 80003bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003c0:	b2bc      	uxth	r4, r7
 80003c2:	2101      	movs	r1, #1
 80003c4:	0c02      	lsrs	r2, r0, #16
 80003c6:	b280      	uxth	r0, r0
 80003c8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003d4:	fb04 f20c 	mul.w	r2, r4, ip
 80003d8:	429a      	cmp	r2, r3
 80003da:	d90e      	bls.n	80003fa <__udivmoddi4+0x126>
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e2:	bf2c      	ite	cs
 80003e4:	f04f 0901 	movcs.w	r9, #1
 80003e8:	f04f 0900 	movcc.w	r9, #0
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d903      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003f0:	f1b9 0f00 	cmp.w	r9, #0
 80003f4:	f000 80ec 	beq.w	80005d0 <__udivmoddi4+0x2fc>
 80003f8:	46c4      	mov	ip, r8
 80003fa:	1a9b      	subs	r3, r3, r2
 80003fc:	fbb3 f8fe 	udiv	r8, r3, lr
 8000400:	fb0e 3318 	mls	r3, lr, r8, r3
 8000404:	fb04 f408 	mul.w	r4, r4, r8
 8000408:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800040c:	4294      	cmp	r4, r2
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x154>
 8000410:	18ba      	adds	r2, r7, r2
 8000412:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000416:	bf2c      	ite	cs
 8000418:	2001      	movcs	r0, #1
 800041a:	2000      	movcc	r0, #0
 800041c:	4294      	cmp	r4, r2
 800041e:	d902      	bls.n	8000426 <__udivmoddi4+0x152>
 8000420:	2800      	cmp	r0, #0
 8000422:	f000 80d1 	beq.w	80005c8 <__udivmoddi4+0x2f4>
 8000426:	4698      	mov	r8, r3
 8000428:	1b12      	subs	r2, r2, r4
 800042a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800042e:	e79d      	b.n	800036c <__udivmoddi4+0x98>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa08 f401 	lsl.w	r4, r8, r1
 800043a:	fa00 f901 	lsl.w	r9, r0, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	fa28 f806 	lsr.w	r8, r8, r6
 8000446:	408a      	lsls	r2, r1
 8000448:	431f      	orrs	r7, r3
 800044a:	fa20 f306 	lsr.w	r3, r0, r6
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	4323      	orrs	r3, r4
 8000452:	fa1f fc87 	uxth.w	ip, r7
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fbb8 fef0 	udiv	lr, r8, r0
 800045c:	fb00 881e 	mls	r8, r0, lr, r8
 8000460:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000464:	fb0e f80c 	mul.w	r8, lr, ip
 8000468:	45a0      	cmp	r8, r4
 800046a:	d90e      	bls.n	800048a <__udivmoddi4+0x1b6>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000472:	bf2c      	ite	cs
 8000474:	f04f 0b01 	movcs.w	fp, #1
 8000478:	f04f 0b00 	movcc.w	fp, #0
 800047c:	45a0      	cmp	r8, r4
 800047e:	d903      	bls.n	8000488 <__udivmoddi4+0x1b4>
 8000480:	f1bb 0f00 	cmp.w	fp, #0
 8000484:	f000 80b8 	beq.w	80005f8 <__udivmoddi4+0x324>
 8000488:	46d6      	mov	lr, sl
 800048a:	eba4 0408 	sub.w	r4, r4, r8
 800048e:	fa1f f883 	uxth.w	r8, r3
 8000492:	fbb4 f3f0 	udiv	r3, r4, r0
 8000496:	fb00 4413 	mls	r4, r0, r3, r4
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004a2:	45a4      	cmp	ip, r4
 80004a4:	d90e      	bls.n	80004c4 <__udivmoddi4+0x1f0>
 80004a6:	193c      	adds	r4, r7, r4
 80004a8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004ac:	bf2c      	ite	cs
 80004ae:	f04f 0801 	movcs.w	r8, #1
 80004b2:	f04f 0800 	movcc.w	r8, #0
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d903      	bls.n	80004c2 <__udivmoddi4+0x1ee>
 80004ba:	f1b8 0f00 	cmp.w	r8, #0
 80004be:	f000 809f 	beq.w	8000600 <__udivmoddi4+0x32c>
 80004c2:	4603      	mov	r3, r0
 80004c4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c8:	eba4 040c 	sub.w	r4, r4, ip
 80004cc:	fba0 ec02 	umull	lr, ip, r0, r2
 80004d0:	4564      	cmp	r4, ip
 80004d2:	4673      	mov	r3, lr
 80004d4:	46e0      	mov	r8, ip
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0x20a>
 80004d8:	d107      	bne.n	80004ea <__udivmoddi4+0x216>
 80004da:	45f1      	cmp	r9, lr
 80004dc:	d205      	bcs.n	80004ea <__udivmoddi4+0x216>
 80004de:	ebbe 0302 	subs.w	r3, lr, r2
 80004e2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e6:	3801      	subs	r0, #1
 80004e8:	46e0      	mov	r8, ip
 80004ea:	b15d      	cbz	r5, 8000504 <__udivmoddi4+0x230>
 80004ec:	ebb9 0203 	subs.w	r2, r9, r3
 80004f0:	eb64 0408 	sbc.w	r4, r4, r8
 80004f4:	fa04 f606 	lsl.w	r6, r4, r6
 80004f8:	fa22 f301 	lsr.w	r3, r2, r1
 80004fc:	40cc      	lsrs	r4, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e736      	b.n	8000376 <__udivmoddi4+0xa2>
 8000508:	fbb1 fcf2 	udiv	ip, r1, r2
 800050c:	0c01      	lsrs	r1, r0, #16
 800050e:	4614      	mov	r4, r2
 8000510:	b280      	uxth	r0, r0
 8000512:	4696      	mov	lr, r2
 8000514:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000518:	2620      	movs	r6, #32
 800051a:	4690      	mov	r8, r2
 800051c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000520:	4610      	mov	r0, r2
 8000522:	fbb1 f1f2 	udiv	r1, r1, r2
 8000526:	eba3 0308 	sub.w	r3, r3, r8
 800052a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052e:	e74b      	b.n	80003c8 <__udivmoddi4+0xf4>
 8000530:	40b7      	lsls	r7, r6
 8000532:	f1c6 0320 	rsb	r3, r6, #32
 8000536:	fa01 f206 	lsl.w	r2, r1, r6
 800053a:	fa21 f803 	lsr.w	r8, r1, r3
 800053e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000542:	fa20 f303 	lsr.w	r3, r0, r3
 8000546:	b2bc      	uxth	r4, r7
 8000548:	40b0      	lsls	r0, r6
 800054a:	4313      	orrs	r3, r2
 800054c:	0c02      	lsrs	r2, r0, #16
 800054e:	0c19      	lsrs	r1, r3, #16
 8000550:	b280      	uxth	r0, r0
 8000552:	fbb8 f9fe 	udiv	r9, r8, lr
 8000556:	fb0e 8819 	mls	r8, lr, r9, r8
 800055a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	4588      	cmp	r8, r1
 8000564:	d951      	bls.n	800060a <__udivmoddi4+0x336>
 8000566:	1879      	adds	r1, r7, r1
 8000568:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 800056c:	bf2c      	ite	cs
 800056e:	f04f 0a01 	movcs.w	sl, #1
 8000572:	f04f 0a00 	movcc.w	sl, #0
 8000576:	4588      	cmp	r8, r1
 8000578:	d902      	bls.n	8000580 <__udivmoddi4+0x2ac>
 800057a:	f1ba 0f00 	cmp.w	sl, #0
 800057e:	d031      	beq.n	80005e4 <__udivmoddi4+0x310>
 8000580:	eba1 0108 	sub.w	r1, r1, r8
 8000584:	fbb1 f9fe 	udiv	r9, r1, lr
 8000588:	fb09 f804 	mul.w	r8, r9, r4
 800058c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000590:	b29b      	uxth	r3, r3
 8000592:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000596:	4543      	cmp	r3, r8
 8000598:	d235      	bcs.n	8000606 <__udivmoddi4+0x332>
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005a0:	bf2c      	ite	cs
 80005a2:	f04f 0a01 	movcs.w	sl, #1
 80005a6:	f04f 0a00 	movcc.w	sl, #0
 80005aa:	4543      	cmp	r3, r8
 80005ac:	d2bb      	bcs.n	8000526 <__udivmoddi4+0x252>
 80005ae:	f1ba 0f00 	cmp.w	sl, #0
 80005b2:	d1b8      	bne.n	8000526 <__udivmoddi4+0x252>
 80005b4:	f1a9 0102 	sub.w	r1, r9, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	e7b4      	b.n	8000526 <__udivmoddi4+0x252>
 80005bc:	1a84      	subs	r4, r0, r2
 80005be:	eb68 0203 	sbc.w	r2, r8, r3
 80005c2:	2001      	movs	r0, #1
 80005c4:	4696      	mov	lr, r2
 80005c6:	e6eb      	b.n	80003a0 <__udivmoddi4+0xcc>
 80005c8:	443a      	add	r2, r7
 80005ca:	f1a8 0802 	sub.w	r8, r8, #2
 80005ce:	e72b      	b.n	8000428 <__udivmoddi4+0x154>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	443b      	add	r3, r7
 80005d6:	e710      	b.n	80003fa <__udivmoddi4+0x126>
 80005d8:	3902      	subs	r1, #2
 80005da:	443b      	add	r3, r7
 80005dc:	e6a9      	b.n	8000332 <__udivmoddi4+0x5e>
 80005de:	443a      	add	r2, r7
 80005e0:	3802      	subs	r0, #2
 80005e2:	e6be      	b.n	8000362 <__udivmoddi4+0x8e>
 80005e4:	eba7 0808 	sub.w	r8, r7, r8
 80005e8:	f1a9 0c02 	sub.w	ip, r9, #2
 80005ec:	4441      	add	r1, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c9      	b.n	800058c <__udivmoddi4+0x2b8>
 80005f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005fc:	443c      	add	r4, r7
 80005fe:	e744      	b.n	800048a <__udivmoddi4+0x1b6>
 8000600:	3b02      	subs	r3, #2
 8000602:	443c      	add	r4, r7
 8000604:	e75e      	b.n	80004c4 <__udivmoddi4+0x1f0>
 8000606:	4649      	mov	r1, r9
 8000608:	e78d      	b.n	8000526 <__udivmoddi4+0x252>
 800060a:	eba1 0108 	sub.w	r1, r1, r8
 800060e:	46cc      	mov	ip, r9
 8000610:	fbb1 f9fe 	udiv	r9, r1, lr
 8000614:	fb09 f804 	mul.w	r8, r9, r4
 8000618:	e7b8      	b.n	800058c <__udivmoddi4+0x2b8>
 800061a:	bf00      	nop

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 fc31 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f839 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 f991 	bl	8000954 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000632:	f000 f895 	bl	8000760 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000636:	f000 f941 	bl	80008bc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800063a:	f000 f8f3 	bl	8000824 <MX_USART1_UART_Init>
  while (1)
  {
	  // Test: Set GPIO pin high

	  // Read ADC value
	  HAL_ADC_Start(&hadc1); // Start ADC conversion
 800063e:	4814      	ldr	r0, [pc, #80]	@ (8000690 <main+0x70>)
 8000640:	f001 f8ac 	bl	800179c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Wait for conversion
 8000644:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000648:	4811      	ldr	r0, [pc, #68]	@ (8000690 <main+0x70>)
 800064a:	f001 f961 	bl	8001910 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1); // Read raw ADC value
 800064e:	4810      	ldr	r0, [pc, #64]	@ (8000690 <main+0x70>)
 8000650:	f001 fa36 	bl	8001ac0 <HAL_ADC_GetValue>
 8000654:	4603      	mov	r3, r0
 8000656:	81fb      	strh	r3, [r7, #14]

	  // Test: Set GPIO pin low

	  // Convert raw value to string and send via UART
	  sprintf(msg, "%hu\n", raw); // Format raw value as unsigned short
 8000658:	89fa      	ldrh	r2, [r7, #14]
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	490d      	ldr	r1, [pc, #52]	@ (8000694 <main+0x74>)
 800065e:	4618      	mov	r0, r3
 8000660:	f007 fdba 	bl	80081d8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY); // Transmit via UART2
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fe14 	bl	8000294 <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	1d39      	adds	r1, r7, #4
 8000672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000676:	4808      	ldr	r0, [pc, #32]	@ (8000698 <main+0x78>)
 8000678:	f006 fcd6 	bl	8007028 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800067c:	2120      	movs	r1, #32
 800067e:	4807      	ldr	r0, [pc, #28]	@ (800069c <main+0x7c>)
 8000680:	f002 fa6a 	bl	8002b58 <HAL_GPIO_TogglePin>

	  // Short delay
	  HAL_Delay(200); // 1ms delay
 8000684:	20c8      	movs	r0, #200	@ 0xc8
 8000686:	f000 fcbf 	bl	8001008 <HAL_Delay>
	  HAL_ADC_Start(&hadc1); // Start ADC conversion
 800068a:	bf00      	nop
 800068c:	e7d7      	b.n	800063e <main+0x1e>
 800068e:	bf00      	nop
 8000690:	20000078 	.word	0x20000078
 8000694:	08008b54 	.word	0x08008b54
 8000698:	20000174 	.word	0x20000174
 800069c:	42020000 	.word	0x42020000

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b09c      	sub	sp, #112	@ 0x70
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2250      	movs	r2, #80	@ 0x50
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f007 fdb4 	bl	800821c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
 80006c4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c6:	4b24      	ldr	r3, [pc, #144]	@ (8000758 <SystemClock_Config+0xb8>)
 80006c8:	691b      	ldr	r3, [r3, #16]
 80006ca:	4a23      	ldr	r2, [pc, #140]	@ (8000758 <SystemClock_Config+0xb8>)
 80006cc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80006d0:	6113      	str	r3, [r2, #16]
 80006d2:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <SystemClock_Config+0xb8>)
 80006d4:	691b      	ldr	r3, [r3, #16]
 80006d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006de:	bf00      	nop
 80006e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <SystemClock_Config+0xb8>)
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	f003 0308 	and.w	r3, r3, #8
 80006e8:	2b08      	cmp	r3, #8
 80006ea:	d1f9      	bne.n	80006e0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80006f4:	2308      	movs	r3, #8
 80006f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2340      	movs	r3, #64	@ 0x40
 80006fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fa41 	bl	8002b8c <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000710:	f000 f964 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	231f      	movs	r3, #31
 8000716:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2101      	movs	r1, #1
 8000732:	4618      	mov	r0, r3
 8000734:	f002 fe62 	bl	80033fc <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800073e:	f000 f94d 	bl	80009dc <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <SystemClock_Config+0xbc>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a05      	ldr	r2, [pc, #20]	@ (800075c <SystemClock_Config+0xbc>)
 8000748:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800074c:	6013      	str	r3, [r2, #0]
}
 800074e:	bf00      	nop
 8000750:	3770      	adds	r7, #112	@ 0x70
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	44020800 	.word	0x44020800
 800075c:	40022000 	.word	0x40022000

08000760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2220      	movs	r2, #32
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f007 fd55 	bl	800821c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000772:	4b2a      	ldr	r3, [pc, #168]	@ (800081c <MX_ADC1_Init+0xbc>)
 8000774:	4a2a      	ldr	r2, [pc, #168]	@ (8000820 <MX_ADC1_Init+0xc0>)
 8000776:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000778:	4b28      	ldr	r3, [pc, #160]	@ (800081c <MX_ADC1_Init+0xbc>)
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800077e:	4b27      	ldr	r3, [pc, #156]	@ (800081c <MX_ADC1_Init+0xbc>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000784:	4b25      	ldr	r3, [pc, #148]	@ (800081c <MX_ADC1_Init+0xbc>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800078a:	4b24      	ldr	r3, [pc, #144]	@ (800081c <MX_ADC1_Init+0xbc>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000790:	4b22      	ldr	r3, [pc, #136]	@ (800081c <MX_ADC1_Init+0xbc>)
 8000792:	2204      	movs	r2, #4
 8000794:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000796:	4b21      	ldr	r3, [pc, #132]	@ (800081c <MX_ADC1_Init+0xbc>)
 8000798:	2200      	movs	r2, #0
 800079a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800079c:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <MX_ADC1_Init+0xbc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007a2:	4b1e      	ldr	r3, [pc, #120]	@ (800081c <MX_ADC1_Init+0xbc>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <MX_ADC1_Init+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_ADC1_Init+0xbc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b6:	4b19      	ldr	r3, [pc, #100]	@ (800081c <MX_ADC1_Init+0xbc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007bc:	4b17      	ldr	r3, [pc, #92]	@ (800081c <MX_ADC1_Init+0xbc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80007c4:	4b15      	ldr	r3, [pc, #84]	@ (800081c <MX_ADC1_Init+0xbc>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_ADC1_Init+0xbc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80007d0:	4b12      	ldr	r3, [pc, #72]	@ (800081c <MX_ADC1_Init+0xbc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d8:	4810      	ldr	r0, [pc, #64]	@ (800081c <MX_ADC1_Init+0xbc>)
 80007da:	f000 fe8b 	bl	80014f4 <HAL_ADC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80007e4:	f000 f8fa 	bl	80009dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007e8:	2301      	movs	r3, #1
 80007ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ec:	2306      	movs	r3, #6
 80007ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f4:	237f      	movs	r3, #127	@ 0x7f
 80007f6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007f8:	2304      	movs	r3, #4
 80007fa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000800:	463b      	mov	r3, r7
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	@ (800081c <MX_ADC1_Init+0xbc>)
 8000806:	f001 f969 	bl	8001adc <HAL_ADC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000810:	f000 f8e4 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000078 	.word	0x20000078
 8000820:	42028000 	.word	0x42028000

08000824 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000828:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 800082a:	4a23      	ldr	r2, [pc, #140]	@ (80008b8 <MX_USART1_UART_Init+0x94>)
 800082c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800082e:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000842:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086c:	4811      	ldr	r0, [pc, #68]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 800086e:	f006 fb8b 	bl	8006f88 <HAL_UART_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000878:	f000 f8b0 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	480d      	ldr	r0, [pc, #52]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000880:	f007 fbdf 	bl	8008042 <HAL_UARTEx_SetTxFifoThreshold>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800088a:	f000 f8a7 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4808      	ldr	r0, [pc, #32]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000892:	f007 fc14 	bl	80080be <HAL_UARTEx_SetRxFifoThreshold>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800089c:	f000 f89e 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 80008a2:	f007 fb95 	bl	8007fd0 <HAL_UARTEx_DisableFifoMode>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008ac:	f000 f896 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000e0 	.word	0x200000e0
 80008b8:	40013800 	.word	0x40013800

080008bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c0:	4b22      	ldr	r3, [pc, #136]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008c2:	4a23      	ldr	r2, [pc, #140]	@ (8000950 <MX_USART2_UART_Init+0x94>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008c6:	4b21      	ldr	r3, [pc, #132]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008da:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b19      	ldr	r3, [pc, #100]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b17      	ldr	r3, [pc, #92]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f2:	4b16      	ldr	r3, [pc, #88]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_USART2_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000904:	4811      	ldr	r0, [pc, #68]	@ (800094c <MX_USART2_UART_Init+0x90>)
 8000906:	f006 fb3f 	bl	8006f88 <HAL_UART_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000910:	f000 f864 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000914:	2100      	movs	r1, #0
 8000916:	480d      	ldr	r0, [pc, #52]	@ (800094c <MX_USART2_UART_Init+0x90>)
 8000918:	f007 fb93 	bl	8008042 <HAL_UARTEx_SetTxFifoThreshold>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000922:	f000 f85b 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000926:	2100      	movs	r1, #0
 8000928:	4808      	ldr	r0, [pc, #32]	@ (800094c <MX_USART2_UART_Init+0x90>)
 800092a:	f007 fbc8 	bl	80080be <HAL_UARTEx_SetRxFifoThreshold>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000934:	f000 f852 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000938:	4804      	ldr	r0, [pc, #16]	@ (800094c <MX_USART2_UART_Init+0x90>)
 800093a:	f007 fb49 	bl	8007fd0 <HAL_UARTEx_DisableFifoMode>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000944:	f000 f84a 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000174 	.word	0x20000174
 8000950:	40004400 	.word	0x40004400

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_GPIO_Init+0x80>)
 800096c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000970:	4a18      	ldr	r2, [pc, #96]	@ (80009d4 <MX_GPIO_Init+0x80>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800097a:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <MX_GPIO_Init+0x80>)
 800097c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_GPIO_Init+0x80>)
 800098a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800098e:	4a11      	ldr	r2, [pc, #68]	@ (80009d4 <MX_GPIO_Init+0x80>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000998:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_GPIO_Init+0x80>)
 800099a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2120      	movs	r1, #32
 80009aa:	480b      	ldr	r0, [pc, #44]	@ (80009d8 <MX_GPIO_Init+0x84>)
 80009ac:	f002 f8bc 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009b0:	2320      	movs	r3, #32
 80009b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4619      	mov	r1, r3
 80009c6:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_GPIO_Init+0x84>)
 80009c8:	f001 ff50 	bl	800286c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	bf00      	nop
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	44020c00 	.word	0x44020c00
 80009d8:	42020000 	.word	0x42020000

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <Error_Handler+0x8>

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b0be      	sub	sp, #248	@ 0xf8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	22d0      	movs	r2, #208	@ 0xd0
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f007 fbff 	bl	800821c <memset>
  if(hadc->Instance==ADC1)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a23      	ldr	r2, [pc, #140]	@ (8000ab0 <HAL_ADC_MspInit+0xb8>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d13f      	bne.n	8000aa8 <HAL_ADC_MspInit+0xb0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000a28:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000a2c:	f04f 0300 	mov.w	r3, #0
 8000a30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f003 f81e 	bl	8003a80 <HAL_RCCEx_PeriphCLKConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_ADC_MspInit+0x56>
    {
      Error_Handler();
 8000a4a:	f7ff ffc7 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a4e:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <HAL_ADC_MspInit+0xbc>)
 8000a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a54:	4a17      	ldr	r2, [pc, #92]	@ (8000ab4 <HAL_ADC_MspInit+0xbc>)
 8000a56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <HAL_ADC_MspInit+0xbc>)
 8000a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <HAL_ADC_MspInit+0xbc>)
 8000a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a72:	4a10      	ldr	r2, [pc, #64]	@ (8000ab4 <HAL_ADC_MspInit+0xbc>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <HAL_ADC_MspInit+0xbc>)
 8000a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a90:	2303      	movs	r3, #3
 8000a92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <HAL_ADC_MspInit+0xc0>)
 8000aa4:	f001 fee2 	bl	800286c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000aa8:	bf00      	nop
 8000aaa:	37f8      	adds	r7, #248	@ 0xf8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	42028000 	.word	0x42028000
 8000ab4:	44020c00 	.word	0x44020c00
 8000ab8:	42020000 	.word	0x42020000

08000abc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b0c0      	sub	sp, #256	@ 0x100
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad4:	f107 0318 	add.w	r3, r7, #24
 8000ad8:	22d0      	movs	r2, #208	@ 0xd0
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f007 fb9d 	bl	800821c <memset>
  if(huart->Instance==USART1)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a54      	ldr	r2, [pc, #336]	@ (8000c38 <HAL_UART_MspInit+0x17c>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d14e      	bne.n	8000b8a <HAL_UART_MspInit+0xce>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000aec:	f04f 0201 	mov.w	r2, #1
 8000af0:	f04f 0300 	mov.w	r3, #0
 8000af4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000af8:	2300      	movs	r3, #0
 8000afa:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000afc:	f107 0318 	add.w	r3, r7, #24
 8000b00:	4618      	mov	r0, r3
 8000b02:	f002 ffbd 	bl	8003a80 <HAL_RCCEx_PeriphCLKConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000b0c:	f7ff ff66 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b10:	4b4a      	ldr	r3, [pc, #296]	@ (8000c3c <HAL_UART_MspInit+0x180>)
 8000b12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b16:	4a49      	ldr	r2, [pc, #292]	@ (8000c3c <HAL_UART_MspInit+0x180>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b1c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000b20:	4b46      	ldr	r3, [pc, #280]	@ (8000c3c <HAL_UART_MspInit+0x180>)
 8000b22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b43      	ldr	r3, [pc, #268]	@ (8000c3c <HAL_UART_MspInit+0x180>)
 8000b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b34:	4a41      	ldr	r2, [pc, #260]	@ (8000c3c <HAL_UART_MspInit+0x180>)
 8000b36:	f043 0302 	orr.w	r3, r3, #2
 8000b3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b3e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c3c <HAL_UART_MspInit+0x180>)
 8000b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b4c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000b50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000b66:	2304      	movs	r3, #4
 8000b68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000b70:	4619      	mov	r1, r3
 8000b72:	4833      	ldr	r0, [pc, #204]	@ (8000c40 <HAL_UART_MspInit+0x184>)
 8000b74:	f001 fe7a 	bl	800286c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	203a      	movs	r0, #58	@ 0x3a
 8000b7e:	f001 fcf7 	bl	8002570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b82:	203a      	movs	r0, #58	@ 0x3a
 8000b84:	f001 fd0e 	bl	80025a4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b88:	e051      	b.n	8000c2e <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART2)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a2d      	ldr	r2, [pc, #180]	@ (8000c44 <HAL_UART_MspInit+0x188>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d14c      	bne.n	8000c2e <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b94:	f04f 0202 	mov.w	r2, #2
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba4:	f107 0318 	add.w	r3, r7, #24
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f002 ff69 	bl	8003a80 <HAL_RCCEx_PeriphCLKConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8000bb4:	f7ff ff12 	bl	80009dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb8:	4b20      	ldr	r3, [pc, #128]	@ (8000c3c <HAL_UART_MspInit+0x180>)
 8000bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8000c3c <HAL_UART_MspInit+0x180>)
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c3c <HAL_UART_MspInit+0x180>)
 8000bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	4b19      	ldr	r3, [pc, #100]	@ (8000c3c <HAL_UART_MspInit+0x180>)
 8000bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bdc:	4a17      	ldr	r2, [pc, #92]	@ (8000c3c <HAL_UART_MspInit+0x180>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000be6:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <HAL_UART_MspInit+0x180>)
 8000be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bf4:	230c      	movs	r3, #12
 8000bf6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000c16:	4619      	mov	r1, r3
 8000c18:	480b      	ldr	r0, [pc, #44]	@ (8000c48 <HAL_UART_MspInit+0x18c>)
 8000c1a:	f001 fe27 	bl	800286c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	203b      	movs	r0, #59	@ 0x3b
 8000c24:	f001 fca4 	bl	8002570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c28:	203b      	movs	r0, #59	@ 0x3b
 8000c2a:	f001 fcbb 	bl	80025a4 <HAL_NVIC_EnableIRQ>
}
 8000c2e:	bf00      	nop
 8000c30:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40013800 	.word	0x40013800
 8000c3c:	44020c00 	.word	0x44020c00
 8000c40:	42020400 	.word	0x42020400
 8000c44:	40004400 	.word	0x40004400
 8000c48:	42020000 	.word	0x42020000

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <NMI_Handler+0x4>

08000c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <MemManage_Handler+0x4>

08000c64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca2:	f000 f991 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cb0:	4802      	ldr	r0, [pc, #8]	@ (8000cbc <USART1_IRQHandler+0x10>)
 8000cb2:	f006 fa57 	bl	8007164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200000e0 	.word	0x200000e0

08000cc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cc4:	4802      	ldr	r0, [pc, #8]	@ (8000cd0 <USART2_IRQHandler+0x10>)
 8000cc6:	f006 fa4d 	bl	8007164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000174 	.word	0x20000174

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	@ (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f007 fa92 	bl	800822c <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20044000 	.word	0x20044000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	20000208 	.word	0x20000208
 8000d3c:	20000358 	.word	0x20000358

08000d40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d46:	4b35      	ldr	r3, [pc, #212]	@ (8000e1c <SystemInit+0xdc>)
 8000d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4c:	4a33      	ldr	r2, [pc, #204]	@ (8000e1c <SystemInit+0xdc>)
 8000d4e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d52:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000d56:	4b32      	ldr	r3, [pc, #200]	@ (8000e20 <SystemInit+0xe0>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000d5c:	4b30      	ldr	r3, [pc, #192]	@ (8000e20 <SystemInit+0xe0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000d62:	4b2f      	ldr	r3, [pc, #188]	@ (8000e20 <SystemInit+0xe0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000d68:	4b2d      	ldr	r3, [pc, #180]	@ (8000e20 <SystemInit+0xe0>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	492c      	ldr	r1, [pc, #176]	@ (8000e20 <SystemInit+0xe0>)
 8000d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e24 <SystemInit+0xe4>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000d74:	4b2a      	ldr	r3, [pc, #168]	@ (8000e20 <SystemInit+0xe0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000d7a:	4b29      	ldr	r3, [pc, #164]	@ (8000e20 <SystemInit+0xe0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000d80:	4b27      	ldr	r3, [pc, #156]	@ (8000e20 <SystemInit+0xe0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000d86:	4b26      	ldr	r3, [pc, #152]	@ (8000e20 <SystemInit+0xe0>)
 8000d88:	4a27      	ldr	r2, [pc, #156]	@ (8000e28 <SystemInit+0xe8>)
 8000d8a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000d8c:	4b24      	ldr	r3, [pc, #144]	@ (8000e20 <SystemInit+0xe0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000d92:	4b23      	ldr	r3, [pc, #140]	@ (8000e20 <SystemInit+0xe0>)
 8000d94:	4a24      	ldr	r2, [pc, #144]	@ (8000e28 <SystemInit+0xe8>)
 8000d96:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000d98:	4b21      	ldr	r3, [pc, #132]	@ (8000e20 <SystemInit+0xe0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000d9e:	4b20      	ldr	r3, [pc, #128]	@ (8000e20 <SystemInit+0xe0>)
 8000da0:	4a21      	ldr	r2, [pc, #132]	@ (8000e28 <SystemInit+0xe8>)
 8000da2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000da4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e20 <SystemInit+0xe0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000daa:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <SystemInit+0xe0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a1c      	ldr	r2, [pc, #112]	@ (8000e20 <SystemInit+0xe0>)
 8000db0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000db4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <SystemInit+0xe0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dbc:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <SystemInit+0xdc>)
 8000dbe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000dc2:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000dc4:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <SystemInit+0xec>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000dcc:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000dd4:	d003      	beq.n	8000dde <SystemInit+0x9e>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000ddc:	d117      	bne.n	8000e0e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000dde:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <SystemInit+0xec>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d005      	beq.n	8000df6 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <SystemInit+0xec>)
 8000dec:	4a10      	ldr	r2, [pc, #64]	@ (8000e30 <SystemInit+0xf0>)
 8000dee:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000df0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <SystemInit+0xec>)
 8000df2:	4a10      	ldr	r2, [pc, #64]	@ (8000e34 <SystemInit+0xf4>)
 8000df4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000df6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <SystemInit+0xec>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8000e2c <SystemInit+0xec>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000e02:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <SystemInit+0xec>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a09      	ldr	r2, [pc, #36]	@ (8000e2c <SystemInit+0xec>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	61d3      	str	r3, [r2, #28]
  }
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00
 8000e20:	44020c00 	.word	0x44020c00
 8000e24:	eae2eae3 	.word	0xeae2eae3
 8000e28:	01010280 	.word	0x01010280
 8000e2c:	40022000 	.word	0x40022000
 8000e30:	08192a3b 	.word	0x08192a3b
 8000e34:	4c5d6e7f 	.word	0x4c5d6e7f

08000e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e38:	480d      	ldr	r0, [pc, #52]	@ (8000e70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e3a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e3c:	f7ff ff80 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e40:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e42:	490d      	ldr	r1, [pc, #52]	@ (8000e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e44:	4a0d      	ldr	r2, [pc, #52]	@ (8000e7c <LoopForever+0xe>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e58:	4c0a      	ldr	r4, [pc, #40]	@ (8000e84 <LoopForever+0x16>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e66:	f007 f9e7 	bl	8008238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e6a:	f7ff fbd9 	bl	8000620 <main>

08000e6e <LoopForever>:

LoopForever:
    b LoopForever
 8000e6e:	e7fe      	b.n	8000e6e <LoopForever>
  ldr   r0, =_estack
 8000e70:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e7c:	08008be0 	.word	0x08008be0
  ldr r2, =_sbss
 8000e80:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e84:	20000358 	.word	0x20000358

08000e88 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f001 fb62 	bl	800255a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000e96:	f002 fc69 	bl	800376c <HAL_RCC_GetSysClockFreq>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <HAL_Init+0x44>)
 8000e9e:	6a1b      	ldr	r3, [r3, #32]
 8000ea0:	f003 030f 	and.w	r3, r3, #15
 8000ea4:	490b      	ldr	r1, [pc, #44]	@ (8000ed4 <HAL_Init+0x48>)
 8000ea6:	5ccb      	ldrb	r3, [r1, r3]
 8000ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eac:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <HAL_Init+0x4c>)
 8000eae:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000eb0:	2004      	movs	r0, #4
 8000eb2:	f001 fba7 	bl	8002604 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	f000 f810 	bl	8000edc <HAL_InitTick>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e002      	b.n	8000ecc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec6:	f7ff fd8f 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	44020c00 	.word	0x44020c00
 8000ed4:	08008b5c 	.word	0x08008b5c
 8000ed8:	20000000 	.word	0x20000000

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000ee8:	4b33      	ldr	r3, [pc, #204]	@ (8000fb8 <HAL_InitTick+0xdc>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e05c      	b.n	8000fae <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000ef4:	4b31      	ldr	r3, [pc, #196]	@ (8000fbc <HAL_InitTick+0xe0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	d10c      	bne.n	8000f1a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000f00:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc0 <HAL_InitTick+0xe4>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb8 <HAL_InitTick+0xdc>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	e037      	b.n	8000f8a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000f1a:	f001 fbcb 	bl	80026b4 <HAL_SYSTICK_GetCLKSourceConfig>
 8000f1e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d023      	beq.n	8000f6e <HAL_InitTick+0x92>
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d82d      	bhi.n	8000f88 <HAL_InitTick+0xac>
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_InitTick+0x5e>
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d00d      	beq.n	8000f54 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000f38:	e026      	b.n	8000f88 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000f3a:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <HAL_InitTick+0xe4>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb8 <HAL_InitTick+0xdc>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	4619      	mov	r1, r3
 8000f44:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000f48:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f50:	60fb      	str	r3, [r7, #12]
        break;
 8000f52:	e01a      	b.n	8000f8a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000f54:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <HAL_InitTick+0xdc>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f62:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	60fb      	str	r3, [r7, #12]
        break;
 8000f6c:	e00d      	b.n	8000f8a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000f6e:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_InitTick+0xdc>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f78:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f7c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f84:	60fb      	str	r3, [r7, #12]
        break;
 8000f86:	e000      	b.n	8000f8a <HAL_InitTick+0xae>
        break;
 8000f88:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f001 fb18 	bl	80025c0 <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e009      	b.n	8000fae <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fa2:	f001 fae5 	bl	8002570 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000fa6:	4a07      	ldr	r2, [pc, #28]	@ (8000fc4 <HAL_InitTick+0xe8>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	e000e010 	.word	0xe000e010
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <HAL_IncTick+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_IncTick+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <HAL_IncTick+0x24>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	2000020c 	.word	0x2000020c

08000ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	@ (8001004 <HAL_GetTick+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	2000020c 	.word	0x2000020c

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff ffee 	bl	8000ff0 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffde 	bl	8000ff0 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008

08001050 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	609a      	str	r2, [r3, #8]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	609a      	str	r2, [r3, #8]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80010e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80010ea:	4a05      	ldr	r2, [pc, #20]	@ (8001100 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	42028000 	.word	0x42028000

08001104 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3360      	adds	r3, #96	@ 0x60
 8001116:	461a      	mov	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <LL_ADC_SetOffset+0x44>)
 8001126:	4013      	ands	r3, r2
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	4313      	orrs	r3, r2
 8001134:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800113c:	bf00      	nop
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	03fff000 	.word	0x03fff000

0800114c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3360      	adds	r3, #96	@ 0x60
 800115a:	461a      	mov	r2, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001178:	b480      	push	{r7}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3360      	adds	r3, #96	@ 0x60
 8001188:	461a      	mov	r2, r3
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	431a      	orrs	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011a2:	bf00      	nop
 80011a4:	371c      	adds	r7, #28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b087      	sub	sp, #28
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3360      	adds	r3, #96	@ 0x60
 80011be:	461a      	mov	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	431a      	orrs	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80011d8:	bf00      	nop
 80011da:	371c      	adds	r7, #28
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3360      	adds	r3, #96	@ 0x60
 80011f4:	461a      	mov	r2, r3
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	431a      	orrs	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800120e:	bf00      	nop
 8001210:	371c      	adds	r7, #28
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	615a      	str	r2, [r3, #20]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001266:	b480      	push	{r7}
 8001268:	b087      	sub	sp, #28
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3330      	adds	r3, #48	@ 0x30
 8001276:	461a      	mov	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	0a1b      	lsrs	r3, r3, #8
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	4413      	add	r3, r2
 8001284:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	f003 031f 	and.w	r3, r3, #31
 8001290:	211f      	movs	r1, #31
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	401a      	ands	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	0e9b      	lsrs	r3, r3, #26
 800129e:	f003 011f 	and.w	r1, r3, #31
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f003 031f 	and.w	r3, r3, #31
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	431a      	orrs	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012b2:	bf00      	nop
 80012b4:	371c      	adds	r7, #28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012be:	b480      	push	{r7}
 80012c0:	b087      	sub	sp, #28
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3314      	adds	r3, #20
 80012ce:	461a      	mov	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	0e5b      	lsrs	r3, r3, #25
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	4413      	add	r3, r2
 80012dc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	0d1b      	lsrs	r3, r3, #20
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	2107      	movs	r1, #7
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	401a      	ands	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	0d1b      	lsrs	r3, r3, #20
 80012f8:	f003 031f 	and.w	r3, r3, #31
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	431a      	orrs	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001308:	bf00      	nop
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800132c:	43db      	mvns	r3, r3
 800132e:	401a      	ands	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0318 	and.w	r3, r3, #24
 8001336:	4908      	ldr	r1, [pc, #32]	@ (8001358 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001338:	40d9      	lsrs	r1, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	400b      	ands	r3, r1
 800133e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001342:	431a      	orrs	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800134a:	bf00      	nop
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	000fffff 	.word	0x000fffff

0800135c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 031f 	and.w	r3, r3, #31
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80013a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	6093      	str	r3, [r2, #8]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013cc:	d101      	bne.n	80013d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80013f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001418:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800141c:	d101      	bne.n	8001422 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001440:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001444:	f043 0201 	orr.w	r2, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <LL_ADC_IsEnabled+0x18>
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <LL_ADC_IsEnabled+0x1a>
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800148e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001492:	f043 0204 	orr.w	r2, r3, #4
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d101      	bne.n	80014be <LL_ADC_REG_IsConversionOngoing+0x18>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	2b08      	cmp	r3, #8
 80014de:	d101      	bne.n	80014e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014e0:	2301      	movs	r3, #1
 80014e2:	e000      	b.n	80014e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b089      	sub	sp, #36	@ 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e136      	b.n	800177c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001518:	2b00      	cmp	r3, #0
 800151a:	d109      	bne.n	8001530 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fa6b 	bl	80009f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff3f 	bl	80013b8 <LL_ADC_IsDeepPowerDownEnabled>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff25 	bl	8001394 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ff5a 	bl	8001408 <LL_ADC_IsInternalRegulatorEnabled>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d115      	bne.n	8001586 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff3e 	bl	80013e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001564:	4b87      	ldr	r3, [pc, #540]	@ (8001784 <HAL_ADC_Init+0x290>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	099b      	lsrs	r3, r3, #6
 800156a:	4a87      	ldr	r2, [pc, #540]	@ (8001788 <HAL_ADC_Init+0x294>)
 800156c:	fba2 2303 	umull	r2, r3, r2, r3
 8001570:	099b      	lsrs	r3, r3, #6
 8001572:	3301      	adds	r3, #1
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001578:	e002      	b.n	8001580 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	3b01      	subs	r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f9      	bne.n	800157a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff3c 	bl	8001408 <LL_ADC_IsInternalRegulatorEnabled>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10d      	bne.n	80015b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159a:	f043 0210 	orr.w	r2, r3, #16
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a6:	f043 0201 	orr.w	r2, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff75 	bl	80014a6 <LL_ADC_REG_IsConversionOngoing>
 80015bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c2:	f003 0310 	and.w	r3, r3, #16
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f040 80cf 	bne.w	800176a <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f040 80cb 	bne.w	800176a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80015dc:	f043 0202 	orr.w	r2, r3, #2
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff35 	bl	8001458 <LL_ADC_IsEnabled>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d110      	bne.n	8001616 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015f4:	4865      	ldr	r0, [pc, #404]	@ (800178c <HAL_ADC_Init+0x298>)
 80015f6:	f7ff ff2f 	bl	8001458 <LL_ADC_IsEnabled>
 80015fa:	4604      	mov	r4, r0
 80015fc:	4864      	ldr	r0, [pc, #400]	@ (8001790 <HAL_ADC_Init+0x29c>)
 80015fe:	f7ff ff2b 	bl	8001458 <LL_ADC_IsEnabled>
 8001602:	4603      	mov	r3, r0
 8001604:	4323      	orrs	r3, r4
 8001606:	2b00      	cmp	r3, #0
 8001608:	d105      	bne.n	8001616 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4619      	mov	r1, r3
 8001610:	4860      	ldr	r0, [pc, #384]	@ (8001794 <HAL_ADC_Init+0x2a0>)
 8001612:	f7ff fd1d 	bl	8001050 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	7e5b      	ldrb	r3, [r3, #25]
 800161a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001620:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001626:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800162c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001634:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d106      	bne.n	8001652 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001648:	3b01      	subs	r3, #1
 800164a:	045b      	lsls	r3, r3, #17
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001656:	2b00      	cmp	r3, #0
 8001658:	d009      	beq.n	800166e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001666:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	4b48      	ldr	r3, [pc, #288]	@ (8001798 <HAL_ADC_Init+0x2a4>)
 8001676:	4013      	ands	r3, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	69b9      	ldr	r1, [r7, #24]
 800167e:	430b      	orrs	r3, r1
 8001680:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff15 	bl	80014cc <LL_ADC_INJ_IsConversionOngoing>
 80016a2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d13d      	bne.n	8001726 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d13a      	bne.n	8001726 <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7e1b      	ldrb	r3, [r3, #24]
 80016b4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80016bc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80016cc:	f023 0302 	bic.w	r3, r3, #2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	69b9      	ldr	r1, [r7, #24]
 80016d6:	430b      	orrs	r3, r1
 80016d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d118      	bne.n	8001716 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80016ee:	f023 0304 	bic.w	r3, r3, #4
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80016fa:	4311      	orrs	r1, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001700:	4311      	orrs	r1, r2
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001706:	430a      	orrs	r2, r1
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	611a      	str	r2, [r3, #16]
 8001714:	e007      	b.n	8001726 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0201 	bic.w	r2, r2, #1
 8001724:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d10c      	bne.n	8001748 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001734:	f023 010f 	bic.w	r1, r3, #15
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	1e5a      	subs	r2, r3, #1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	631a      	str	r2, [r3, #48]	@ 0x30
 8001746:	e007      	b.n	8001758 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 020f 	bic.w	r2, r2, #15
 8001756:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175c:	f023 0303 	bic.w	r3, r3, #3
 8001760:	f043 0201 	orr.w	r2, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	659a      	str	r2, [r3, #88]	@ 0x58
 8001768:	e007      	b.n	800177a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	f043 0210 	orr.w	r2, r3, #16
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800177a:	7ffb      	ldrb	r3, [r7, #31]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3724      	adds	r7, #36	@ 0x24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	20000000 	.word	0x20000000
 8001788:	053e2d63 	.word	0x053e2d63
 800178c:	42028000 	.word	0x42028000
 8001790:	42028100 	.word	0x42028100
 8001794:	42028300 	.word	0x42028300
 8001798:	fff04007 	.word	0xfff04007

0800179c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017a4:	4857      	ldr	r0, [pc, #348]	@ (8001904 <HAL_ADC_Start+0x168>)
 80017a6:	f7ff fdd9 	bl	800135c <LL_ADC_GetMultimode>
 80017aa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fe78 	bl	80014a6 <LL_ADC_REG_IsConversionOngoing>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f040 809c 	bne.w	80018f6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <HAL_ADC_Start+0x30>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e097      	b.n	80018fc <HAL_ADC_Start+0x160>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 fd91 	bl	80022fc <ADC_Enable>
 80017da:	4603      	mov	r3, r0
 80017dc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f040 8083 	bne.w	80018ec <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a42      	ldr	r2, [pc, #264]	@ (8001908 <HAL_ADC_Start+0x16c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d002      	beq.n	800180a <HAL_ADC_Start+0x6e>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	e000      	b.n	800180c <HAL_ADC_Start+0x70>
 800180a:	4b40      	ldr	r3, [pc, #256]	@ (800190c <HAL_ADC_Start+0x170>)
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	4293      	cmp	r3, r2
 8001812:	d002      	beq.n	800181a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d105      	bne.n	8001826 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800182e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001832:	d106      	bne.n	8001842 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001838:	f023 0206 	bic.w	r2, r3, #6
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001840:	e002      	b.n	8001848 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	221c      	movs	r2, #28
 800184e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a2a      	ldr	r2, [pc, #168]	@ (8001908 <HAL_ADC_Start+0x16c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d002      	beq.n	8001868 <HAL_ADC_Start+0xcc>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	e000      	b.n	800186a <HAL_ADC_Start+0xce>
 8001868:	4b28      	ldr	r3, [pc, #160]	@ (800190c <HAL_ADC_Start+0x170>)
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	4293      	cmp	r3, r2
 8001870:	d008      	beq.n	8001884 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	2b05      	cmp	r3, #5
 800187c:	d002      	beq.n	8001884 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	2b09      	cmp	r3, #9
 8001882:	d114      	bne.n	80018ae <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001896:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800189a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fde9 	bl	800147e <LL_ADC_REG_StartConversion>
 80018ac:	e025      	b.n	80018fa <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <HAL_ADC_Start+0x16c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d002      	beq.n	80018ca <HAL_ADC_Start+0x12e>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	e000      	b.n	80018cc <HAL_ADC_Start+0x130>
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <HAL_ADC_Start+0x170>)
 80018cc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00f      	beq.n	80018fa <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018e2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80018ea:	e006      	b.n	80018fa <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80018f4:	e001      	b.n	80018fa <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018f6:	2302      	movs	r3, #2
 80018f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80018fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	42028300 	.word	0x42028300
 8001908:	42028100 	.word	0x42028100
 800190c:	42028000 	.word	0x42028000

08001910 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800191a:	4866      	ldr	r0, [pc, #408]	@ (8001ab4 <HAL_ADC_PollForConversion+0x1a4>)
 800191c:	f7ff fd1e 	bl	800135c <LL_ADC_GetMultimode>
 8001920:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	2b08      	cmp	r3, #8
 8001928:	d102      	bne.n	8001930 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800192a:	2308      	movs	r3, #8
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	e02a      	b.n	8001986 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d005      	beq.n	8001942 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2b05      	cmp	r3, #5
 800193a:	d002      	beq.n	8001942 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	2b09      	cmp	r3, #9
 8001940:	d111      	bne.n	8001966 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d007      	beq.n	8001960 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001954:	f043 0220 	orr.w	r2, r3, #32
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0a4      	b.n	8001aaa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001960:	2304      	movs	r3, #4
 8001962:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001964:	e00f      	b.n	8001986 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001966:	4853      	ldr	r0, [pc, #332]	@ (8001ab4 <HAL_ADC_PollForConversion+0x1a4>)
 8001968:	f7ff fd06 	bl	8001378 <LL_ADC_GetMultiDMATransfer>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d007      	beq.n	8001982 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001976:	f043 0220 	orr.w	r2, r3, #32
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e093      	b.n	8001aaa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001982:	2304      	movs	r3, #4
 8001984:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001986:	f7ff fb33 	bl	8000ff0 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800198c:	e021      	b.n	80019d2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001994:	d01d      	beq.n	80019d2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001996:	f7ff fb2b 	bl	8000ff0 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d302      	bcc.n	80019ac <HAL_ADC_PollForConversion+0x9c>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d112      	bne.n	80019d2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10b      	bne.n	80019d2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019be:	f043 0204 	orr.w	r2, r3, #4
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e06b      	b.n	8001aaa <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0d6      	beq.n	800198e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fc25 	bl	8001240 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d01c      	beq.n	8001a36 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7e5b      	ldrb	r3, [r3, #25]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d118      	bne.n	8001a36 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d111      	bne.n	8001a36 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d105      	bne.n	8001a36 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab8 <HAL_ADC_PollForConversion+0x1a8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d002      	beq.n	8001a46 <HAL_ADC_PollForConversion+0x136>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	e000      	b.n	8001a48 <HAL_ADC_PollForConversion+0x138>
 8001a46:	4b1d      	ldr	r3, [pc, #116]	@ (8001abc <HAL_ADC_PollForConversion+0x1ac>)
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d008      	beq.n	8001a62 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d002      	beq.n	8001a62 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2b09      	cmp	r3, #9
 8001a60:	d104      	bne.n	8001a6c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	e00c      	b.n	8001a86 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a11      	ldr	r2, [pc, #68]	@ (8001ab8 <HAL_ADC_PollForConversion+0x1a8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d002      	beq.n	8001a7c <HAL_ADC_PollForConversion+0x16c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	e000      	b.n	8001a7e <HAL_ADC_PollForConversion+0x16e>
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <HAL_ADC_PollForConversion+0x1ac>)
 8001a7e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d104      	bne.n	8001a96 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2208      	movs	r2, #8
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e008      	b.n	8001aa8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d103      	bne.n	8001aa8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	220c      	movs	r2, #12
 8001aa6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	42028300 	.word	0x42028300
 8001ab8:	42028100 	.word	0x42028100
 8001abc:	42028000 	.word	0x42028000

08001ac0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b0b6      	sub	sp, #216	@ 0xd8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x22>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e3e6      	b.n	80022cc <HAL_ADC_ConfigChannel+0x7f0>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fccb 	bl	80014a6 <LL_ADC_REG_IsConversionOngoing>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 83cb 	bne.w	80022ae <HAL_ADC_ConfigChannel+0x7d2>
  {
    if ((pConfig->Channel == ADC_CHANNEL_0)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d009      	beq.n	8001b34 <HAL_ADC_ConfigChannel+0x58>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4ab0      	ldr	r2, [pc, #704]	@ (8001de8 <HAL_ADC_ConfigChannel+0x30c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d109      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x62>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	4aaf      	ldr	r2, [pc, #700]	@ (8001dec <HAL_ADC_ConfigChannel+0x310>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d104      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x62>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff facf 	bl	80010dc <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	6859      	ldr	r1, [r3, #4]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f7ff fb8b 	bl	8001266 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fca6 	bl	80014a6 <LL_ADC_REG_IsConversionOngoing>
 8001b5a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fcb2 	bl	80014cc <LL_ADC_INJ_IsConversionOngoing>
 8001b68:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f040 81dd 	bne.w	8001f30 <HAL_ADC_ConfigChannel+0x454>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 81d8 	bne.w	8001f30 <HAL_ADC_ConfigChannel+0x454>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b88:	d10f      	bne.n	8001baa <HAL_ADC_ConfigChannel+0xce>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2200      	movs	r2, #0
 8001b94:	4619      	mov	r1, r3
 8001b96:	f7ff fb92 	bl	80012be <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fb39 	bl	800121a <LL_ADC_SetSamplingTimeCommonConfig>
 8001ba8:	e00e      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0xec>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6819      	ldr	r1, [r3, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f7ff fb81 	bl	80012be <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fb29 	bl	800121a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	08db      	lsrs	r3, r3, #3
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d022      	beq.n	8001c30 <HAL_ADC_ConfigChannel+0x154>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	6919      	ldr	r1, [r3, #16]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001bfa:	f7ff fa83 	bl	8001104 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	6919      	ldr	r1, [r3, #16]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f7ff facf 	bl	80011ae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d102      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x14a>
 8001c20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c24:	e000      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x14c>
 8001c26:	2300      	movs	r3, #0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f7ff fadb 	bl	80011e4 <LL_ADC_SetOffsetSaturation>
 8001c2e:	e17f      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x454>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fa88 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10a      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x180>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fa7d 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	0e9b      	lsrs	r3, r3, #26
 8001c56:	f003 021f 	and.w	r2, r3, #31
 8001c5a:	e01e      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x1be>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fa72 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8001c7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 8001c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x1b2>
    return 32U;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	e004      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x1bc>
  return __builtin_clz(value);
 8001c8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d105      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x1d6>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0e9b      	lsrs	r3, r3, #26
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	e018      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x208>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001cce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 8001cd6:	2320      	movs	r3, #32
 8001cd8:	e004      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x208>
  return __builtin_clz(value);
 8001cda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d106      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x21a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fa41 	bl	8001178 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fa25 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10a      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x246>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2101      	movs	r1, #1
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fa1a 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	0e9b      	lsrs	r3, r3, #26
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	e01e      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x284>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2101      	movs	r1, #1
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fa0f 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001d40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001d48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x278>
    return 32U;
 8001d50:	2320      	movs	r3, #32
 8001d52:	e004      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 8001d54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d58:	fab3 f383 	clz	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x29c>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	0e9b      	lsrs	r3, r3, #26
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	e018      	b.n	8001daa <HAL_ADC_ConfigChannel+0x2ce>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8001d9c:	2320      	movs	r3, #32
 8001d9e:	e004      	b.n	8001daa <HAL_ADC_ConfigChannel+0x2ce>
  return __builtin_clz(value);
 8001da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d106      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x2e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2200      	movs	r2, #0
 8001db4:	2101      	movs	r1, #1
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff f9de 	bl	8001178 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff f9c2 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10e      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x314>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff f9b7 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001dde:	4603      	mov	r3, r0
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	f003 021f 	and.w	r2, r3, #31
 8001de6:	e022      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x352>
 8001de8:	04300002 	.word	0x04300002
 8001dec:	407f0000 	.word	0x407f0000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2102      	movs	r1, #2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f9a8 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001e0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001e16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x346>
    return 32U;
 8001e1e:	2320      	movs	r3, #32
 8001e20:	e004      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8001e22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e26:	fab3 f383 	clz	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d105      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x36a>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	0e9b      	lsrs	r3, r3, #26
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	e016      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x398>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001e58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001e5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x38e>
    return 32U;
 8001e66:	2320      	movs	r3, #32
 8001e68:	e004      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x398>
  return __builtin_clz(value);
 8001e6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d106      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x3aa>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2102      	movs	r1, #2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff f979 	bl	8001178 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2103      	movs	r1, #3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff f95d 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10a      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x3d6>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2103      	movs	r1, #3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f952 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	0e9b      	lsrs	r3, r3, #26
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	e017      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x406>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2103      	movs	r1, #3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff f947 	bl	800114c <LL_ADC_GetOffsetChannel>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001eca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ecc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001ece:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	e003      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001ed8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d105      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x41e>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	0e9b      	lsrs	r3, r3, #26
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	e011      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x442>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001f08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001f0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x43a>
    return 32U;
 8001f12:	2320      	movs	r3, #32
 8001f14:	e003      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 8001f16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f18:	fab3 f383 	clz	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d106      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x454>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2200      	movs	r2, #0
 8001f28:	2103      	movs	r1, #3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f924 	bl	8001178 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fa8f 	bl	8001458 <LL_ADC_IsEnabled>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f040 813f 	bne.w	80021c0 <HAL_ADC_ConfigChannel+0x6e4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6819      	ldr	r1, [r3, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f7ff f9e0 	bl	8001314 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4a8e      	ldr	r2, [pc, #568]	@ (8002194 <HAL_ADC_ConfigChannel+0x6b8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	f040 8130 	bne.w	80021c0 <HAL_ADC_ConfigChannel+0x6e4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10b      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x4ac>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0e9b      	lsrs	r3, r3, #26
 8001f76:	3301      	adds	r3, #1
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	2b09      	cmp	r3, #9
 8001f7e:	bf94      	ite	ls
 8001f80:	2301      	movls	r3, #1
 8001f82:	2300      	movhi	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	e019      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x4e0>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001f96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f98:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001f9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x4c8>
    return 32U;
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	e003      	b.n	8001fac <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8001fa4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	2b09      	cmp	r3, #9
 8001fb4:	bf94      	ite	ls
 8001fb6:	2301      	movls	r3, #1
 8001fb8:	2300      	movhi	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d079      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x5d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d107      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x500>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0e9b      	lsrs	r3, r3, #26
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	069b      	lsls	r3, r3, #26
 8001fd6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fda:	e015      	b.n	8002008 <HAL_ADC_ConfigChannel+0x52c>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x51c>
    return 32U;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	e003      	b.n	8002000 <HAL_ADC_ConfigChannel+0x524>
  return __builtin_clz(value);
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	3301      	adds	r3, #1
 8002002:	069b      	lsls	r3, r3, #26
 8002004:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x54c>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0e9b      	lsrs	r3, r3, #26
 800201a:	3301      	adds	r3, #1
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	2101      	movs	r1, #1
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	e017      	b.n	8002058 <HAL_ADC_ConfigChannel+0x57c>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002038:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800203a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x568>
    return 32U;
 8002040:	2320      	movs	r3, #32
 8002042:	e003      	b.n	800204c <HAL_ADC_ConfigChannel+0x570>
  return __builtin_clz(value);
 8002044:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	3301      	adds	r3, #1
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	2101      	movs	r1, #1
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	ea42 0103 	orr.w	r1, r2, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10a      	bne.n	800207e <HAL_ADC_ConfigChannel+0x5a2>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	3301      	adds	r3, #1
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	051b      	lsls	r3, r3, #20
 800207c:	e018      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x5d4>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800208c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800208e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_ADC_ConfigChannel+0x5be>
    return 32U;
 8002096:	2320      	movs	r3, #32
 8002098:	e003      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x5c6>
  return __builtin_clz(value);
 800209a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4613      	mov	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020b0:	430b      	orrs	r3, r1
 80020b2:	e080      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x6da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x5f4>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	0e9b      	lsrs	r3, r3, #26
 80020c6:	3301      	adds	r3, #1
 80020c8:	069b      	lsls	r3, r3, #26
 80020ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ce:	e015      	b.n	80020fc <HAL_ADC_ConfigChannel+0x620>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80020de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80020e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x610>
    return 32U;
 80020e8:	2320      	movs	r3, #32
 80020ea:	e003      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x618>
  return __builtin_clz(value);
 80020ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	069b      	lsls	r3, r3, #26
 80020f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_ADC_ConfigChannel+0x640>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	0e9b      	lsrs	r3, r3, #26
 800210e:	3301      	adds	r3, #1
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	2101      	movs	r1, #1
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	e017      	b.n	800214c <HAL_ADC_ConfigChannel+0x670>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	61fb      	str	r3, [r7, #28]
  return result;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x65c>
    return 32U;
 8002134:	2320      	movs	r3, #32
 8002136:	e003      	b.n	8002140 <HAL_ADC_ConfigChannel+0x664>
  return __builtin_clz(value);
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	3301      	adds	r3, #1
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	2101      	movs	r1, #1
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	ea42 0103 	orr.w	r1, r2, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10d      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x69c>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0e9b      	lsrs	r3, r3, #26
 8002162:	3301      	adds	r3, #1
 8002164:	f003 021f 	and.w	r2, r3, #31
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	3b1e      	subs	r3, #30
 8002170:	051b      	lsls	r3, r3, #20
 8002172:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002176:	e01d      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x6d8>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	613b      	str	r3, [r7, #16]
  return result;
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d103      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x6bc>
    return 32U;
 8002190:	2320      	movs	r3, #32
 8002192:	e005      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x6c4>
 8002194:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	3301      	adds	r3, #1
 80021a2:	f003 021f 	and.w	r2, r3, #31
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	3b1e      	subs	r3, #30
 80021ae:	051b      	lsls	r3, r3, #20
 80021b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ba:	4619      	mov	r1, r3
 80021bc:	f7ff f87f 	bl	80012be <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b43      	ldr	r3, [pc, #268]	@ (80022d4 <HAL_ADC_ConfigChannel+0x7f8>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d079      	beq.n	80022c0 <HAL_ADC_ConfigChannel+0x7e4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021cc:	4842      	ldr	r0, [pc, #264]	@ (80022d8 <HAL_ADC_ConfigChannel+0x7fc>)
 80021ce:	f7fe ff65 	bl	800109c <LL_ADC_GetCommonPathInternalCh>
 80021d2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a40      	ldr	r2, [pc, #256]	@ (80022dc <HAL_ADC_ConfigChannel+0x800>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d124      	bne.n	800222a <HAL_ADC_ConfigChannel+0x74e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d11e      	bne.n	800222a <HAL_ADC_ConfigChannel+0x74e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a3b      	ldr	r2, [pc, #236]	@ (80022e0 <HAL_ADC_ConfigChannel+0x804>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d164      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021fe:	4619      	mov	r1, r3
 8002200:	4835      	ldr	r0, [pc, #212]	@ (80022d8 <HAL_ADC_ConfigChannel+0x7fc>)
 8002202:	f7fe ff38 	bl	8001076 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002206:	4b37      	ldr	r3, [pc, #220]	@ (80022e4 <HAL_ADC_ConfigChannel+0x808>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	099b      	lsrs	r3, r3, #6
 800220c:	4a36      	ldr	r2, [pc, #216]	@ (80022e8 <HAL_ADC_ConfigChannel+0x80c>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	099b      	lsrs	r3, r3, #6
 8002214:	3301      	adds	r3, #1
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800221a:	e002      	b.n	8002222 <HAL_ADC_ConfigChannel+0x746>
          {
            wait_loop_index--;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3b01      	subs	r3, #1
 8002220:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f9      	bne.n	800221c <HAL_ADC_ConfigChannel+0x740>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002228:	e04a      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x7e4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a2f      	ldr	r2, [pc, #188]	@ (80022ec <HAL_ADC_ConfigChannel+0x810>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d113      	bne.n	800225c <HAL_ADC_ConfigChannel+0x780>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002234:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002238:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10d      	bne.n	800225c <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a2a      	ldr	r2, [pc, #168]	@ (80022f0 <HAL_ADC_ConfigChannel+0x814>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d13a      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800224a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800224e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002252:	4619      	mov	r1, r3
 8002254:	4820      	ldr	r0, [pc, #128]	@ (80022d8 <HAL_ADC_ConfigChannel+0x7fc>)
 8002256:	f7fe ff0e 	bl	8001076 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800225a:	e031      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a24      	ldr	r2, [pc, #144]	@ (80022f4 <HAL_ADC_ConfigChannel+0x818>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d113      	bne.n	800228e <HAL_ADC_ConfigChannel+0x7b2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002266:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800226a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10d      	bne.n	800228e <HAL_ADC_ConfigChannel+0x7b2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1a      	ldr	r2, [pc, #104]	@ (80022e0 <HAL_ADC_ConfigChannel+0x804>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d121      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800227c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002280:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002284:	4619      	mov	r1, r3
 8002286:	4814      	ldr	r0, [pc, #80]	@ (80022d8 <HAL_ADC_ConfigChannel+0x7fc>)
 8002288:	f7fe fef5 	bl	8001076 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 800228c:	e018      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a19      	ldr	r2, [pc, #100]	@ (80022f8 <HAL_ADC_ConfigChannel+0x81c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d113      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x7e4>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a10      	ldr	r2, [pc, #64]	@ (80022e0 <HAL_ADC_ConfigChannel+0x804>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00e      	beq.n	80022c0 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe ff06 	bl	80010b8 <LL_ADC_EnableChannelVDDcore>
 80022ac:	e008      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x7e4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b2:	f043 0220 	orr.w	r2, r3, #32
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80022c8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	37d8      	adds	r7, #216	@ 0xd8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	80080000 	.word	0x80080000
 80022d8:	42028300 	.word	0x42028300
 80022dc:	c3210000 	.word	0xc3210000
 80022e0:	42028000 	.word	0x42028000
 80022e4:	20000000 	.word	0x20000000
 80022e8:	053e2d63 	.word	0x053e2d63
 80022ec:	43290000 	.word	0x43290000
 80022f0:	42028100 	.word	0x42028100
 80022f4:	c7520000 	.word	0xc7520000
 80022f8:	475a0000 	.word	0x475a0000

080022fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff f8a3 	bl	8001458 <LL_ADC_IsEnabled>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d166      	bne.n	80023e6 <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	4b34      	ldr	r3, [pc, #208]	@ (80023f0 <ADC_Enable+0xf4>)
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00d      	beq.n	8002342 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232a:	f043 0210 	orr.w	r2, r3, #16
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002336:	f043 0201 	orr.w	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e052      	b.n	80023e8 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff f872 	bl	8001430 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800234c:	4829      	ldr	r0, [pc, #164]	@ (80023f4 <ADC_Enable+0xf8>)
 800234e:	f7fe fea5 	bl	800109c <LL_ADC_GetCommonPathInternalCh>
 8002352:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002354:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002358:	2b00      	cmp	r3, #0
 800235a:	d010      	beq.n	800237e <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800235c:	4b26      	ldr	r3, [pc, #152]	@ (80023f8 <ADC_Enable+0xfc>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	099b      	lsrs	r3, r3, #6
 8002362:	4a26      	ldr	r2, [pc, #152]	@ (80023fc <ADC_Enable+0x100>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	099b      	lsrs	r3, r3, #6
 800236a:	3301      	adds	r3, #1
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002370:	e002      	b.n	8002378 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	3b01      	subs	r3, #1
 8002376:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f9      	bne.n	8002372 <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800237e:	f7fe fe37 	bl	8000ff0 <HAL_GetTick>
 8002382:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002384:	e028      	b.n	80023d8 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff f864 	bl	8001458 <LL_ADC_IsEnabled>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d104      	bne.n	80023a0 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f848 	bl	8001430 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023a0:	f7fe fe26 	bl	8000ff0 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d914      	bls.n	80023d8 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d00d      	beq.n	80023d8 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c0:	f043 0210 	orr.w	r2, r3, #16
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023cc:	f043 0201 	orr.w	r2, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e007      	b.n	80023e8 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d1cf      	bne.n	8002386 <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	8000003f 	.word	0x8000003f
 80023f4:	42028300 	.word	0x42028300
 80023f8:	20000000 	.word	0x20000000
 80023fc:	053e2d63 	.word	0x053e2d63

08002400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002410:	4b0c      	ldr	r3, [pc, #48]	@ (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800241c:	4013      	ands	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002428:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800242c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002432:	4a04      	ldr	r2, [pc, #16]	@ (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	60d3      	str	r3, [r2, #12]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800244c:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <__NVIC_GetPriorityGrouping+0x18>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	f003 0307 	and.w	r3, r3, #7
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800246e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002472:	2b00      	cmp	r3, #0
 8002474:	db0b      	blt.n	800248e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	f003 021f 	and.w	r2, r3, #31
 800247c:	4907      	ldr	r1, [pc, #28]	@ (800249c <__NVIC_EnableIRQ+0x38>)
 800247e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	2001      	movs	r0, #1
 8002486:	fa00 f202 	lsl.w	r2, r0, r2
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000e100 	.word	0xe000e100

080024a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	db0a      	blt.n	80024ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	490c      	ldr	r1, [pc, #48]	@ (80024ec <__NVIC_SetPriority+0x4c>)
 80024ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024be:	0112      	lsls	r2, r2, #4
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	440b      	add	r3, r1
 80024c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c8:	e00a      	b.n	80024e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4908      	ldr	r1, [pc, #32]	@ (80024f0 <__NVIC_SetPriority+0x50>)
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	3b04      	subs	r3, #4
 80024d8:	0112      	lsls	r2, r2, #4
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	440b      	add	r3, r1
 80024de:	761a      	strb	r2, [r3, #24]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000e100 	.word	0xe000e100
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	@ 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f1c3 0307 	rsb	r3, r3, #7
 800250e:	2b04      	cmp	r3, #4
 8002510:	bf28      	it	cs
 8002512:	2304      	movcs	r3, #4
 8002514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3304      	adds	r3, #4
 800251a:	2b06      	cmp	r3, #6
 800251c:	d902      	bls.n	8002524 <NVIC_EncodePriority+0x30>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3b03      	subs	r3, #3
 8002522:	e000      	b.n	8002526 <NVIC_EncodePriority+0x32>
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	401a      	ands	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800253c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	43d9      	mvns	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	4313      	orrs	r3, r2
         );
}
 800254e:	4618      	mov	r0, r3
 8002550:	3724      	adds	r7, #36	@ 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ff4c 	bl	8002400 <__NVIC_SetPriorityGrouping>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800257e:	f7ff ff63 	bl	8002448 <__NVIC_GetPriorityGrouping>
 8002582:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	6978      	ldr	r0, [r7, #20]
 800258a:	f7ff ffb3 	bl	80024f4 <NVIC_EncodePriority>
 800258e:	4602      	mov	r2, r0
 8002590:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff ff82 	bl	80024a0 <__NVIC_SetPriority>
}
 800259c:	bf00      	nop
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff56 	bl	8002464 <__NVIC_EnableIRQ>
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025d0:	d301      	bcc.n	80025d6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80025d2:	2301      	movs	r3, #1
 80025d4:	e00d      	b.n	80025f2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80025d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002600 <HAL_SYSTICK_Config+0x40>)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80025de:	4b08      	ldr	r3, [pc, #32]	@ (8002600 <HAL_SYSTICK_Config+0x40>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80025e4:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_SYSTICK_Config+0x40>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a05      	ldr	r2, [pc, #20]	@ (8002600 <HAL_SYSTICK_Config+0x40>)
 80025ea:	f043 0303 	orr.w	r3, r3, #3
 80025ee:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	e000e010 	.word	0xe000e010

08002604 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b04      	cmp	r3, #4
 8002610:	d844      	bhi.n	800269c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002612:	a201      	add	r2, pc, #4	@ (adr r2, 8002618 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002618:	0800263b 	.word	0x0800263b
 800261c:	08002659 	.word	0x08002659
 8002620:	0800267b 	.word	0x0800267b
 8002624:	0800269d 	.word	0x0800269d
 8002628:	0800262d 	.word	0x0800262d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800262c:	4b1f      	ldr	r3, [pc, #124]	@ (80026ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1e      	ldr	r2, [pc, #120]	@ (80026ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002632:	f043 0304 	orr.w	r3, r3, #4
 8002636:	6013      	str	r3, [r2, #0]
      break;
 8002638:	e031      	b.n	800269e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800263a:	4b1c      	ldr	r3, [pc, #112]	@ (80026ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1b      	ldr	r2, [pc, #108]	@ (80026ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002640:	f023 0304 	bic.w	r3, r3, #4
 8002644:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002646:	4b1a      	ldr	r3, [pc, #104]	@ (80026b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002648:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800264c:	4a18      	ldr	r2, [pc, #96]	@ (80026b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800264e:	f023 030c 	bic.w	r3, r3, #12
 8002652:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002656:	e022      	b.n	800269e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002658:	4b14      	ldr	r3, [pc, #80]	@ (80026ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a13      	ldr	r2, [pc, #76]	@ (80026ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800265e:	f023 0304 	bic.w	r3, r3, #4
 8002662:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002664:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002666:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800266a:	f023 030c 	bic.w	r3, r3, #12
 800266e:	4a10      	ldr	r2, [pc, #64]	@ (80026b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002678:	e011      	b.n	800269e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800267a:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a0b      	ldr	r2, [pc, #44]	@ (80026ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002680:	f023 0304 	bic.w	r3, r3, #4
 8002684:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002686:	4b0a      	ldr	r3, [pc, #40]	@ (80026b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002688:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800268c:	f023 030c 	bic.w	r3, r3, #12
 8002690:	4a07      	ldr	r2, [pc, #28]	@ (80026b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002692:	f043 0308 	orr.w	r3, r3, #8
 8002696:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800269a:	e000      	b.n	800269e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800269c:	bf00      	nop
  }
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000e010 	.word	0xe000e010
 80026b0:	44020c00 	.word	0x44020c00

080026b4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80026ba:	4b17      	ldr	r3, [pc, #92]	@ (8002718 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80026c6:	2304      	movs	r3, #4
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	e01e      	b.n	800270a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80026cc:	4b13      	ldr	r3, [pc, #76]	@ (800271c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80026ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d00f      	beq.n	80026fe <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d80f      	bhi.n	8002704 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d003      	beq.n	80026f8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80026f0:	e008      	b.n	8002704 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
        break;
 80026f6:	e008      	b.n	800270a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80026f8:	2301      	movs	r3, #1
 80026fa:	607b      	str	r3, [r7, #4]
        break;
 80026fc:	e005      	b.n	800270a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80026fe:	2302      	movs	r3, #2
 8002700:	607b      	str	r3, [r7, #4]
        break;
 8002702:	e002      	b.n	800270a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002704:	2300      	movs	r3, #0
 8002706:	607b      	str	r3, [r7, #4]
        break;
 8002708:	bf00      	nop
    }
  }
  return systick_source;
 800270a:	687b      	ldr	r3, [r7, #4]
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000e010 	.word	0xe000e010
 800271c:	44020c00 	.word	0x44020c00

08002720 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002728:	f7fe fc62 	bl	8000ff0 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e06b      	b.n	8002810 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d008      	beq.n	8002756 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e05c      	b.n	8002810 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0204 	orr.w	r2, r2, #4
 8002764:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2205      	movs	r2, #5
 800276a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800276e:	e020      	b.n	80027b2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002770:	f7fe fc3e 	bl	8000ff0 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b05      	cmp	r3, #5
 800277c:	d919      	bls.n	80027b2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002782:	f043 0210 	orr.w	r2, r3, #16
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2203      	movs	r2, #3
 800278e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a2:	2201      	movs	r2, #1
 80027a4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e02e      	b.n	8002810 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0d7      	beq.n	8002770 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0202 	orr.w	r2, r2, #2
 80027ce:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2204      	movs	r2, #4
 80027d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80027e0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027fa:	2201      	movs	r2, #1
 80027fc:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2200      	movs	r2, #0
 8002804:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e019      	b.n	800285e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d004      	beq.n	8002840 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2220      	movs	r2, #32
 800283a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e00e      	b.n	800285e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2204      	movs	r2, #4
 8002844:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002856:	f043 0304 	orr.w	r3, r3, #4
 800285a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800287a:	e142      	b.n	8002b02 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2101      	movs	r1, #1
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	fa01 f303 	lsl.w	r3, r1, r3
 8002888:	4013      	ands	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8134 	beq.w	8002afc <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x38>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b12      	cmp	r3, #18
 80028a2:	d125      	bne.n	80028f0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	08da      	lsrs	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3208      	adds	r2, #8
 80028ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	220f      	movs	r2, #15
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4013      	ands	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f003 020f 	and.w	r2, r3, #15
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	08da      	lsrs	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3208      	adds	r2, #8
 80028ea:	6979      	ldr	r1, [r7, #20]
 80028ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2203      	movs	r2, #3
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4013      	ands	r3, r2
 8002906:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0203 	and.w	r2, r3, #3
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	4313      	orrs	r3, r2
 800291c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d00b      	beq.n	8002944 <HAL_GPIO_Init+0xd8>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d007      	beq.n	8002944 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002938:	2b11      	cmp	r3, #17
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b12      	cmp	r3, #18
 8002942:	d130      	bne.n	80029a6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4013      	ands	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800297a:	2201      	movs	r2, #1
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	4013      	ands	r3, r2
 8002988:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	f003 0201 	and.w	r2, r3, #1
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d109      	bne.n	80029c6 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d11b      	bne.n	80029f6 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d017      	beq.n	80029f6 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	2203      	movs	r2, #3
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4013      	ands	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d07c      	beq.n	8002afc <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002a02:	4a47      	ldr	r2, [pc, #284]	@ (8002b20 <HAL_GPIO_Init+0x2b4>)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3318      	adds	r3, #24
 8002a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	220f      	movs	r2, #15
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4013      	ands	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	0a9a      	lsrs	r2, r3, #10
 8002a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b24 <HAL_GPIO_Init+0x2b8>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	f002 0203 	and.w	r2, r2, #3
 8002a34:	00d2      	lsls	r2, r2, #3
 8002a36:	4093      	lsls	r3, r2
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002a3e:	4938      	ldr	r1, [pc, #224]	@ (8002b20 <HAL_GPIO_Init+0x2b4>)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3318      	adds	r3, #24
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002a4c:	4b34      	ldr	r3, [pc, #208]	@ (8002b20 <HAL_GPIO_Init+0x2b4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002a70:	4a2b      	ldr	r2, [pc, #172]	@ (8002b20 <HAL_GPIO_Init+0x2b4>)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002a76:	4b2a      	ldr	r3, [pc, #168]	@ (8002b20 <HAL_GPIO_Init+0x2b4>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	4013      	ands	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002a9a:	4a21      	ldr	r2, [pc, #132]	@ (8002b20 <HAL_GPIO_Init+0x2b4>)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b20 <HAL_GPIO_Init+0x2b4>)
 8002aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aa6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002ac6:	4a16      	ldr	r2, [pc, #88]	@ (8002b20 <HAL_GPIO_Init+0x2b4>)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002ace:	4b14      	ldr	r3, [pc, #80]	@ (8002b20 <HAL_GPIO_Init+0x2b4>)
 8002ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ad4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4013      	ands	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002af4:	4a0a      	ldr	r2, [pc, #40]	@ (8002b20 <HAL_GPIO_Init+0x2b4>)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	3301      	adds	r3, #1
 8002b00:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f47f aeb5 	bne.w	800287c <HAL_GPIO_Init+0x10>
  }
}
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	44022000 	.word	0x44022000
 8002b24:	002f7f7f 	.word	0x002f7f7f

08002b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
 8002b34:	4613      	mov	r3, r2
 8002b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b38:	787b      	ldrb	r3, [r7, #1]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b44:	e002      	b.n	8002b4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b46:	887a      	ldrh	r2, [r7, #2]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	041a      	lsls	r2, r3, #16
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	43d9      	mvns	r1, r3
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	400b      	ands	r3, r1
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	619a      	str	r2, [r3, #24]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f000 bc28 	b.w	80033f0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba0:	4b94      	ldr	r3, [pc, #592]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	f003 0318 	and.w	r3, r3, #24
 8002ba8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002baa:	4b92      	ldr	r3, [pc, #584]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d05b      	beq.n	8002c78 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d005      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x46>
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	2b18      	cmp	r3, #24
 8002bca:	d114      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d111      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f000 bc08 	b.w	80033f0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002be0:	4b84      	ldr	r3, [pc, #528]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	041b      	lsls	r3, r3, #16
 8002bee:	4981      	ldr	r1, [pc, #516]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002bf4:	e040      	b.n	8002c78 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d023      	beq.n	8002c46 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002bfe:	4b7d      	ldr	r3, [pc, #500]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a7c      	ldr	r2, [pc, #496]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7fe f9f1 	bl	8000ff0 <HAL_GetTick>
 8002c0e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002c12:	f7fe f9ed 	bl	8000ff0 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e3e5      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002c24:	4b73      	ldr	r3, [pc, #460]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002c30:	4b70      	ldr	r3, [pc, #448]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	041b      	lsls	r3, r3, #16
 8002c3e:	496d      	ldr	r1, [pc, #436]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	618b      	str	r3, [r1, #24]
 8002c44:	e018      	b.n	8002c78 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c46:	4b6b      	ldr	r3, [pc, #428]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6a      	ldr	r2, [pc, #424]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002c4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c52:	f7fe f9cd 	bl	8000ff0 <HAL_GetTick>
 8002c56:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002c5a:	f7fe f9c9 	bl	8000ff0 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e3c1      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002c6c:	4b61      	ldr	r3, [pc, #388]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f0      	bne.n	8002c5a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80a0 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_OscConfig+0x10c>
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b18      	cmp	r3, #24
 8002c90:	d109      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f040 8092 	bne.w	8002dc6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e3a4      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cae:	d106      	bne.n	8002cbe <HAL_RCC_OscConfig+0x132>
 8002cb0:	4b50      	ldr	r3, [pc, #320]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a4f      	ldr	r2, [pc, #316]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	e058      	b.n	8002d70 <HAL_RCC_OscConfig+0x1e4>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d112      	bne.n	8002cec <HAL_RCC_OscConfig+0x160>
 8002cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a4a      	ldr	r2, [pc, #296]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002ccc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b48      	ldr	r3, [pc, #288]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a47      	ldr	r2, [pc, #284]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002cd8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	4b45      	ldr	r3, [pc, #276]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a44      	ldr	r2, [pc, #272]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002ce4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e041      	b.n	8002d70 <HAL_RCC_OscConfig+0x1e4>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cf4:	d112      	bne.n	8002d1c <HAL_RCC_OscConfig+0x190>
 8002cf6:	4b3f      	ldr	r3, [pc, #252]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a3e      	ldr	r2, [pc, #248]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002cfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4b3c      	ldr	r3, [pc, #240]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a3b      	ldr	r2, [pc, #236]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002d08:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b39      	ldr	r3, [pc, #228]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a38      	ldr	r2, [pc, #224]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e029      	b.n	8002d70 <HAL_RCC_OscConfig+0x1e4>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002d24:	d112      	bne.n	8002d4c <HAL_RCC_OscConfig+0x1c0>
 8002d26:	4b33      	ldr	r3, [pc, #204]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a32      	ldr	r2, [pc, #200]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b30      	ldr	r3, [pc, #192]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a2f      	ldr	r2, [pc, #188]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002d38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a2c      	ldr	r2, [pc, #176]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e011      	b.n	8002d70 <HAL_RCC_OscConfig+0x1e4>
 8002d4c:	4b29      	ldr	r3, [pc, #164]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a28      	ldr	r2, [pc, #160]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b26      	ldr	r3, [pc, #152]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a25      	ldr	r2, [pc, #148]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002d5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	4b23      	ldr	r3, [pc, #140]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a22      	ldr	r2, [pc, #136]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002d6a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d013      	beq.n	8002da0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe f93a 	bl	8000ff0 <HAL_GetTick>
 8002d7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002d80:	f7fe f936 	bl	8000ff0 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	@ 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e32e      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d92:	4b18      	ldr	r3, [pc, #96]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x1f4>
 8002d9e:	e012      	b.n	8002dc6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe f926 	bl	8000ff0 <HAL_GetTick>
 8002da4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002da8:	f7fe f922 	bl	8000ff0 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	@ 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e31a      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dba:	4b0e      	ldr	r3, [pc, #56]	@ (8002df4 <HAL_RCC_OscConfig+0x268>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 809a 	beq.w	8002f08 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_RCC_OscConfig+0x25a>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	2b18      	cmp	r3, #24
 8002dde:	d149      	bne.n	8002e74 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d146      	bne.n	8002e74 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d104      	bne.n	8002df8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e2fe      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
 8002df2:	bf00      	nop
 8002df4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d11c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002dfe:	4b9a      	ldr	r3, [pc, #616]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0218 	and.w	r2, r3, #24
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d014      	beq.n	8002e38 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002e0e:	4b96      	ldr	r3, [pc, #600]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 0218 	bic.w	r2, r3, #24
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	4993      	ldr	r1, [pc, #588]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002e20:	f000 fdd0 	bl	80039c4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e24:	4b91      	ldr	r3, [pc, #580]	@ (800306c <HAL_RCC_OscConfig+0x4e0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe f857 	bl	8000edc <HAL_InitTick>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e2db      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe f8da 	bl	8000ff0 <HAL_GetTick>
 8002e3c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002e40:	f7fe f8d6 	bl	8000ff0 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e2ce      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e52:	4b85      	ldr	r3, [pc, #532]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002e5e:	4b82      	ldr	r3, [pc, #520]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	041b      	lsls	r3, r3, #16
 8002e6c:	497e      	ldr	r1, [pc, #504]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002e72:	e049      	b.n	8002f08 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d02c      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002e7c:	4b7a      	ldr	r3, [pc, #488]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 0218 	bic.w	r2, r3, #24
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	4977      	ldr	r1, [pc, #476]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002e8e:	4b76      	ldr	r3, [pc, #472]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a75      	ldr	r2, [pc, #468]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9a:	f7fe f8a9 	bl	8000ff0 <HAL_GetTick>
 8002e9e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002ea2:	f7fe f8a5 	bl	8000ff0 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e29d      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb4:	4b6c      	ldr	r3, [pc, #432]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002ec0:	4b69      	ldr	r3, [pc, #420]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	041b      	lsls	r3, r3, #16
 8002ece:	4966      	ldr	r1, [pc, #408]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	610b      	str	r3, [r1, #16]
 8002ed4:	e018      	b.n	8002f08 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed6:	4b64      	ldr	r3, [pc, #400]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a63      	ldr	r2, [pc, #396]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7fe f885 	bl	8000ff0 <HAL_GetTick>
 8002ee6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002eea:	f7fe f881 	bl	8000ff0 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e279      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002efc:	4b5a      	ldr	r3, [pc, #360]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f0      	bne.n	8002eea <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d03c      	beq.n	8002f8e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d01c      	beq.n	8002f56 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f1c:	4b52      	ldr	r3, [pc, #328]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f22:	4a51      	ldr	r2, [pc, #324]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002f24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7fe f860 	bl	8000ff0 <HAL_GetTick>
 8002f30:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002f34:	f7fe f85c 	bl	8000ff0 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e254      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002f46:	4b48      	ldr	r3, [pc, #288]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0ef      	beq.n	8002f34 <HAL_RCC_OscConfig+0x3a8>
 8002f54:	e01b      	b.n	8002f8e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f56:	4b44      	ldr	r3, [pc, #272]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f5c:	4a42      	ldr	r2, [pc, #264]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002f5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f66:	f7fe f843 	bl	8000ff0 <HAL_GetTick>
 8002f6a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002f6e:	f7fe f83f 	bl	8000ff0 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e237      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002f80:	4b39      	ldr	r3, [pc, #228]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002f82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1ef      	bne.n	8002f6e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80d2 	beq.w	8003140 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002f9c:	4b34      	ldr	r3, [pc, #208]	@ (8003070 <HAL_RCC_OscConfig+0x4e4>)
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d118      	bne.n	8002fda <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002fa8:	4b31      	ldr	r3, [pc, #196]	@ (8003070 <HAL_RCC_OscConfig+0x4e4>)
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fac:	4a30      	ldr	r2, [pc, #192]	@ (8003070 <HAL_RCC_OscConfig+0x4e4>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb4:	f7fe f81c 	bl	8000ff0 <HAL_GetTick>
 8002fb8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbc:	f7fe f818 	bl	8000ff0 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e210      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002fce:	4b28      	ldr	r3, [pc, #160]	@ (8003070 <HAL_RCC_OscConfig+0x4e4>)
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d108      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x468>
 8002fe2:	4b21      	ldr	r3, [pc, #132]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ff2:	e074      	b.n	80030de <HAL_RCC_OscConfig+0x552>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d118      	bne.n	800302e <HAL_RCC_OscConfig+0x4a2>
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002ffe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003002:	4a19      	ldr	r2, [pc, #100]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800300c:	4b16      	ldr	r3, [pc, #88]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 800300e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003012:	4a15      	ldr	r2, [pc, #84]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8003014:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003018:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800301c:	4b12      	ldr	r3, [pc, #72]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 800301e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003022:	4a11      	ldr	r2, [pc, #68]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8003024:	f023 0304 	bic.w	r3, r3, #4
 8003028:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800302c:	e057      	b.n	80030de <HAL_RCC_OscConfig+0x552>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b05      	cmp	r3, #5
 8003034:	d11e      	bne.n	8003074 <HAL_RCC_OscConfig+0x4e8>
 8003036:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8003038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800303c:	4a0a      	ldr	r2, [pc, #40]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 800303e:	f043 0304 	orr.w	r3, r3, #4
 8003042:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003046:	4b08      	ldr	r3, [pc, #32]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8003048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800304c:	4a06      	ldr	r2, [pc, #24]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 800304e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003052:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003056:	4b04      	ldr	r3, [pc, #16]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8003058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800305c:	4a02      	ldr	r2, [pc, #8]	@ (8003068 <HAL_RCC_OscConfig+0x4dc>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003066:	e03a      	b.n	80030de <HAL_RCC_OscConfig+0x552>
 8003068:	44020c00 	.word	0x44020c00
 800306c:	20000004 	.word	0x20000004
 8003070:	44020800 	.word	0x44020800
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b85      	cmp	r3, #133	@ 0x85
 800307a:	d118      	bne.n	80030ae <HAL_RCC_OscConfig+0x522>
 800307c:	4ba2      	ldr	r3, [pc, #648]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 800307e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003082:	4aa1      	ldr	r2, [pc, #644]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 8003084:	f043 0304 	orr.w	r3, r3, #4
 8003088:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800308c:	4b9e      	ldr	r3, [pc, #632]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 800308e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003092:	4a9d      	ldr	r2, [pc, #628]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 8003094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003098:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800309c:	4b9a      	ldr	r3, [pc, #616]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 800309e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030a2:	4a99      	ldr	r2, [pc, #612]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030ac:	e017      	b.n	80030de <HAL_RCC_OscConfig+0x552>
 80030ae:	4b96      	ldr	r3, [pc, #600]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80030b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030b4:	4a94      	ldr	r2, [pc, #592]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80030b6:	f023 0301 	bic.w	r3, r3, #1
 80030ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030be:	4b92      	ldr	r3, [pc, #584]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80030c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030c4:	4a90      	ldr	r2, [pc, #576]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80030c6:	f023 0304 	bic.w	r3, r3, #4
 80030ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030ce:	4b8e      	ldr	r3, [pc, #568]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80030d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030d4:	4a8c      	ldr	r2, [pc, #560]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80030d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d016      	beq.n	8003114 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e6:	f7fd ff83 	bl	8000ff0 <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ec:	e00a      	b.n	8003104 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ee:	f7fd ff7f 	bl	8000ff0 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e175      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003104:	4b80      	ldr	r3, [pc, #512]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 8003106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0ed      	beq.n	80030ee <HAL_RCC_OscConfig+0x562>
 8003112:	e015      	b.n	8003140 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003114:	f7fd ff6c 	bl	8000ff0 <HAL_GetTick>
 8003118:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800311a:	e00a      	b.n	8003132 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311c:	f7fd ff68 	bl	8000ff0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e15e      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003132:	4b75      	ldr	r3, [pc, #468]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 8003134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1ed      	bne.n	800311c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b00      	cmp	r3, #0
 800314a:	d036      	beq.n	80031ba <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003150:	2b00      	cmp	r3, #0
 8003152:	d019      	beq.n	8003188 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003154:	4b6c      	ldr	r3, [pc, #432]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a6b      	ldr	r2, [pc, #428]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 800315a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800315e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7fd ff46 	bl	8000ff0 <HAL_GetTick>
 8003164:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003168:	f7fd ff42 	bl	8000ff0 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e13a      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800317a:	4b63      	ldr	r3, [pc, #396]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x5dc>
 8003186:	e018      	b.n	80031ba <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003188:	4b5f      	ldr	r3, [pc, #380]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a5e      	ldr	r2, [pc, #376]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 800318e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003192:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003194:	f7fd ff2c 	bl	8000ff0 <HAL_GetTick>
 8003198:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800319c:	f7fd ff28 	bl	8000ff0 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e120      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80031ae:	4b56      	ldr	r3, [pc, #344]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 8115 	beq.w	80033ee <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	2b18      	cmp	r3, #24
 80031c8:	f000 80af 	beq.w	800332a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	f040 8086 	bne.w	80032e2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80031d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a4b      	ldr	r2, [pc, #300]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80031dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e2:	f7fd ff05 	bl	8000ff0 <HAL_GetTick>
 80031e6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80031ea:	f7fd ff01 	bl	8000ff0 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e0f9      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80031fc:	4b42      	ldr	r3, [pc, #264]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f0      	bne.n	80031ea <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003208:	4b3f      	ldr	r3, [pc, #252]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 800320a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003210:	f023 0303 	bic.w	r3, r3, #3
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800321c:	0212      	lsls	r2, r2, #8
 800321e:	430a      	orrs	r2, r1
 8003220:	4939      	ldr	r1, [pc, #228]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 8003222:	4313      	orrs	r3, r2
 8003224:	628b      	str	r3, [r1, #40]	@ 0x28
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800322a:	3b01      	subs	r3, #1
 800322c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003234:	3b01      	subs	r3, #1
 8003236:	025b      	lsls	r3, r3, #9
 8003238:	b29b      	uxth	r3, r3
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003240:	3b01      	subs	r3, #1
 8003242:	041b      	lsls	r3, r3, #16
 8003244:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	3b01      	subs	r3, #1
 8003250:	061b      	lsls	r3, r3, #24
 8003252:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003256:	492c      	ldr	r1, [pc, #176]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 8003258:	4313      	orrs	r3, r2
 800325a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800325c:	4b2a      	ldr	r3, [pc, #168]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 800325e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003260:	4a29      	ldr	r2, [pc, #164]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 8003262:	f023 0310 	bic.w	r3, r3, #16
 8003266:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326c:	4a26      	ldr	r2, [pc, #152]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003272:	4b25      	ldr	r3, [pc, #148]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 8003274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003276:	4a24      	ldr	r2, [pc, #144]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 8003278:	f043 0310 	orr.w	r3, r3, #16
 800327c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800327e:	4b22      	ldr	r3, [pc, #136]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 8003280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003282:	f023 020c 	bic.w	r2, r3, #12
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	491f      	ldr	r1, [pc, #124]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 800328c:	4313      	orrs	r3, r2
 800328e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003290:	4b1d      	ldr	r3, [pc, #116]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 8003292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003294:	f023 0220 	bic.w	r2, r3, #32
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800329c:	491a      	ldr	r1, [pc, #104]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032a2:	4b19      	ldr	r3, [pc, #100]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80032a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a6:	4a18      	ldr	r2, [pc, #96]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ac:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80032ae:	4b16      	ldr	r3, [pc, #88]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a15      	ldr	r2, [pc, #84]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80032b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fd fe99 	bl	8000ff0 <HAL_GetTick>
 80032be:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80032c2:	f7fd fe95 	bl	8000ff0 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e08d      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80032d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x736>
 80032e0:	e085      	b.n	80033ee <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80032e2:	4b09      	ldr	r3, [pc, #36]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a08      	ldr	r2, [pc, #32]	@ (8003308 <HAL_RCC_OscConfig+0x77c>)
 80032e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fd fe7f 	bl	8000ff0 <HAL_GetTick>
 80032f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80032f6:	f7fd fe7b 	bl	8000ff0 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d903      	bls.n	800330c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e073      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
 8003308:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800330c:	4b3a      	ldr	r3, [pc, #232]	@ (80033f8 <HAL_RCC_OscConfig+0x86c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1ee      	bne.n	80032f6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003318:	4b37      	ldr	r3, [pc, #220]	@ (80033f8 <HAL_RCC_OscConfig+0x86c>)
 800331a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331c:	4a36      	ldr	r2, [pc, #216]	@ (80033f8 <HAL_RCC_OscConfig+0x86c>)
 800331e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003322:	f023 0303 	bic.w	r3, r3, #3
 8003326:	6293      	str	r3, [r2, #40]	@ 0x28
 8003328:	e061      	b.n	80033ee <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800332a:	4b33      	ldr	r3, [pc, #204]	@ (80033f8 <HAL_RCC_OscConfig+0x86c>)
 800332c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003330:	4b31      	ldr	r3, [pc, #196]	@ (80033f8 <HAL_RCC_OscConfig+0x86c>)
 8003332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003334:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333a:	2b01      	cmp	r3, #1
 800333c:	d031      	beq.n	80033a2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f003 0203 	and.w	r2, r3, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d12a      	bne.n	80033a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	0a1b      	lsrs	r3, r3, #8
 8003350:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003358:	429a      	cmp	r2, r3
 800335a:	d122      	bne.n	80033a2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003366:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d11a      	bne.n	80033a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	0a5b      	lsrs	r3, r3, #9
 8003370:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003378:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d111      	bne.n	80033a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	0c1b      	lsrs	r3, r3, #16
 8003382:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d108      	bne.n	80033a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	0e1b      	lsrs	r3, r3, #24
 8003394:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d001      	beq.n	80033a6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e024      	b.n	80033f0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80033a6:	4b14      	ldr	r3, [pc, #80]	@ (80033f8 <HAL_RCC_OscConfig+0x86c>)
 80033a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033aa:	08db      	lsrs	r3, r3, #3
 80033ac:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d01a      	beq.n	80033ee <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80033b8:	4b0f      	ldr	r3, [pc, #60]	@ (80033f8 <HAL_RCC_OscConfig+0x86c>)
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	4a0e      	ldr	r2, [pc, #56]	@ (80033f8 <HAL_RCC_OscConfig+0x86c>)
 80033be:	f023 0310 	bic.w	r3, r3, #16
 80033c2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fd fe14 	bl	8000ff0 <HAL_GetTick>
 80033c8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80033ca:	bf00      	nop
 80033cc:	f7fd fe10 	bl	8000ff0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d0f9      	beq.n	80033cc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033dc:	4a06      	ldr	r2, [pc, #24]	@ (80033f8 <HAL_RCC_OscConfig+0x86c>)
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80033e2:	4b05      	ldr	r3, [pc, #20]	@ (80033f8 <HAL_RCC_OscConfig+0x86c>)
 80033e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e6:	4a04      	ldr	r2, [pc, #16]	@ (80033f8 <HAL_RCC_OscConfig+0x86c>)
 80033e8:	f043 0310 	orr.w	r3, r3, #16
 80033ec:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3720      	adds	r7, #32
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	44020c00 	.word	0x44020c00

080033fc <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e19e      	b.n	800374e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003410:	4b83      	ldr	r3, [pc, #524]	@ (8003620 <HAL_RCC_ClockConfig+0x224>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d910      	bls.n	8003440 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4b80      	ldr	r3, [pc, #512]	@ (8003620 <HAL_RCC_ClockConfig+0x224>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 020f 	bic.w	r2, r3, #15
 8003426:	497e      	ldr	r1, [pc, #504]	@ (8003620 <HAL_RCC_ClockConfig+0x224>)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342e:	4b7c      	ldr	r3, [pc, #496]	@ (8003620 <HAL_RCC_ClockConfig+0x224>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e186      	b.n	800374e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b00      	cmp	r3, #0
 800344a:	d012      	beq.n	8003472 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695a      	ldr	r2, [r3, #20]
 8003450:	4b74      	ldr	r3, [pc, #464]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	0a1b      	lsrs	r3, r3, #8
 8003456:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800345a:	429a      	cmp	r2, r3
 800345c:	d909      	bls.n	8003472 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800345e:	4b71      	ldr	r3, [pc, #452]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	496d      	ldr	r1, [pc, #436]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 800346e:	4313      	orrs	r3, r2
 8003470:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d012      	beq.n	80034a4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	4b68      	ldr	r3, [pc, #416]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800348c:	429a      	cmp	r2, r3
 800348e:	d909      	bls.n	80034a4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003490:	4b64      	ldr	r3, [pc, #400]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	4961      	ldr	r1, [pc, #388]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d010      	beq.n	80034d2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	4b5b      	ldr	r3, [pc, #364]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034bc:	429a      	cmp	r2, r3
 80034be:	d908      	bls.n	80034d2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80034c0:	4b58      	ldr	r3, [pc, #352]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4955      	ldr	r1, [pc, #340]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d010      	beq.n	8003500 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	4b50      	ldr	r3, [pc, #320]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d908      	bls.n	8003500 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80034ee:	4b4d      	ldr	r3, [pc, #308]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f023 020f 	bic.w	r2, r3, #15
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	494a      	ldr	r1, [pc, #296]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8093 	beq.w	8003634 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d107      	bne.n	8003526 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003516:	4b43      	ldr	r3, [pc, #268]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d121      	bne.n	8003566 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e113      	b.n	800374e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d107      	bne.n	800353e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800352e:	4b3d      	ldr	r3, [pc, #244]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d115      	bne.n	8003566 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e107      	b.n	800374e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003546:	4b37      	ldr	r3, [pc, #220]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e0fb      	b.n	800374e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003556:	4b33      	ldr	r3, [pc, #204]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e0f3      	b.n	800374e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003566:	4b2f      	ldr	r3, [pc, #188]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f023 0203 	bic.w	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	492c      	ldr	r1, [pc, #176]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 8003574:	4313      	orrs	r3, r2
 8003576:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003578:	f7fd fd3a 	bl	8000ff0 <HAL_GetTick>
 800357c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b03      	cmp	r3, #3
 8003584:	d112      	bne.n	80035ac <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003586:	e00a      	b.n	800359e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003588:	f7fd fd32 	bl	8000ff0 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003596:	4293      	cmp	r3, r2
 8003598:	d901      	bls.n	800359e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e0d7      	b.n	800374e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800359e:	4b21      	ldr	r3, [pc, #132]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f003 0318 	and.w	r3, r3, #24
 80035a6:	2b18      	cmp	r3, #24
 80035a8:	d1ee      	bne.n	8003588 <HAL_RCC_ClockConfig+0x18c>
 80035aa:	e043      	b.n	8003634 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d112      	bne.n	80035da <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035b4:	e00a      	b.n	80035cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80035b6:	f7fd fd1b 	bl	8000ff0 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e0c0      	b.n	800374e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035cc:	4b15      	ldr	r3, [pc, #84]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f003 0318 	and.w	r3, r3, #24
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d1ee      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x1ba>
 80035d8:	e02c      	b.n	8003634 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d122      	bne.n	8003628 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80035e4:	f7fd fd04 	bl	8000ff0 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e0a9      	b.n	800374e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80035fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003624 <HAL_RCC_ClockConfig+0x228>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f003 0318 	and.w	r3, r3, #24
 8003602:	2b08      	cmp	r3, #8
 8003604:	d1ee      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x1e8>
 8003606:	e015      	b.n	8003634 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003608:	f7fd fcf2 	bl	8000ff0 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d906      	bls.n	8003628 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e097      	b.n	800374e <HAL_RCC_ClockConfig+0x352>
 800361e:	bf00      	nop
 8003620:	40022000 	.word	0x40022000
 8003624:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003628:	4b4b      	ldr	r3, [pc, #300]	@ (8003758 <HAL_RCC_ClockConfig+0x35c>)
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f003 0318 	and.w	r3, r3, #24
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e9      	bne.n	8003608 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d010      	beq.n	8003662 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	4b44      	ldr	r3, [pc, #272]	@ (8003758 <HAL_RCC_ClockConfig+0x35c>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	429a      	cmp	r2, r3
 800364e:	d208      	bcs.n	8003662 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003650:	4b41      	ldr	r3, [pc, #260]	@ (8003758 <HAL_RCC_ClockConfig+0x35c>)
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	f023 020f 	bic.w	r2, r3, #15
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	493e      	ldr	r1, [pc, #248]	@ (8003758 <HAL_RCC_ClockConfig+0x35c>)
 800365e:	4313      	orrs	r3, r2
 8003660:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003662:	4b3e      	ldr	r3, [pc, #248]	@ (800375c <HAL_RCC_ClockConfig+0x360>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d210      	bcs.n	8003692 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003670:	4b3a      	ldr	r3, [pc, #232]	@ (800375c <HAL_RCC_ClockConfig+0x360>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 020f 	bic.w	r2, r3, #15
 8003678:	4938      	ldr	r1, [pc, #224]	@ (800375c <HAL_RCC_ClockConfig+0x360>)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	4313      	orrs	r3, r2
 800367e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003680:	4b36      	ldr	r3, [pc, #216]	@ (800375c <HAL_RCC_ClockConfig+0x360>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d001      	beq.n	8003692 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e05d      	b.n	800374e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d010      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003758 <HAL_RCC_ClockConfig+0x35c>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d208      	bcs.n	80036c0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80036ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003758 <HAL_RCC_ClockConfig+0x35c>)
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	4927      	ldr	r1, [pc, #156]	@ (8003758 <HAL_RCC_ClockConfig+0x35c>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d012      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	4b21      	ldr	r3, [pc, #132]	@ (8003758 <HAL_RCC_ClockConfig+0x35c>)
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036da:	429a      	cmp	r2, r3
 80036dc:	d209      	bcs.n	80036f2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80036de:	4b1e      	ldr	r3, [pc, #120]	@ (8003758 <HAL_RCC_ClockConfig+0x35c>)
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	491a      	ldr	r1, [pc, #104]	@ (8003758 <HAL_RCC_ClockConfig+0x35c>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d012      	beq.n	8003724 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	4b15      	ldr	r3, [pc, #84]	@ (8003758 <HAL_RCC_ClockConfig+0x35c>)
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	0a1b      	lsrs	r3, r3, #8
 8003708:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800370c:	429a      	cmp	r2, r3
 800370e:	d209      	bcs.n	8003724 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003710:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <HAL_RCC_ClockConfig+0x35c>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	490e      	ldr	r1, [pc, #56]	@ (8003758 <HAL_RCC_ClockConfig+0x35c>)
 8003720:	4313      	orrs	r3, r2
 8003722:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003724:	f000 f822 	bl	800376c <HAL_RCC_GetSysClockFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b0b      	ldr	r3, [pc, #44]	@ (8003758 <HAL_RCC_ClockConfig+0x35c>)
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	490b      	ldr	r1, [pc, #44]	@ (8003760 <HAL_RCC_ClockConfig+0x364>)
 8003734:	5ccb      	ldrb	r3, [r1, r3]
 8003736:	fa22 f303 	lsr.w	r3, r2, r3
 800373a:	4a0a      	ldr	r2, [pc, #40]	@ (8003764 <HAL_RCC_ClockConfig+0x368>)
 800373c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800373e:	4b0a      	ldr	r3, [pc, #40]	@ (8003768 <HAL_RCC_ClockConfig+0x36c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fd fbca 	bl	8000edc <HAL_InitTick>
 8003748:	4603      	mov	r3, r0
 800374a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800374c:	7afb      	ldrb	r3, [r7, #11]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	44020c00 	.word	0x44020c00
 800375c:	40022000 	.word	0x40022000
 8003760:	08008b5c 	.word	0x08008b5c
 8003764:	20000000 	.word	0x20000000
 8003768:	20000004 	.word	0x20000004

0800376c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800376c:	b480      	push	{r7}
 800376e:	b089      	sub	sp, #36	@ 0x24
 8003770:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003772:	4b8c      	ldr	r3, [pc, #560]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 0318 	and.w	r3, r3, #24
 800377a:	2b08      	cmp	r3, #8
 800377c:	d102      	bne.n	8003784 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800377e:	4b8a      	ldr	r3, [pc, #552]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	e107      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003784:	4b87      	ldr	r3, [pc, #540]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	f003 0318 	and.w	r3, r3, #24
 800378c:	2b00      	cmp	r3, #0
 800378e:	d112      	bne.n	80037b6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003790:	4b84      	ldr	r3, [pc, #528]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b00      	cmp	r3, #0
 800379a:	d009      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800379c:	4b81      	ldr	r3, [pc, #516]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	08db      	lsrs	r3, r3, #3
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	4a81      	ldr	r2, [pc, #516]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x240>)
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	e0f1      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80037b0:	4b7e      	ldr	r3, [pc, #504]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x240>)
 80037b2:	61fb      	str	r3, [r7, #28]
 80037b4:	e0ee      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037b6:	4b7b      	ldr	r3, [pc, #492]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x238>)
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f003 0318 	and.w	r3, r3, #24
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d102      	bne.n	80037c8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037c2:	4b7b      	ldr	r3, [pc, #492]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x244>)
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	e0e5      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c8:	4b76      	ldr	r3, [pc, #472]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x238>)
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	f003 0318 	and.w	r3, r3, #24
 80037d0:	2b18      	cmp	r3, #24
 80037d2:	f040 80dd 	bne.w	8003990 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80037d6:	4b73      	ldr	r3, [pc, #460]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x238>)
 80037d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80037e0:	4b70      	ldr	r3, [pc, #448]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x238>)
 80037e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e4:	0a1b      	lsrs	r3, r3, #8
 80037e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80037ec:	4b6d      	ldr	r3, [pc, #436]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x238>)
 80037ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80037f8:	4b6a      	ldr	r3, [pc, #424]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x238>)
 80037fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80037fc:	08db      	lsrs	r3, r3, #3
 80037fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	fb02 f303 	mul.w	r3, r2, r3
 8003808:	ee07 3a90 	vmov	s15, r3
 800380c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003810:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80b7 	beq.w	800398a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d003      	beq.n	800382a <HAL_RCC_GetSysClockFreq+0xbe>
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b03      	cmp	r3, #3
 8003826:	d056      	beq.n	80038d6 <HAL_RCC_GetSysClockFreq+0x16a>
 8003828:	e077      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800382a:	4b5e      	ldr	r3, [pc, #376]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d02d      	beq.n	8003892 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003836:	4b5b      	ldr	r3, [pc, #364]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	08db      	lsrs	r3, r3, #3
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	4a5a      	ldr	r2, [pc, #360]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x240>)
 8003842:	fa22 f303 	lsr.w	r3, r2, r3
 8003846:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	ee07 3a90 	vmov	s15, r3
 8003858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003860:	4b50      	ldr	r3, [pc, #320]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003868:	ee07 3a90 	vmov	s15, r3
 800386c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003870:	ed97 6a02 	vldr	s12, [r7, #8]
 8003874:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80039b4 <HAL_RCC_GetSysClockFreq+0x248>
 8003878:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800387c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003880:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003884:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003890:	e065      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	ee07 3a90 	vmov	s15, r3
 8003898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80039b8 <HAL_RCC_GetSysClockFreq+0x24c>
 80038a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038a4:	4b3f      	ldr	r3, [pc, #252]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x238>)
 80038a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ac:	ee07 3a90 	vmov	s15, r3
 80038b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80038b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80038b8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80039b4 <HAL_RCC_GetSysClockFreq+0x248>
 80038bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80038c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80038c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80038cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80038d4:	e043      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	ee07 3a90 	vmov	s15, r3
 80038dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80039bc <HAL_RCC_GetSysClockFreq+0x250>
 80038e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e8:	4b2e      	ldr	r3, [pc, #184]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x238>)
 80038ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f0:	ee07 3a90 	vmov	s15, r3
 80038f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80038f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80038fc:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80039b4 <HAL_RCC_GetSysClockFreq+0x248>
 8003900:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003904:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003908:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800390c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003914:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003918:	e021      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003924:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80039c0 <HAL_RCC_GetSysClockFreq+0x254>
 8003928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800392c:	4b1d      	ldr	r3, [pc, #116]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800392e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003934:	ee07 3a90 	vmov	s15, r3
 8003938:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800393c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003940:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80039b4 <HAL_RCC_GetSysClockFreq+0x248>
 8003944:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003948:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800394c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003950:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003958:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800395c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800395e:	4b11      	ldr	r3, [pc, #68]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003962:	0a5b      	lsrs	r3, r3, #9
 8003964:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003968:	3301      	adds	r3, #1
 800396a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	ee07 3a90 	vmov	s15, r3
 8003972:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003976:	edd7 6a06 	vldr	s13, [r7, #24]
 800397a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800397e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003982:	ee17 3a90 	vmov	r3, s15
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	e004      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	e001      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003990:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x240>)
 8003992:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003994:	69fb      	ldr	r3, [r7, #28]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3724      	adds	r7, #36	@ 0x24
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	44020c00 	.word	0x44020c00
 80039a8:	003d0900 	.word	0x003d0900
 80039ac:	03d09000 	.word	0x03d09000
 80039b0:	017d7840 	.word	0x017d7840
 80039b4:	46000000 	.word	0x46000000
 80039b8:	4c742400 	.word	0x4c742400
 80039bc:	4bbebc20 	.word	0x4bbebc20
 80039c0:	4a742400 	.word	0x4a742400

080039c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80039c8:	f7ff fed0 	bl	800376c <HAL_RCC_GetSysClockFreq>
 80039cc:	4602      	mov	r2, r0
 80039ce:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80039d2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80039d6:	4907      	ldr	r1, [pc, #28]	@ (80039f4 <HAL_RCC_GetHCLKFreq+0x30>)
 80039d8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80039da:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80039de:	fa22 f303 	lsr.w	r3, r2, r3
 80039e2:	4a05      	ldr	r2, [pc, #20]	@ (80039f8 <HAL_RCC_GetHCLKFreq+0x34>)
 80039e4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80039e6:	4b04      	ldr	r3, [pc, #16]	@ (80039f8 <HAL_RCC_GetHCLKFreq+0x34>)
 80039e8:	681b      	ldr	r3, [r3, #0]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	44020c00 	.word	0x44020c00
 80039f4:	08008b5c 	.word	0x08008b5c
 80039f8:	20000000 	.word	0x20000000

080039fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003a00:	f7ff ffe0 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b06      	ldr	r3, [pc, #24]	@ (8003a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	4904      	ldr	r1, [pc, #16]	@ (8003a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	44020c00 	.word	0x44020c00
 8003a24:	08008b6c 	.word	0x08008b6c

08003a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003a2c:	f7ff ffca 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4904      	ldr	r1, [pc, #16]	@ (8003a50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	44020c00 	.word	0x44020c00
 8003a50:	08008b6c 	.word	0x08008b6c

08003a54 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003a58:	f7ff ffb4 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	0b1b      	lsrs	r3, r3, #12
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4904      	ldr	r1, [pc, #16]	@ (8003a7c <HAL_RCC_GetPCLK3Freq+0x28>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	44020c00 	.word	0x44020c00
 8003a7c:	08008b6c 	.word	0x08008b6c

08003a80 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a84:	b0ba      	sub	sp, #232	@ 0xe8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a92:	2300      	movs	r3, #0
 8003a94:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003a98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003aa4:	2500      	movs	r5, #0
 8003aa6:	ea54 0305 	orrs.w	r3, r4, r5
 8003aaa:	d00b      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003aac:	4bcd      	ldr	r3, [pc, #820]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ab2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003abc:	4ac9      	ldr	r2, [pc, #804]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ac4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003acc:	f002 0801 	and.w	r8, r2, #1
 8003ad0:	f04f 0900 	mov.w	r9, #0
 8003ad4:	ea58 0309 	orrs.w	r3, r8, r9
 8003ad8:	d042      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae0:	2b05      	cmp	r3, #5
 8003ae2:	d823      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8003aec <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003b35 	.word	0x08003b35
 8003af0:	08003b05 	.word	0x08003b05
 8003af4:	08003b19 	.word	0x08003b19
 8003af8:	08003b35 	.word	0x08003b35
 8003afc:	08003b35 	.word	0x08003b35
 8003b00:	08003b35 	.word	0x08003b35
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b08:	3308      	adds	r3, #8
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f003 f90c 	bl	8006d28 <RCCEx_PLL2_Config>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003b16:	e00e      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b1c:	3330      	adds	r3, #48	@ 0x30
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f003 f99a 	bl	8006e58 <RCCEx_PLL3_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003b2a:	e004      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003b32:	e000      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b36:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10c      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003b3e:	4ba9      	ldr	r3, [pc, #676]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003b40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b44:	f023 0107 	bic.w	r1, r3, #7
 8003b48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4e:	4aa5      	ldr	r2, [pc, #660]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003b50:	430b      	orrs	r3, r1
 8003b52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003b56:	e003      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b58:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b5c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b68:	f002 0a02 	and.w	sl, r2, #2
 8003b6c:	f04f 0b00 	mov.w	fp, #0
 8003b70:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b74:	f000 8088 	beq.w	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003b78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7e:	2b28      	cmp	r3, #40	@ 0x28
 8003b80:	d868      	bhi.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003b82:	a201      	add	r2, pc, #4	@ (adr r2, 8003b88 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003c5d 	.word	0x08003c5d
 8003b8c:	08003c55 	.word	0x08003c55
 8003b90:	08003c55 	.word	0x08003c55
 8003b94:	08003c55 	.word	0x08003c55
 8003b98:	08003c55 	.word	0x08003c55
 8003b9c:	08003c55 	.word	0x08003c55
 8003ba0:	08003c55 	.word	0x08003c55
 8003ba4:	08003c55 	.word	0x08003c55
 8003ba8:	08003c2d 	.word	0x08003c2d
 8003bac:	08003c55 	.word	0x08003c55
 8003bb0:	08003c55 	.word	0x08003c55
 8003bb4:	08003c55 	.word	0x08003c55
 8003bb8:	08003c55 	.word	0x08003c55
 8003bbc:	08003c55 	.word	0x08003c55
 8003bc0:	08003c55 	.word	0x08003c55
 8003bc4:	08003c55 	.word	0x08003c55
 8003bc8:	08003c41 	.word	0x08003c41
 8003bcc:	08003c55 	.word	0x08003c55
 8003bd0:	08003c55 	.word	0x08003c55
 8003bd4:	08003c55 	.word	0x08003c55
 8003bd8:	08003c55 	.word	0x08003c55
 8003bdc:	08003c55 	.word	0x08003c55
 8003be0:	08003c55 	.word	0x08003c55
 8003be4:	08003c55 	.word	0x08003c55
 8003be8:	08003c5d 	.word	0x08003c5d
 8003bec:	08003c55 	.word	0x08003c55
 8003bf0:	08003c55 	.word	0x08003c55
 8003bf4:	08003c55 	.word	0x08003c55
 8003bf8:	08003c55 	.word	0x08003c55
 8003bfc:	08003c55 	.word	0x08003c55
 8003c00:	08003c55 	.word	0x08003c55
 8003c04:	08003c55 	.word	0x08003c55
 8003c08:	08003c5d 	.word	0x08003c5d
 8003c0c:	08003c55 	.word	0x08003c55
 8003c10:	08003c55 	.word	0x08003c55
 8003c14:	08003c55 	.word	0x08003c55
 8003c18:	08003c55 	.word	0x08003c55
 8003c1c:	08003c55 	.word	0x08003c55
 8003c20:	08003c55 	.word	0x08003c55
 8003c24:	08003c55 	.word	0x08003c55
 8003c28:	08003c5d 	.word	0x08003c5d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c30:	3308      	adds	r3, #8
 8003c32:	4618      	mov	r0, r3
 8003c34:	f003 f878 	bl	8006d28 <RCCEx_PLL2_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8003c3e:	e00e      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c44:	3330      	adds	r3, #48	@ 0x30
 8003c46:	4618      	mov	r0, r3
 8003c48:	f003 f906 	bl	8006e58 <RCCEx_PLL3_Config>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8003c52:	e004      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003c5a:	e000      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c5e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003c66:	4b5f      	ldr	r3, [pc, #380]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003c68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c6c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c76:	4a5b      	ldr	r2, [pc, #364]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003c7e:	e003      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c80:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003c84:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	f002 0304 	and.w	r3, r2, #4
 8003c94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	d04e      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003ca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cae:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003cb2:	d02c      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8003cb4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003cb8:	d825      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cbe:	d028      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003cc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cc4:	d81f      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003cc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cc8:	d025      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003cca:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ccc:	d81b      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003cce:	2b80      	cmp	r3, #128	@ 0x80
 8003cd0:	d00f      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003cd2:	2b80      	cmp	r3, #128	@ 0x80
 8003cd4:	d817      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d01f      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003cda:	2b40      	cmp	r3, #64	@ 0x40
 8003cdc:	d113      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f003 f81f 	bl	8006d28 <RCCEx_PLL2_Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003cf0:	e014      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cf6:	3330      	adds	r3, #48	@ 0x30
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f003 f8ad 	bl	8006e58 <RCCEx_PLL3_Config>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003d04:	e00a      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003d0c:	e006      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003d0e:	bf00      	nop
 8003d10:	e004      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003d12:	bf00      	nop
 8003d14:	e002      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003d16:	bf00      	nop
 8003d18:	e000      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10c      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003d24:	4b2f      	ldr	r3, [pc, #188]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003d26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003d2a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d34:	4a2b      	ldr	r2, [pc, #172]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003d36:	430b      	orrs	r3, r1
 8003d38:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003d3c:	e003      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003d42:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	f002 0308 	and.w	r3, r2, #8
 8003d52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d56:	2300      	movs	r3, #0
 8003d58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4313      	orrs	r3, r2
 8003d64:	d056      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d6c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003d70:	d031      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003d72:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003d76:	d82a      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003d78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d7c:	d02d      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003d7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d82:	d824      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003d84:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d88:	d029      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003d8a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d8e:	d81e      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003d90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d94:	d011      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9a:	d818      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d023      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003da4:	d113      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003daa:	3308      	adds	r3, #8
 8003dac:	4618      	mov	r0, r3
 8003dae:	f002 ffbb 	bl	8006d28 <RCCEx_PLL2_Config>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8003db8:	e017      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dbe:	3330      	adds	r3, #48	@ 0x30
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f003 f849 	bl	8006e58 <RCCEx_PLL3_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8003dcc:	e00d      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003dd4:	e009      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003dd6:	bf00      	nop
 8003dd8:	e007      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003dda:	bf00      	nop
 8003ddc:	e005      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003dde:	bf00      	nop
 8003de0:	e003      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003de2:	bf00      	nop
 8003de4:	44020c00 	.word	0x44020c00
        break;
 8003de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dea:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10c      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003df2:	4bb9      	ldr	r3, [pc, #740]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003df8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003dfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e02:	4ab5      	ldr	r2, [pc, #724]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e04:	430b      	orrs	r3, r1
 8003e06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003e0a:	e003      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003e10:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f002 0310 	and.w	r3, r2, #16
 8003e20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e24:	2300      	movs	r3, #0
 8003e26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003e2a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4313      	orrs	r3, r2
 8003e32:	d053      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003e34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e3a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003e3e:	d031      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003e40:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003e44:	d82a      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e4a:	d02d      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003e4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e50:	d824      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e56:	d029      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003e58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e5c:	d81e      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e62:	d011      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003e64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e68:	d818      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d020      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e72:	d113      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e78:	3308      	adds	r3, #8
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f002 ff54 	bl	8006d28 <RCCEx_PLL2_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8003e86:	e014      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e8c:	3330      	adds	r3, #48	@ 0x30
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f002 ffe2 	bl	8006e58 <RCCEx_PLL3_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003ea2:	e006      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003ea4:	bf00      	nop
 8003ea6:	e004      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003ea8:	bf00      	nop
 8003eaa:	e002      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003eac:	bf00      	nop
 8003eae:	e000      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003eba:	4b87      	ldr	r3, [pc, #540]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ebc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003ec0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003ec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eca:	4a83      	ldr	r2, [pc, #524]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003ed2:	e003      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003ed8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003edc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee4:	f002 0320 	and.w	r3, r2, #32
 8003ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003eec:	2300      	movs	r3, #0
 8003eee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ef2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	d053      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8003efc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f02:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003f06:	d031      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003f08:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003f0c:	d82a      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f12:	d02d      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003f14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f18:	d824      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003f1a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003f1e:	d029      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003f20:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003f24:	d81e      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f2a:	d011      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f30:	d818      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d020      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003f36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f3a:	d113      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f40:	3308      	adds	r3, #8
 8003f42:	4618      	mov	r0, r3
 8003f44:	f002 fef0 	bl	8006d28 <RCCEx_PLL2_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8003f4e:	e014      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f54:	3330      	adds	r3, #48	@ 0x30
 8003f56:	4618      	mov	r0, r3
 8003f58:	f002 ff7e 	bl	8006e58 <RCCEx_PLL3_Config>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8003f62:	e00a      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003f6a:	e006      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003f6c:	bf00      	nop
 8003f6e:	e004      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003f70:	bf00      	nop
 8003f72:	e002      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003f74:	bf00      	nop
 8003f76:	e000      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003f82:	4b55      	ldr	r3, [pc, #340]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f88:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8003f8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f92:	4a51      	ldr	r2, [pc, #324]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f94:	430b      	orrs	r3, r1
 8003f96:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003f9a:	e003      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003fa0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	d053      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003fc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fca:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003fce:	d031      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8003fd0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003fd4:	d82a      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003fd6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fda:	d02d      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8003fdc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fe0:	d824      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003fe2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fe6:	d029      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003fe8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fec:	d81e      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003fee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ff2:	d011      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003ff4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ff8:	d818      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d020      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003ffe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004002:	d113      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004004:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004008:	3308      	adds	r3, #8
 800400a:	4618      	mov	r0, r3
 800400c:	f002 fe8c 	bl	8006d28 <RCCEx_PLL2_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004016:	e014      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004018:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800401c:	3330      	adds	r3, #48	@ 0x30
 800401e:	4618      	mov	r0, r3
 8004020:	f002 ff1a 	bl	8006e58 <RCCEx_PLL3_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800402a:	e00a      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004032:	e006      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004034:	bf00      	nop
 8004036:	e004      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004038:	bf00      	nop
 800403a:	e002      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800403c:	bf00      	nop
 800403e:	e000      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004042:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10c      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800404a:	4b23      	ldr	r3, [pc, #140]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800404c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004050:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004054:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800405a:	4a1f      	ldr	r2, [pc, #124]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800405c:	430b      	orrs	r3, r1
 800405e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004062:	e003      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004064:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004068:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800406c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004078:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800407c:	2300      	movs	r3, #0
 800407e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004082:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004086:	460b      	mov	r3, r1
 8004088:	4313      	orrs	r3, r2
 800408a:	d03d      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800408c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004090:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004092:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004096:	d01b      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004098:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800409c:	d814      	bhi.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800409e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040a2:	d017      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x654>
 80040a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040a8:	d80e      	bhi.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d016      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80040ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040b2:	d109      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040b8:	3330      	adds	r3, #48	@ 0x30
 80040ba:	4618      	mov	r0, r3
 80040bc:	f002 fecc 	bl	8006e58 <RCCEx_PLL3_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80040c6:	e00a      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80040ce:	e006      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80040d0:	bf00      	nop
 80040d2:	e004      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80040d4:	bf00      	nop
 80040d6:	e002      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x65e>
 80040d8:	44020c00 	.word	0x44020c00
        break;
 80040dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040de:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10c      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80040e6:	4b99      	ldr	r3, [pc, #612]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80040ec:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80040f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040f6:	4a95      	ldr	r2, [pc, #596]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040f8:	430b      	orrs	r3, r1
 80040fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80040fe:	e003      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004104:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004108:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004118:	2300      	movs	r3, #0
 800411a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800411e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004122:	460b      	mov	r3, r1
 8004124:	4313      	orrs	r3, r2
 8004126:	d03b      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004128:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800412c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800412e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004132:	d01b      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004134:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004138:	d814      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800413a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800413e:	d017      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8004140:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004144:	d80e      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d014      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800414a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800414e:	d109      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004154:	3330      	adds	r3, #48	@ 0x30
 8004156:	4618      	mov	r0, r3
 8004158:	f002 fe7e 	bl	8006e58 <RCCEx_PLL3_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004162:	e008      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800416a:	e004      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 800416c:	bf00      	nop
 800416e:	e002      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004170:	bf00      	nop
 8004172:	e000      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004176:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10c      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800417e:	4b73      	ldr	r3, [pc, #460]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004180:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004184:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004188:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800418c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800418e:	4a6f      	ldr	r2, [pc, #444]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004190:	430b      	orrs	r3, r1
 8004192:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004196:	e003      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004198:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800419c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80041ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041b0:	2300      	movs	r3, #0
 80041b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80041ba:	460b      	mov	r3, r1
 80041bc:	4313      	orrs	r3, r2
 80041be:	d03d      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80041c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041cc:	d01b      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x786>
 80041ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041d2:	d814      	bhi.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80041d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041d8:	d017      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80041da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041de:	d80e      	bhi.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d014      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80041e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041e8:	d109      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041ee:	3330      	adds	r3, #48	@ 0x30
 80041f0:	4618      	mov	r0, r3
 80041f2:	f002 fe31 	bl	8006e58 <RCCEx_PLL3_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 80041fc:	e008      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004204:	e004      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004206:	bf00      	nop
 8004208:	e002      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800420e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004210:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10d      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004218:	4b4c      	ldr	r3, [pc, #304]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800421a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800421e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800422a:	4a48      	ldr	r2, [pc, #288]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800422c:	430b      	orrs	r3, r1
 800422e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004232:	e003      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004238:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800423c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004244:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800424c:	2300      	movs	r3, #0
 800424e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004252:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004256:	460b      	mov	r3, r1
 8004258:	4313      	orrs	r3, r2
 800425a:	d035      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800425c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004260:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004264:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004268:	d015      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800426a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800426e:	d80e      	bhi.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d012      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004274:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004278:	d109      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800427a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800427e:	3330      	adds	r3, #48	@ 0x30
 8004280:	4618      	mov	r0, r3
 8004282:	f002 fde9 	bl	8006e58 <RCCEx_PLL3_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800428c:	e006      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004294:	e002      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800429a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800429c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10d      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80042a4:	4b29      	ldr	r3, [pc, #164]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80042aa:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80042ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b6:	4a25      	ldr	r2, [pc, #148]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042b8:	430b      	orrs	r3, r1
 80042ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80042be:	e003      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80042c4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80042c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	2100      	movs	r1, #0
 80042d2:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80042d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80042e2:	460b      	mov	r3, r1
 80042e4:	4313      	orrs	r3, r2
 80042e6:	d037      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80042e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042f4:	d015      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80042f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042fa:	d80e      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d012      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8004300:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004304:	d109      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800430a:	3330      	adds	r3, #48	@ 0x30
 800430c:	4618      	mov	r0, r3
 800430e:	f002 fda3 	bl	8006e58 <RCCEx_PLL3_Config>
 8004312:	4603      	mov	r3, r0
 8004314:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8004318:	e006      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004320:	e002      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004322:	bf00      	nop
 8004324:	e000      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004326:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004328:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10f      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004330:	4b06      	ldr	r3, [pc, #24]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004332:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004336:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800433a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004342:	4a02      	ldr	r2, [pc, #8]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004344:	430b      	orrs	r3, r1
 8004346:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800434a:	e005      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800434c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004354:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004358:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	2100      	movs	r1, #0
 8004362:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004368:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800436a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800436e:	460b      	mov	r3, r1
 8004370:	4313      	orrs	r3, r2
 8004372:	d00e      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004374:	4bb8      	ldr	r3, [pc, #736]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	4ab7      	ldr	r2, [pc, #732]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800437a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800437e:	61d3      	str	r3, [r2, #28]
 8004380:	4bb5      	ldr	r3, [pc, #724]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004382:	69d9      	ldr	r1, [r3, #28]
 8004384:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004388:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800438c:	4ab2      	ldr	r2, [pc, #712]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800438e:	430b      	orrs	r3, r1
 8004390:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800439e:	673b      	str	r3, [r7, #112]	@ 0x70
 80043a0:	2300      	movs	r3, #0
 80043a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80043a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80043a8:	460b      	mov	r3, r1
 80043aa:	4313      	orrs	r3, r2
 80043ac:	d055      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80043ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043b6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80043ba:	d031      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80043bc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80043c0:	d82a      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80043c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c6:	d02d      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 80043c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043cc:	d824      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80043ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043d2:	d029      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80043d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043d8:	d81e      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80043da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043de:	d011      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80043e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043e4:	d818      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d020      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80043ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ee:	d113      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043f4:	3308      	adds	r3, #8
 80043f6:	4618      	mov	r0, r3
 80043f8:	f002 fc96 	bl	8006d28 <RCCEx_PLL2_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004402:	e014      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004404:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004408:	3330      	adds	r3, #48	@ 0x30
 800440a:	4618      	mov	r0, r3
 800440c:	f002 fd24 	bl	8006e58 <RCCEx_PLL3_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004416:	e00a      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800441e:	e006      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004420:	bf00      	nop
 8004422:	e004      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004424:	bf00      	nop
 8004426:	e002      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004428:	bf00      	nop
 800442a:	e000      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800442c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800442e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10d      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004436:	4b88      	ldr	r3, [pc, #544]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004438:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800443c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004440:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004448:	4a83      	ldr	r2, [pc, #524]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800444a:	430b      	orrs	r3, r1
 800444c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004450:	e003      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004452:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004456:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800445a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004466:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004468:	2300      	movs	r3, #0
 800446a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800446c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004470:	460b      	mov	r3, r1
 8004472:	4313      	orrs	r3, r2
 8004474:	d055      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004482:	d031      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8004484:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004488:	d82a      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800448a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800448e:	d02d      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8004490:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004494:	d824      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004496:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800449a:	d029      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800449c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044a0:	d81e      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80044a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044a6:	d011      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80044a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ac:	d818      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d020      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80044b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044b6:	d113      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044bc:	3308      	adds	r3, #8
 80044be:	4618      	mov	r0, r3
 80044c0:	f002 fc32 	bl	8006d28 <RCCEx_PLL2_Config>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80044ca:	e014      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044d0:	3330      	adds	r3, #48	@ 0x30
 80044d2:	4618      	mov	r0, r3
 80044d4:	f002 fcc0 	bl	8006e58 <RCCEx_PLL3_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80044de:	e00a      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80044e6:	e006      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80044e8:	bf00      	nop
 80044ea:	e004      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80044ec:	bf00      	nop
 80044ee:	e002      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80044f0:	bf00      	nop
 80044f2:	e000      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80044f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10d      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80044fe:	4b56      	ldr	r3, [pc, #344]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004500:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004504:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004508:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004510:	4a51      	ldr	r2, [pc, #324]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004512:	430b      	orrs	r3, r1
 8004514:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004518:	e003      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800451e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800452e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004530:	2300      	movs	r3, #0
 8004532:	667b      	str	r3, [r7, #100]	@ 0x64
 8004534:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004538:	460b      	mov	r3, r1
 800453a:	4313      	orrs	r3, r2
 800453c:	d032      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800453e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004542:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004546:	2b05      	cmp	r3, #5
 8004548:	d80f      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800454a:	2b03      	cmp	r3, #3
 800454c:	d211      	bcs.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800454e:	2b01      	cmp	r3, #1
 8004550:	d911      	bls.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8004552:	2b02      	cmp	r3, #2
 8004554:	d109      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800455a:	3308      	adds	r3, #8
 800455c:	4618      	mov	r0, r3
 800455e:	f002 fbe3 	bl	8006d28 <RCCEx_PLL2_Config>
 8004562:	4603      	mov	r3, r0
 8004564:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004568:	e006      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004570:	e002      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004572:	bf00      	nop
 8004574:	e000      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004578:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10d      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004580:	4b35      	ldr	r3, [pc, #212]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004582:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004586:	f023 0107 	bic.w	r1, r3, #7
 800458a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800458e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004592:	4a31      	ldr	r2, [pc, #196]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004594:	430b      	orrs	r3, r1
 8004596:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800459a:	e003      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80045a0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80045a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	2100      	movs	r1, #0
 80045ae:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80045ba:	460b      	mov	r3, r1
 80045bc:	4313      	orrs	r3, r2
 80045be:	d024      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80045c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d005      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80045d6:	e002      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80045d8:	bf00      	nop
 80045da:	e000      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80045dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045de:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10d      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80045e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80045e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80045ec:	f023 0108 	bic.w	r1, r3, #8
 80045f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045f8:	4a17      	ldr	r2, [pc, #92]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80045fa:	430b      	orrs	r3, r1
 80045fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004600:	e003      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004602:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004606:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800460a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004616:	653b      	str	r3, [r7, #80]	@ 0x50
 8004618:	2300      	movs	r3, #0
 800461a:	657b      	str	r3, [r7, #84]	@ 0x54
 800461c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004620:	460b      	mov	r3, r1
 8004622:	4313      	orrs	r3, r2
 8004624:	f000 80b9 	beq.w	800479a <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004628:	4b0c      	ldr	r3, [pc, #48]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800462a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462c:	4a0b      	ldr	r2, [pc, #44]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004634:	f7fc fcdc 	bl	8000ff0 <HAL_GetTick>
 8004638:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800463c:	e010      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463e:	f7fc fcd7 	bl	8000ff0 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d908      	bls.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004654:	e00a      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8004656:	bf00      	nop
 8004658:	44020c00 	.word	0x44020c00
 800465c:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004660:	4bba      	ldr	r3, [pc, #744]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8004662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0e8      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 800466c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004670:	2b00      	cmp	r3, #0
 8004672:	f040 808e 	bne.w	8004792 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004676:	4bb6      	ldr	r3, [pc, #728]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800467c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004680:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d023      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800468c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004690:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004698:	4293      	cmp	r3, r2
 800469a:	d01b      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800469c:	4bac      	ldr	r3, [pc, #688]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800469e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046aa:	4ba9      	ldr	r3, [pc, #676]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80046ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046b0:	4aa7      	ldr	r2, [pc, #668]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80046b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046ba:	4ba5      	ldr	r3, [pc, #660]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80046bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046c0:	4aa3      	ldr	r2, [pc, #652]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80046c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046ca:	4aa1      	ldr	r2, [pc, #644]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80046cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d019      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7fc fc86 	bl	8000ff0 <HAL_GetTick>
 80046e4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e8:	e00d      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fc fc81 	bl	8000ff0 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046f4:	1ad2      	subs	r2, r2, r3
 80046f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d903      	bls.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8004704:	e006      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004706:	4b92      	ldr	r3, [pc, #584]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0ea      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8004714:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d135      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800471c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004720:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004724:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004728:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800472c:	d110      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 800472e:	4b88      	ldr	r3, [pc, #544]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800473a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800473e:	091b      	lsrs	r3, r3, #4
 8004740:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004744:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004748:	4a81      	ldr	r2, [pc, #516]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800474a:	430b      	orrs	r3, r1
 800474c:	61d3      	str	r3, [r2, #28]
 800474e:	e005      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004750:	4b7f      	ldr	r3, [pc, #508]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	4a7e      	ldr	r2, [pc, #504]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004756:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800475a:	61d3      	str	r3, [r2, #28]
 800475c:	4b7c      	ldr	r3, [pc, #496]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800475e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004762:	4a7b      	ldr	r2, [pc, #492]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004768:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800476c:	4b78      	ldr	r3, [pc, #480]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800476e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004776:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800477a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800477e:	4a74      	ldr	r2, [pc, #464]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004780:	430b      	orrs	r3, r1
 8004782:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004786:	e008      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004788:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800478c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8004790:	e003      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004792:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004796:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800479a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80047a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047a8:	2300      	movs	r3, #0
 80047aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80047b0:	460b      	mov	r3, r1
 80047b2:	4313      	orrs	r3, r2
 80047b4:	d035      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80047b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047be:	2b30      	cmp	r3, #48	@ 0x30
 80047c0:	d014      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 80047c2:	2b30      	cmp	r3, #48	@ 0x30
 80047c4:	d80e      	bhi.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d012      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d80a      	bhi.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d010      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 80047d2:	2b10      	cmp	r3, #16
 80047d4:	d106      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047d6:	4b5e      	ldr	r3, [pc, #376]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80047d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047da:	4a5d      	ldr	r2, [pc, #372]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80047dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047e0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80047e2:	e008      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80047ea:	e004      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80047ec:	bf00      	nop
 80047ee:	e002      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80047f0:	bf00      	nop
 80047f2:	e000      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80047f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10d      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80047fe:	4b54      	ldr	r3, [pc, #336]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004800:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004804:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004808:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800480c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004810:	4a4f      	ldr	r2, [pc, #316]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004812:	430b      	orrs	r3, r1
 8004814:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004818:	e003      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800481e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800482e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004830:	2300      	movs	r3, #0
 8004832:	647b      	str	r3, [r7, #68]	@ 0x44
 8004834:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004838:	460b      	mov	r3, r1
 800483a:	4313      	orrs	r3, r2
 800483c:	d033      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800483e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004842:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 800484a:	2b40      	cmp	r3, #64	@ 0x40
 800484c:	d007      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800484e:	e010      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004850:	4b3f      	ldr	r3, [pc, #252]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004854:	4a3e      	ldr	r2, [pc, #248]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800485a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800485c:	e00d      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800485e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004862:	3308      	adds	r3, #8
 8004864:	4618      	mov	r0, r3
 8004866:	f002 fa5f 	bl	8006d28 <RCCEx_PLL2_Config>
 800486a:	4603      	mov	r3, r0
 800486c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004870:	e003      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800487a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10d      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004882:	4b33      	ldr	r3, [pc, #204]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004884:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004888:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800488c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004890:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004894:	4a2e      	ldr	r2, [pc, #184]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004896:	430b      	orrs	r3, r1
 8004898:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800489c:	e003      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80048a2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80048a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ae:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80048b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048b4:	2300      	movs	r3, #0
 80048b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048b8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80048bc:	460b      	mov	r3, r1
 80048be:	4313      	orrs	r3, r2
 80048c0:	d04c      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80048c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d827      	bhi.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80048ce:	a201      	add	r2, pc, #4	@ (adr r2, 80048d4 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 80048d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d4:	080048e9 	.word	0x080048e9
 80048d8:	080048f7 	.word	0x080048f7
 80048dc:	0800490b 	.word	0x0800490b
 80048e0:	08004927 	.word	0x08004927
 80048e4:	08004927 	.word	0x08004927
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e8:	4b19      	ldr	r3, [pc, #100]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80048ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ec:	4a18      	ldr	r2, [pc, #96]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80048ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048f2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80048f4:	e018      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048fa:	3308      	adds	r3, #8
 80048fc:	4618      	mov	r0, r3
 80048fe:	f002 fa13 	bl	8006d28 <RCCEx_PLL2_Config>
 8004902:	4603      	mov	r3, r0
 8004904:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004908:	e00e      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800490a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800490e:	3330      	adds	r3, #48	@ 0x30
 8004910:	4618      	mov	r0, r3
 8004912:	f002 faa1 	bl	8006e58 <RCCEx_PLL3_Config>
 8004916:	4603      	mov	r3, r0
 8004918:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800491c:	e004      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004924:	e000      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8004926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004928:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d111      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004930:	4b07      	ldr	r3, [pc, #28]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004936:	f023 0107 	bic.w	r1, r3, #7
 800493a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800493e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004942:	4a03      	ldr	r2, [pc, #12]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004944:	430b      	orrs	r3, r1
 8004946:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800494a:	e007      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xedc>
 800494c:	44020800 	.word	0x44020800
 8004950:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004954:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004958:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800495c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004968:	633b      	str	r3, [r7, #48]	@ 0x30
 800496a:	2300      	movs	r3, #0
 800496c:	637b      	str	r3, [r7, #52]	@ 0x34
 800496e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004972:	460b      	mov	r3, r1
 8004974:	4313      	orrs	r3, r2
 8004976:	f000 8081 	beq.w	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800497a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800497e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004982:	2b20      	cmp	r3, #32
 8004984:	d85f      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8004986:	a201      	add	r2, pc, #4	@ (adr r2, 800498c <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8004988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498c:	08004a11 	.word	0x08004a11
 8004990:	08004a47 	.word	0x08004a47
 8004994:	08004a47 	.word	0x08004a47
 8004998:	08004a47 	.word	0x08004a47
 800499c:	08004a47 	.word	0x08004a47
 80049a0:	08004a47 	.word	0x08004a47
 80049a4:	08004a47 	.word	0x08004a47
 80049a8:	08004a47 	.word	0x08004a47
 80049ac:	08004a1f 	.word	0x08004a1f
 80049b0:	08004a47 	.word	0x08004a47
 80049b4:	08004a47 	.word	0x08004a47
 80049b8:	08004a47 	.word	0x08004a47
 80049bc:	08004a47 	.word	0x08004a47
 80049c0:	08004a47 	.word	0x08004a47
 80049c4:	08004a47 	.word	0x08004a47
 80049c8:	08004a47 	.word	0x08004a47
 80049cc:	08004a33 	.word	0x08004a33
 80049d0:	08004a47 	.word	0x08004a47
 80049d4:	08004a47 	.word	0x08004a47
 80049d8:	08004a47 	.word	0x08004a47
 80049dc:	08004a47 	.word	0x08004a47
 80049e0:	08004a47 	.word	0x08004a47
 80049e4:	08004a47 	.word	0x08004a47
 80049e8:	08004a47 	.word	0x08004a47
 80049ec:	08004a4f 	.word	0x08004a4f
 80049f0:	08004a47 	.word	0x08004a47
 80049f4:	08004a47 	.word	0x08004a47
 80049f8:	08004a47 	.word	0x08004a47
 80049fc:	08004a47 	.word	0x08004a47
 8004a00:	08004a47 	.word	0x08004a47
 8004a04:	08004a47 	.word	0x08004a47
 8004a08:	08004a47 	.word	0x08004a47
 8004a0c:	08004a4f 	.word	0x08004a4f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a10:	4bb9      	ldr	r3, [pc, #740]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a14:	4ab8      	ldr	r2, [pc, #736]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a1a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004a1c:	e018      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a22:	3308      	adds	r3, #8
 8004a24:	4618      	mov	r0, r3
 8004a26:	f002 f97f 	bl	8006d28 <RCCEx_PLL2_Config>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004a30:	e00e      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a36:	3330      	adds	r3, #48	@ 0x30
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f002 fa0d 	bl	8006e58 <RCCEx_PLL3_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004a44:	e004      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a4c:	e000      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8004a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a50:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10d      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004a58:	4ba7      	ldr	r3, [pc, #668]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a5e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004a6a:	4aa3      	ldr	r2, [pc, #652]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a72:	e003      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a74:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a78:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004a7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a84:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004a88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a8e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004a92:	460b      	mov	r3, r1
 8004a94:	4313      	orrs	r3, r2
 8004a96:	d04e      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004a98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aa4:	d02e      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aaa:	d827      	bhi.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004aac:	2bc0      	cmp	r3, #192	@ 0xc0
 8004aae:	d02b      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8004ab0:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ab2:	d823      	bhi.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004ab4:	2b80      	cmp	r3, #128	@ 0x80
 8004ab6:	d017      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8004ab8:	2b80      	cmp	r3, #128	@ 0x80
 8004aba:	d81f      	bhi.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8004ac0:	2b40      	cmp	r3, #64	@ 0x40
 8004ac2:	d007      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8004ac4:	e01a      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac6:	4b8c      	ldr	r3, [pc, #560]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aca:	4a8b      	ldr	r2, [pc, #556]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ad0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004ad2:	e01a      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ad4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ad8:	3308      	adds	r3, #8
 8004ada:	4618      	mov	r0, r3
 8004adc:	f002 f924 	bl	8006d28 <RCCEx_PLL2_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004ae6:	e010      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ae8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aec:	3330      	adds	r3, #48	@ 0x30
 8004aee:	4618      	mov	r0, r3
 8004af0:	f002 f9b2 	bl	8006e58 <RCCEx_PLL3_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004afa:	e006      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004b02:	e002      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8004b04:	bf00      	nop
 8004b06:	e000      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8004b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10d      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004b12:	4b79      	ldr	r3, [pc, #484]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b18:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8004b1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b24:	4974      	ldr	r1, [pc, #464]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004b2c:	e003      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b32:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004b36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004b42:	623b      	str	r3, [r7, #32]
 8004b44:	2300      	movs	r3, #0
 8004b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b48:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	d055      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004b52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b56:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004b5a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004b5e:	d031      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8004b60:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004b64:	d82a      	bhi.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004b66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b6a:	d02d      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8004b6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b70:	d824      	bhi.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004b72:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b76:	d029      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8004b78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b7c:	d81e      	bhi.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b82:	d011      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b88:	d818      	bhi.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d020      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8004b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b92:	d113      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b98:	3308      	adds	r3, #8
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f002 f8c4 	bl	8006d28 <RCCEx_PLL2_Config>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004ba6:	e014      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ba8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bac:	3330      	adds	r3, #48	@ 0x30
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f002 f952 	bl	8006e58 <RCCEx_PLL3_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004bba:	e00a      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004bc2:	e006      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8004bc4:	bf00      	nop
 8004bc6:	e004      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8004bc8:	bf00      	nop
 8004bca:	e002      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8004bcc:	bf00      	nop
 8004bce:	e000      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8004bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bd2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10d      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004bda:	4b47      	ldr	r3, [pc, #284]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004be0:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8004be4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004be8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004bec:	4942      	ldr	r1, [pc, #264]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004bf4:	e003      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bfa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	2100      	movs	r1, #0
 8004c08:	61b9      	str	r1, [r7, #24]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	61fb      	str	r3, [r7, #28]
 8004c10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c14:	460b      	mov	r3, r1
 8004c16:	4313      	orrs	r3, r2
 8004c18:	d03c      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004c1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d81b      	bhi.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8004c26:	a201      	add	r2, pc, #4	@ (adr r2, 8004c2c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8004c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2c:	08004c67 	.word	0x08004c67
 8004c30:	08004c3d 	.word	0x08004c3d
 8004c34:	08004c4b 	.word	0x08004c4b
 8004c38:	08004c67 	.word	0x08004c67
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c40:	4a2d      	ldr	r2, [pc, #180]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c46:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004c48:	e00e      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c4e:	3308      	adds	r3, #8
 8004c50:	4618      	mov	r0, r3
 8004c52:	f002 f869 	bl	8006d28 <RCCEx_PLL2_Config>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004c5c:	e004      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c64:	e000      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8004c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c68:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10d      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004c70:	4b21      	ldr	r3, [pc, #132]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004c72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c76:	f023 0203 	bic.w	r2, r3, #3
 8004c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c82:	491d      	ldr	r1, [pc, #116]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004c8a:	e003      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c90:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	6139      	str	r1, [r7, #16]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004caa:	460b      	mov	r3, r1
 8004cac:	4313      	orrs	r3, r2
 8004cae:	d03c      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004cb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cbc:	d00e      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004cbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cc2:	d815      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d019      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8004cc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ccc:	d110      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cce:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd2:	4a09      	ldr	r2, [pc, #36]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004cd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cd8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004cda:	e010      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f002 f820 	bl	8006d28 <RCCEx_PLL2_Config>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004cee:	e006      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004cf6:	e002      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8004cf8:	44020c00 	.word	0x44020c00
        break;
 8004cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cfe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10d      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004d06:	4b3d      	ldr	r3, [pc, #244]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004d08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d18:	4938      	ldr	r1, [pc, #224]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004d20:	e003      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d22:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d26:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d32:	2100      	movs	r1, #0
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d40:	460b      	mov	r3, r1
 8004d42:	4313      	orrs	r3, r2
 8004d44:	d038      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d4a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004d4e:	2b30      	cmp	r3, #48	@ 0x30
 8004d50:	d01b      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8004d52:	2b30      	cmp	r3, #48	@ 0x30
 8004d54:	d815      	bhi.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8004d56:	2b10      	cmp	r3, #16
 8004d58:	d002      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d007      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8004d5e:	e010      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d60:	4b26      	ldr	r3, [pc, #152]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d64:	4a25      	ldr	r2, [pc, #148]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d6a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d6c:	e00e      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d72:	3330      	adds	r3, #48	@ 0x30
 8004d74:	4618      	mov	r0, r3
 8004d76:	f002 f86f 	bl	8006e58 <RCCEx_PLL3_Config>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004d80:	e004      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d88:	e000      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8004d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10d      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004d94:	4b19      	ldr	r3, [pc, #100]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004d96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d9a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004da2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004da6:	4915      	ldr	r1, [pc, #84]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004dae:	e003      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004db4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004db8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	6039      	str	r1, [r7, #0]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	607b      	str	r3, [r7, #4]
 8004dca:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	d00c      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004dd4:	4b09      	ldr	r3, [pc, #36]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004dd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004de2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004de6:	4905      	ldr	r1, [pc, #20]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8004dee:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	37e8      	adds	r7, #232	@ 0xe8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dfc:	44020c00 	.word	0x44020c00

08004e00 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b08b      	sub	sp, #44	@ 0x2c
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004e08:	4bae      	ldr	r3, [pc, #696]	@ (80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e10:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004e12:	4bac      	ldr	r3, [pc, #688]	@ (80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004e1c:	4ba9      	ldr	r3, [pc, #676]	@ (80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e20:	0a1b      	lsrs	r3, r3, #8
 8004e22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e26:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004e28:	4ba6      	ldr	r3, [pc, #664]	@ (80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2c:	091b      	lsrs	r3, r3, #4
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e34:	4ba3      	ldr	r3, [pc, #652]	@ (80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e38:	08db      	lsrs	r3, r3, #3
 8004e3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	fb02 f303 	mul.w	r3, r2, r3
 8004e44:	ee07 3a90 	vmov	s15, r3
 8004e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 8126 	beq.w	80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d053      	beq.n	8004f06 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d86f      	bhi.n	8004f44 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d003      	beq.n	8004e72 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d02b      	beq.n	8004ec8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8004e70:	e068      	b.n	8004f44 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e72:	4b94      	ldr	r3, [pc, #592]	@ (80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	08db      	lsrs	r3, r3, #3
 8004e78:	f003 0303 	and.w	r3, r3, #3
 8004e7c:	4a92      	ldr	r2, [pc, #584]	@ (80050c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e82:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	ee07 3a90 	vmov	s15, r3
 8004e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea6:	ed97 6a04 	vldr	s12, [r7, #16]
 8004eaa:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80050cc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004ec6:	e068      	b.n	8004f9a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80050d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	ee07 3a90 	vmov	s15, r3
 8004ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee4:	ed97 6a04 	vldr	s12, [r7, #16]
 8004ee8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80050cc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004eec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ef4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f00:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004f04:	e049      	b.n	8004f9a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	ee07 3a90 	vmov	s15, r3
 8004f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f10:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80050d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8004f14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f22:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f26:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80050cc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004f42:	e02a      	b.n	8004f9a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f44:	4b5f      	ldr	r3, [pc, #380]	@ (80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	08db      	lsrs	r3, r3, #3
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	4a5e      	ldr	r2, [pc, #376]	@ (80050c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004f50:	fa22 f303 	lsr.w	r3, r2, r3
 8004f54:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	ee07 3a90 	vmov	s15, r3
 8004f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	ee07 3a90 	vmov	s15, r3
 8004f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	ee07 3a90 	vmov	s15, r3
 8004f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f78:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f7c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80050cc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f94:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004f98:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fa6:	d121      	bne.n	8004fec <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004fa8:	4b46      	ldr	r3, [pc, #280]	@ (80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d017      	beq.n	8004fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004fb4:	4b43      	ldr	r3, [pc, #268]	@ (80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb8:	0a5b      	lsrs	r3, r3, #9
 8004fba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8004fc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fca:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004fce:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fda:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	e006      	b.n	8004ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	e002      	b.n	8004ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ff2:	4b34      	ldr	r3, [pc, #208]	@ (80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ffe:	d121      	bne.n	8005044 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005000:	4b30      	ldr	r3, [pc, #192]	@ (80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d017      	beq.n	800503c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800500c:	4b2d      	ldr	r3, [pc, #180]	@ (80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800500e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005010:	0c1b      	lsrs	r3, r3, #16
 8005012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800501e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005022:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005026:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800502a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800502e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005032:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	605a      	str	r2, [r3, #4]
 800503a:	e006      	b.n	800504a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	e002      	b.n	800504a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800504a:	4b1e      	ldr	r3, [pc, #120]	@ (80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005052:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005056:	d121      	bne.n	800509c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005058:	4b1a      	ldr	r3, [pc, #104]	@ (80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800505a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d017      	beq.n	8005094 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005064:	4b17      	ldr	r3, [pc, #92]	@ (80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005068:	0e1b      	lsrs	r3, r3, #24
 800506a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005076:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800507a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800507e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800508a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005092:	e010      	b.n	80050b6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	609a      	str	r2, [r3, #8]
}
 800509a:	e00c      	b.n	80050b6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	609a      	str	r2, [r3, #8]
}
 80050a2:	e008      	b.n	80050b6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	609a      	str	r2, [r3, #8]
}
 80050b6:	bf00      	nop
 80050b8:	372c      	adds	r7, #44	@ 0x2c
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	44020c00 	.word	0x44020c00
 80050c8:	03d09000 	.word	0x03d09000
 80050cc:	46000000 	.word	0x46000000
 80050d0:	4a742400 	.word	0x4a742400
 80050d4:	4bbebc20 	.word	0x4bbebc20

080050d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80050d8:	b480      	push	{r7}
 80050da:	b08b      	sub	sp, #44	@ 0x2c
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80050e0:	4bae      	ldr	r3, [pc, #696]	@ (800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80050e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80050ea:	4bac      	ldr	r3, [pc, #688]	@ (800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80050ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80050f4:	4ba9      	ldr	r3, [pc, #676]	@ (800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80050f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f8:	0a1b      	lsrs	r3, r3, #8
 80050fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050fe:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005100:	4ba6      	ldr	r3, [pc, #664]	@ (800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800510c:	4ba3      	ldr	r3, [pc, #652]	@ (800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800510e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005110:	08db      	lsrs	r3, r3, #3
 8005112:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	fb02 f303 	mul.w	r3, r2, r3
 800511c:	ee07 3a90 	vmov	s15, r3
 8005120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005124:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 8126 	beq.w	800537c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	2b03      	cmp	r3, #3
 8005134:	d053      	beq.n	80051de <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	2b03      	cmp	r3, #3
 800513a:	d86f      	bhi.n	800521c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d003      	beq.n	800514a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	2b02      	cmp	r3, #2
 8005146:	d02b      	beq.n	80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005148:	e068      	b.n	800521c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800514a:	4b94      	ldr	r3, [pc, #592]	@ (800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	08db      	lsrs	r3, r3, #3
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	4a92      	ldr	r2, [pc, #584]	@ (80053a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005156:	fa22 f303 	lsr.w	r3, r2, r3
 800515a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	ee07 3a90 	vmov	s15, r3
 800516c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005170:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800517e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005182:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800518a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800518e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800519e:	e068      	b.n	8005272 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051aa:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80053a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80051ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	ee07 3a90 	vmov	s15, r3
 80051b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051bc:	ed97 6a04 	vldr	s12, [r7, #16]
 80051c0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80051c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80051dc:	e049      	b.n	8005272 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	ee07 3a90 	vmov	s15, r3
 80051e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80053ac <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80051ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fa:	ed97 6a04 	vldr	s12, [r7, #16]
 80051fe:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800520e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005216:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800521a:	e02a      	b.n	8005272 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800521c:	4b5f      	ldr	r3, [pc, #380]	@ (800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	08db      	lsrs	r3, r3, #3
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	4a5e      	ldr	r2, [pc, #376]	@ (80053a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005228:	fa22 f303 	lsr.w	r3, r2, r3
 800522c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	ee07 3a90 	vmov	s15, r3
 8005234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	ee07 3a90 	vmov	s15, r3
 800524c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005250:	ed97 6a04 	vldr	s12, [r7, #16]
 8005254:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800525c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005260:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005264:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005270:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005272:	4b4a      	ldr	r3, [pc, #296]	@ (800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800527a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800527e:	d121      	bne.n	80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005280:	4b46      	ldr	r3, [pc, #280]	@ (800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d017      	beq.n	80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800528c:	4b43      	ldr	r3, [pc, #268]	@ (800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800528e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005290:	0a5b      	lsrs	r3, r3, #9
 8005292:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800529e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052a2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80052a6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80052aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052b2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	e006      	b.n	80052ca <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e002      	b.n	80052ca <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052ca:	4b34      	ldr	r3, [pc, #208]	@ (800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052d6:	d121      	bne.n	800531c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80052d8:	4b30      	ldr	r3, [pc, #192]	@ (800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80052da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d017      	beq.n	8005314 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80052e4:	4b2d      	ldr	r3, [pc, #180]	@ (800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80052e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e8:	0c1b      	lsrs	r3, r3, #16
 80052ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80052f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052fa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80052fe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800530a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	605a      	str	r2, [r3, #4]
 8005312:	e006      	b.n	8005322 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	605a      	str	r2, [r3, #4]
 800531a:	e002      	b.n	8005322 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005322:	4b1e      	ldr	r3, [pc, #120]	@ (800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800532a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800532e:	d121      	bne.n	8005374 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005330:	4b1a      	ldr	r3, [pc, #104]	@ (800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005334:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d017      	beq.n	800536c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800533c:	4b17      	ldr	r3, [pc, #92]	@ (800539c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800533e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005340:	0e1b      	lsrs	r3, r3, #24
 8005342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800534e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005352:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005356:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800535a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800535e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005362:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800536a:	e010      	b.n	800538e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	609a      	str	r2, [r3, #8]
}
 8005372:	e00c      	b.n	800538e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	609a      	str	r2, [r3, #8]
}
 800537a:	e008      	b.n	800538e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	609a      	str	r2, [r3, #8]
}
 800538e:	bf00      	nop
 8005390:	372c      	adds	r7, #44	@ 0x2c
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	44020c00 	.word	0x44020c00
 80053a0:	03d09000 	.word	0x03d09000
 80053a4:	46000000 	.word	0x46000000
 80053a8:	4a742400 	.word	0x4a742400
 80053ac:	4bbebc20 	.word	0x4bbebc20

080053b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b08b      	sub	sp, #44	@ 0x2c
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80053b8:	4bae      	ldr	r3, [pc, #696]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80053ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c0:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80053c2:	4bac      	ldr	r3, [pc, #688]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80053cc:	4ba9      	ldr	r3, [pc, #676]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80053ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d0:	0a1b      	lsrs	r3, r3, #8
 80053d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053d6:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80053d8:	4ba6      	ldr	r3, [pc, #664]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80053da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80053e4:	4ba3      	ldr	r3, [pc, #652]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80053e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e8:	08db      	lsrs	r3, r3, #3
 80053ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	fb02 f303 	mul.w	r3, r2, r3
 80053f4:	ee07 3a90 	vmov	s15, r3
 80053f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fc:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 8126 	beq.w	8005654 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	2b03      	cmp	r3, #3
 800540c:	d053      	beq.n	80054b6 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	2b03      	cmp	r3, #3
 8005412:	d86f      	bhi.n	80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d003      	beq.n	8005422 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	2b02      	cmp	r3, #2
 800541e:	d02b      	beq.n	8005478 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005420:	e068      	b.n	80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005422:	4b94      	ldr	r3, [pc, #592]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	08db      	lsrs	r3, r3, #3
 8005428:	f003 0303 	and.w	r3, r3, #3
 800542c:	4a92      	ldr	r2, [pc, #584]	@ (8005678 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800542e:	fa22 f303 	lsr.w	r3, r2, r3
 8005432:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	ee07 3a90 	vmov	s15, r3
 8005444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005448:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005456:	ed97 6a04 	vldr	s12, [r7, #16]
 800545a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800567c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800545e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800546a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005472:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005476:	e068      	b.n	800554a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005482:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	ee07 3a90 	vmov	s15, r3
 8005490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005494:	ed97 6a04 	vldr	s12, [r7, #16]
 8005498:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800567c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800549c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80054b4:	e049      	b.n	800554a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	ee07 3a90 	vmov	s15, r3
 80054bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005684 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80054c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	ee07 3a90 	vmov	s15, r3
 80054ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d2:	ed97 6a04 	vldr	s12, [r7, #16]
 80054d6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800567c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80054da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80054f2:	e02a      	b.n	800554a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054f4:	4b5f      	ldr	r3, [pc, #380]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	08db      	lsrs	r3, r3, #3
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	4a5e      	ldr	r2, [pc, #376]	@ (8005678 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005500:	fa22 f303 	lsr.w	r3, r2, r3
 8005504:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	ee07 3a90 	vmov	s15, r3
 800550c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	ee07 3a90 	vmov	s15, r3
 8005524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005528:	ed97 6a04 	vldr	s12, [r7, #16]
 800552c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800567c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005538:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800553c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005544:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005548:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800554a:	4b4a      	ldr	r3, [pc, #296]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005556:	d121      	bne.n	800559c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005558:	4b46      	ldr	r3, [pc, #280]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800555a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800555c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d017      	beq.n	8005594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005564:	4b43      	ldr	r3, [pc, #268]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005568:	0a5b      	lsrs	r3, r3, #9
 800556a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005576:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800557a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800557e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800558a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	e006      	b.n	80055a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	e002      	b.n	80055a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055a2:	4b34      	ldr	r3, [pc, #208]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055ae:	d121      	bne.n	80055f4 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80055b0:	4b30      	ldr	r3, [pc, #192]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80055b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d017      	beq.n	80055ec <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80055bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80055be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c0:	0c1b      	lsrs	r3, r3, #16
 80055c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055c6:	ee07 3a90 	vmov	s15, r3
 80055ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80055ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055d2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80055d6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80055da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055e2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	e006      	b.n	80055fa <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	605a      	str	r2, [r3, #4]
 80055f2:	e002      	b.n	80055fa <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005606:	d121      	bne.n	800564c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005608:	4b1a      	ldr	r3, [pc, #104]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800560a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d017      	beq.n	8005644 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005614:	4b17      	ldr	r3, [pc, #92]	@ (8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005618:	0e1b      	lsrs	r3, r3, #24
 800561a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800561e:	ee07 3a90 	vmov	s15, r3
 8005622:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005626:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800562a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800562e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800563a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005642:	e010      	b.n	8005666 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	609a      	str	r2, [r3, #8]
}
 800564a:	e00c      	b.n	8005666 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	609a      	str	r2, [r3, #8]
}
 8005652:	e008      	b.n	8005666 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	609a      	str	r2, [r3, #8]
}
 8005666:	bf00      	nop
 8005668:	372c      	adds	r7, #44	@ 0x2c
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	44020c00 	.word	0x44020c00
 8005678:	03d09000 	.word	0x03d09000
 800567c:	46000000 	.word	0x46000000
 8005680:	4a742400 	.word	0x4a742400
 8005684:	4bbebc20 	.word	0x4bbebc20

08005688 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005688:	b590      	push	{r4, r7, lr}
 800568a:	b08f      	sub	sp, #60	@ 0x3c
 800568c:	af00      	add	r7, sp, #0
 800568e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005692:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005696:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800569a:	4321      	orrs	r1, r4
 800569c:	d150      	bne.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800569e:	4b26      	ldr	r3, [pc, #152]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056a8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80056aa:	4b23      	ldr	r3, [pc, #140]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d108      	bne.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80056b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056be:	d104      	bne.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80056c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80056c6:	f001 bb20 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80056ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056d8:	d108      	bne.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80056da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056e0:	d104      	bne.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80056e2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80056e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80056e8:	f001 bb0f 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80056ec:	4b12      	ldr	r3, [pc, #72]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056f8:	d119      	bne.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80056fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005700:	d115      	bne.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005702:	4b0d      	ldr	r3, [pc, #52]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800570a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800570e:	d30a      	bcc.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005710:	4b09      	ldr	r3, [pc, #36]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	0a1b      	lsrs	r3, r3, #8
 8005716:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800571a:	4a08      	ldr	r2, [pc, #32]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005722:	f001 baf2 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800572a:	f001 baee 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	637b      	str	r3, [r7, #52]	@ 0x34
 8005732:	f001 baea 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005736:	bf00      	nop
 8005738:	44020c00 	.word	0x44020c00
 800573c:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005740:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005744:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8005748:	ea50 0104 	orrs.w	r1, r0, r4
 800574c:	f000 8615 	beq.w	800637a <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8005750:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005754:	2801      	cmp	r0, #1
 8005756:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 800575a:	f081 82d3 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800575e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005762:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8005766:	ea50 0104 	orrs.w	r1, r0, r4
 800576a:	f000 84d8 	beq.w	800611e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800576e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005772:	2801      	cmp	r0, #1
 8005774:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8005778:	f081 82c4 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800577c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005780:	f1a1 0410 	sub.w	r4, r1, #16
 8005784:	ea50 0104 	orrs.w	r1, r0, r4
 8005788:	f001 8288 	beq.w	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 800578c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005790:	2801      	cmp	r0, #1
 8005792:	f171 0110 	sbcs.w	r1, r1, #16
 8005796:	f081 82b5 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800579a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800579e:	f1a1 0408 	sub.w	r4, r1, #8
 80057a2:	ea50 0104 	orrs.w	r1, r0, r4
 80057a6:	f001 81fe 	beq.w	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80057aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057ae:	2801      	cmp	r0, #1
 80057b0:	f171 0108 	sbcs.w	r1, r1, #8
 80057b4:	f081 82a6 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80057b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057bc:	1f0c      	subs	r4, r1, #4
 80057be:	ea50 0104 	orrs.w	r1, r0, r4
 80057c2:	f000 8753 	beq.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 80057c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057ca:	2801      	cmp	r0, #1
 80057cc:	f171 0104 	sbcs.w	r1, r1, #4
 80057d0:	f081 8298 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80057d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057d8:	1e8c      	subs	r4, r1, #2
 80057da:	ea50 0104 	orrs.w	r1, r0, r4
 80057de:	f001 8173 	beq.w	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 80057e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057e6:	2801      	cmp	r0, #1
 80057e8:	f171 0102 	sbcs.w	r1, r1, #2
 80057ec:	f081 828a 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80057f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057f4:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80057f8:	4321      	orrs	r1, r4
 80057fa:	f001 80fe 	beq.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80057fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005802:	4ccb      	ldr	r4, [pc, #812]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8005804:	42a0      	cmp	r0, r4
 8005806:	f171 0100 	sbcs.w	r1, r1, #0
 800580a:	f081 827b 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800580e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005812:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8005816:	4321      	orrs	r1, r4
 8005818:	f001 8076 	beq.w	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 800581c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005820:	4cc4      	ldr	r4, [pc, #784]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8005822:	42a0      	cmp	r0, r4
 8005824:	f171 0100 	sbcs.w	r1, r1, #0
 8005828:	f081 826c 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800582c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005830:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8005834:	4321      	orrs	r1, r4
 8005836:	f000 87b5 	beq.w	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 800583a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800583e:	4cbe      	ldr	r4, [pc, #760]	@ (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8005840:	42a0      	cmp	r0, r4
 8005842:	f171 0100 	sbcs.w	r1, r1, #0
 8005846:	f081 825d 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800584a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800584e:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8005852:	4321      	orrs	r1, r4
 8005854:	f000 8738 	beq.w	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8005858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800585c:	4cb7      	ldr	r4, [pc, #732]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 800585e:	42a0      	cmp	r0, r4
 8005860:	f171 0100 	sbcs.w	r1, r1, #0
 8005864:	f081 824e 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005868:	e9d7 0100 	ldrd	r0, r1, [r7]
 800586c:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8005870:	4321      	orrs	r1, r4
 8005872:	f001 81cd 	beq.w	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8005876:	e9d7 0100 	ldrd	r0, r1, [r7]
 800587a:	4cb1      	ldr	r4, [pc, #708]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 800587c:	42a0      	cmp	r0, r4
 800587e:	f171 0100 	sbcs.w	r1, r1, #0
 8005882:	f081 823f 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005886:	e9d7 0100 	ldrd	r0, r1, [r7]
 800588a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800588e:	4321      	orrs	r1, r4
 8005890:	f000 80d9 	beq.w	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005894:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005898:	4caa      	ldr	r4, [pc, #680]	@ (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 800589a:	42a0      	cmp	r0, r4
 800589c:	f171 0100 	sbcs.w	r1, r1, #0
 80058a0:	f081 8230 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80058a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058a8:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80058ac:	4321      	orrs	r1, r4
 80058ae:	f000 83da 	beq.w	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80058b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058b6:	4ca4      	ldr	r4, [pc, #656]	@ (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 80058b8:	42a0      	cmp	r0, r4
 80058ba:	f171 0100 	sbcs.w	r1, r1, #0
 80058be:	f081 8221 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80058c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058c6:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80058ca:	4321      	orrs	r1, r4
 80058cc:	f000 8627 	beq.w	800651e <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 80058d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058d4:	4c9d      	ldr	r4, [pc, #628]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 80058d6:	42a0      	cmp	r0, r4
 80058d8:	f171 0100 	sbcs.w	r1, r1, #0
 80058dc:	f081 8212 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80058e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058e4:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80058e8:	4321      	orrs	r1, r4
 80058ea:	f000 857a 	beq.w	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80058ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058f2:	4c97      	ldr	r4, [pc, #604]	@ (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 80058f4:	42a0      	cmp	r0, r4
 80058f6:	f171 0100 	sbcs.w	r1, r1, #0
 80058fa:	f081 8203 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80058fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005902:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8005906:	4321      	orrs	r1, r4
 8005908:	f000 84fb 	beq.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800590c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005910:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8005914:	f171 0100 	sbcs.w	r1, r1, #0
 8005918:	f081 81f4 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800591c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005920:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8005924:	4321      	orrs	r1, r4
 8005926:	f000 84a9 	beq.w	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800592a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800592e:	f248 0401 	movw	r4, #32769	@ 0x8001
 8005932:	42a0      	cmp	r0, r4
 8005934:	f171 0100 	sbcs.w	r1, r1, #0
 8005938:	f081 81e4 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800593c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005940:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8005944:	4321      	orrs	r1, r4
 8005946:	f000 8456 	beq.w	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 800594a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800594e:	f244 0401 	movw	r4, #16385	@ 0x4001
 8005952:	42a0      	cmp	r0, r4
 8005954:	f171 0100 	sbcs.w	r1, r1, #0
 8005958:	f081 81d4 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800595c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005960:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8005964:	4321      	orrs	r1, r4
 8005966:	f000 8403 	beq.w	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800596a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800596e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8005972:	42a0      	cmp	r0, r4
 8005974:	f171 0100 	sbcs.w	r1, r1, #0
 8005978:	f081 81c4 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800597c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005980:	2821      	cmp	r0, #33	@ 0x21
 8005982:	f171 0100 	sbcs.w	r1, r1, #0
 8005986:	d255      	bcs.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8005988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800598c:	4301      	orrs	r1, r0
 800598e:	f001 81b9 	beq.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005992:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005996:	1e42      	subs	r2, r0, #1
 8005998:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 800599c:	2a20      	cmp	r2, #32
 800599e:	f173 0100 	sbcs.w	r1, r3, #0
 80059a2:	f081 81af 	bcs.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80059a6:	2a1f      	cmp	r2, #31
 80059a8:	f201 81ac 	bhi.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80059ac:	a101      	add	r1, pc, #4	@ (adr r1, 80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80059ae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80059b2:	bf00      	nop
 80059b4:	08005a8b 	.word	0x08005a8b
 80059b8:	08005b89 	.word	0x08005b89
 80059bc:	08006d05 	.word	0x08006d05
 80059c0:	08005c49 	.word	0x08005c49
 80059c4:	08006d05 	.word	0x08006d05
 80059c8:	08006d05 	.word	0x08006d05
 80059cc:	08006d05 	.word	0x08006d05
 80059d0:	08005d19 	.word	0x08005d19
 80059d4:	08006d05 	.word	0x08006d05
 80059d8:	08006d05 	.word	0x08006d05
 80059dc:	08006d05 	.word	0x08006d05
 80059e0:	08006d05 	.word	0x08006d05
 80059e4:	08006d05 	.word	0x08006d05
 80059e8:	08006d05 	.word	0x08006d05
 80059ec:	08006d05 	.word	0x08006d05
 80059f0:	08005dfd 	.word	0x08005dfd
 80059f4:	08006d05 	.word	0x08006d05
 80059f8:	08006d05 	.word	0x08006d05
 80059fc:	08006d05 	.word	0x08006d05
 8005a00:	08006d05 	.word	0x08006d05
 8005a04:	08006d05 	.word	0x08006d05
 8005a08:	08006d05 	.word	0x08006d05
 8005a0c:	08006d05 	.word	0x08006d05
 8005a10:	08006d05 	.word	0x08006d05
 8005a14:	08006d05 	.word	0x08006d05
 8005a18:	08006d05 	.word	0x08006d05
 8005a1c:	08006d05 	.word	0x08006d05
 8005a20:	08006d05 	.word	0x08006d05
 8005a24:	08006d05 	.word	0x08006d05
 8005a28:	08006d05 	.word	0x08006d05
 8005a2c:	08006d05 	.word	0x08006d05
 8005a30:	08005ed3 	.word	0x08005ed3
 8005a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a38:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005a3c:	430b      	orrs	r3, r1
 8005a3e:	f000 82b3 	beq.w	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8005a42:	f001 b95f 	b.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005a46:	4b43      	ldr	r3, [pc, #268]	@ (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005a48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a50:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d108      	bne.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a58:	f107 0320 	add.w	r3, r7, #32
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff f9cf 	bl	8004e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005a66:	f001 b950 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6c:	2b40      	cmp	r3, #64	@ 0x40
 8005a6e:	d108      	bne.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a70:	f107 0314 	add.w	r3, r7, #20
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fb2f 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a7e:	f001 b944 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a86:	f001 b940 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005a8a:	4b32      	ldr	r3, [pc, #200]	@ (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005a8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005a9c:	f7fd ffc4 	bl	8003a28 <HAL_RCC_GetPCLK2Freq>
 8005aa0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005aa2:	f001 b932 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005aae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ab2:	d10a      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d107      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005aba:	f107 0314 	add.w	r3, r7, #20
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff fb0a 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ac8:	e05c      	b.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005aca:	4b22      	ldr	r3, [pc, #136]	@ (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ad2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ad6:	d10a      	bne.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d107      	bne.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ade:	f107 0308 	add.w	r3, r7, #8
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff fc64 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aec:	e04a      	b.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005aee:	4b19      	ldr	r3, [pc, #100]	@ (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d10c      	bne.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8005afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d109      	bne.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b00:	4b14      	ldr	r3, [pc, #80]	@ (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	08db      	lsrs	r3, r3, #3
 8005b06:	f003 0303 	and.w	r3, r3, #3
 8005b0a:	4a13      	ldr	r2, [pc, #76]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8005b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b12:	e037      	b.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005b14:	4b0f      	ldr	r3, [pc, #60]	@ (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b20:	d11e      	bne.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d11b      	bne.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8005b28:	4b0c      	ldr	r3, [pc, #48]	@ (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8005b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b2c:	e02a      	b.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8005b2e:	bf00      	nop
 8005b30:	40000001 	.word	0x40000001
 8005b34:	20000001 	.word	0x20000001
 8005b38:	10000001 	.word	0x10000001
 8005b3c:	08000001 	.word	0x08000001
 8005b40:	04000001 	.word	0x04000001
 8005b44:	00400001 	.word	0x00400001
 8005b48:	00200001 	.word	0x00200001
 8005b4c:	00040001 	.word	0x00040001
 8005b50:	00020001 	.word	0x00020001
 8005b54:	44020c00 	.word	0x44020c00
 8005b58:	03d09000 	.word	0x03d09000
 8005b5c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005b60:	4ba3      	ldr	r3, [pc, #652]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d106      	bne.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b70:	2b05      	cmp	r3, #5
 8005b72:	d103      	bne.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8005b74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b7a:	e003      	b.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b80:	f001 b8c3 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005b84:	f001 b8c1 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005b88:	4b99      	ldr	r3, [pc, #612]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005b8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005b8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b92:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d104      	bne.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b9a:	f7fd ff2f 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 8005b9e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005ba0:	f001 b8b3 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005ba4:	4b92      	ldr	r3, [pc, #584]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bb0:	d10a      	bne.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d107      	bne.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bb8:	f107 0314 	add.w	r3, r7, #20
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff fa8b 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bc6:	e03d      	b.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bca:	2b10      	cmp	r3, #16
 8005bcc:	d108      	bne.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bce:	f107 0308 	add.w	r3, r7, #8
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7ff fbec 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005bdc:	f001 b895 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005be0:	4b83      	ldr	r3, [pc, #524]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d10c      	bne.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8005bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bee:	2b18      	cmp	r3, #24
 8005bf0:	d109      	bne.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	08db      	lsrs	r3, r3, #3
 8005bf8:	f003 0303 	and.w	r3, r3, #3
 8005bfc:	4a7d      	ldr	r2, [pc, #500]	@ (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8005bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c04:	e01e      	b.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8005c06:	4b7a      	ldr	r3, [pc, #488]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c12:	d105      	bne.n	8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c16:	2b20      	cmp	r3, #32
 8005c18:	d102      	bne.n	8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 8005c1a:	4b77      	ldr	r3, [pc, #476]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8005c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c1e:	e011      	b.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005c20:	4b73      	ldr	r3, [pc, #460]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005c22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d106      	bne.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c30:	2b28      	cmp	r3, #40	@ 0x28
 8005c32:	d103      	bne.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8005c34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c3a:	e003      	b.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c40:	f001 b863 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005c44:	f001 b861 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005c48:	4b69      	ldr	r3, [pc, #420]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005c4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005c4e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005c52:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d104      	bne.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c5a:	f7fd fecf 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 8005c5e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005c60:	f001 b853 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8005c64:	4b62      	ldr	r3, [pc, #392]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c70:	d10a      	bne.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8005c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c74:	2b40      	cmp	r3, #64	@ 0x40
 8005c76:	d107      	bne.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c78:	f107 0314 	add.w	r3, r7, #20
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff fa2b 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c86:	e045      	b.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8005c88:	4b59      	ldr	r3, [pc, #356]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c94:	d10a      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8005c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c98:	2b80      	cmp	r3, #128	@ 0x80
 8005c9a:	d107      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c9c:	f107 0308 	add.w	r3, r7, #8
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff fb85 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005caa:	e033      	b.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005cac:	4b50      	ldr	r3, [pc, #320]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d10c      	bne.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cba:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cbc:	d109      	bne.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005cbe:	4b4c      	ldr	r3, [pc, #304]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	08db      	lsrs	r3, r3, #3
 8005cc4:	f003 0303 	and.w	r3, r3, #3
 8005cc8:	4a4a      	ldr	r2, [pc, #296]	@ (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8005cca:	fa22 f303 	lsr.w	r3, r2, r3
 8005cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cd0:	e020      	b.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8005cd2:	4b47      	ldr	r3, [pc, #284]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cde:	d106      	bne.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ce6:	d102      	bne.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8005ce8:	4b43      	ldr	r3, [pc, #268]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8005cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cec:	e012      	b.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005cee:	4b40      	ldr	r3, [pc, #256]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d107      	bne.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005d02:	d103      	bne.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8005d04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d0a:	e003      	b.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d10:	f000 bffb 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005d14:	f000 bff9 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005d18:	4b35      	ldr	r3, [pc, #212]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005d1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005d1e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005d22:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d104      	bne.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d2a:	f7fd fe67 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 8005d2e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8005d30:	f000 bfeb 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8005d34:	4b2e      	ldr	r3, [pc, #184]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d40:	d10b      	bne.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8005d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d48:	d107      	bne.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d4a:	f107 0314 	add.w	r3, r7, #20
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff f9c2 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d58:	e047      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8005d5a:	4b25      	ldr	r3, [pc, #148]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d66:	d10b      	bne.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d6e:	d107      	bne.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d70:	f107 0308 	add.w	r3, r7, #8
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff fb1b 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d7e:	e034      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005d80:	4b1b      	ldr	r3, [pc, #108]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d10d      	bne.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d92:	d109      	bne.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d94:	4b16      	ldr	r3, [pc, #88]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	08db      	lsrs	r3, r3, #3
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	4a15      	ldr	r2, [pc, #84]	@ (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
 8005da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005da6:	e020      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8005da8:	4b11      	ldr	r3, [pc, #68]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005db0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005db4:	d106      	bne.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8005db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dbc:	d102      	bne.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8005dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8005dc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dc2:	e012      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005dc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d107      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005dd8:	d103      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 8005dda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de0:	e003      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005de6:	f000 bf90 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005dea:	f000 bf8e 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005dee:	bf00      	nop
 8005df0:	44020c00 	.word	0x44020c00
 8005df4:	03d09000 	.word	0x03d09000
 8005df8:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005dfc:	4ba5      	ldr	r3, [pc, #660]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005dfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e02:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005e06:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d104      	bne.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e0e:	f7fd fdf5 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 8005e12:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8005e14:	f000 bf79 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8005e18:	4b9e      	ldr	r3, [pc, #632]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e24:	d10b      	bne.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8005e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e2c:	d107      	bne.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e2e:	f107 0314 	add.w	r3, r7, #20
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff f950 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e3c:	e047      	b.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8005e3e:	4b95      	ldr	r3, [pc, #596]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e4a:	d10b      	bne.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e52:	d107      	bne.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e54:	f107 0308 	add.w	r3, r7, #8
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff faa9 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e62:	e034      	b.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005e64:	4b8b      	ldr	r3, [pc, #556]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d10d      	bne.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8005e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e76:	d109      	bne.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e78:	4b86      	ldr	r3, [pc, #536]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	08db      	lsrs	r3, r3, #3
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	4a85      	ldr	r2, [pc, #532]	@ (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8005e84:	fa22 f303 	lsr.w	r3, r2, r3
 8005e88:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e8a:	e020      	b.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8005e8c:	4b81      	ldr	r3, [pc, #516]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e98:	d106      	bne.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ea0:	d102      	bne.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8005ea2:	4b7e      	ldr	r3, [pc, #504]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8005ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ea6:	e012      	b.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005ea8:	4b7a      	ldr	r3, [pc, #488]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005eaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d107      	bne.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005ebc:	d103      	bne.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8005ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ec4:	e003      	b.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005eca:	f000 bf1e 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005ece:	f000 bf1c 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8005ed2:	4b70      	ldr	r3, [pc, #448]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005ed4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ed8:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8005edc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8005ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d104      	bne.n	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ee4:	f7fd fd8a 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 8005ee8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8005eea:	f000 bf0e 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8005eee:	4b69      	ldr	r3, [pc, #420]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ef6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005efa:	d10b      	bne.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f02:	d107      	bne.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f04:	f107 0314 	add.w	r3, r7, #20
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7ff f8e5 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f12:	e047      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8005f14:	4b5f      	ldr	r3, [pc, #380]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f20:	d10b      	bne.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f28:	d107      	bne.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f2a:	f107 0308 	add.w	r3, r7, #8
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff fa3e 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f38:	e034      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8005f3a:	4b56      	ldr	r3, [pc, #344]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d10d      	bne.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8005f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f48:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005f4c:	d109      	bne.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f4e:	4b51      	ldr	r3, [pc, #324]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	08db      	lsrs	r3, r3, #3
 8005f54:	f003 0303 	and.w	r3, r3, #3
 8005f58:	4a4f      	ldr	r2, [pc, #316]	@ (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8005f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f60:	e020      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8005f62:	4b4c      	ldr	r3, [pc, #304]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f6e:	d106      	bne.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8005f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f76:	d102      	bne.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8005f78:	4b48      	ldr	r3, [pc, #288]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8005f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f7c:	e012      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8005f7e:	4b45      	ldr	r3, [pc, #276]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d107      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005f92:	d103      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8005f94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f9a:	e003      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fa0:	f000 beb3 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005fa4:	f000 beb1 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fae:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005fb2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d104      	bne.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005fba:	f7fd fd4b 	bl	8003a54 <HAL_RCC_GetPCLK3Freq>
 8005fbe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005fc0:	f000 bea3 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fca:	d108      	bne.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fcc:	f107 0314 	add.w	r3, r7, #20
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff f881 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fda:	f000 be96 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8005fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fe4:	d108      	bne.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fe6:	f107 0308 	add.w	r3, r7, #8
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff f9e0 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ff4:	f000 be89 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005ff8:	4b26      	ldr	r3, [pc, #152]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b02      	cmp	r3, #2
 8006002:	d10d      	bne.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006006:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800600a:	d109      	bne.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800600c:	4b21      	ldr	r3, [pc, #132]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	08db      	lsrs	r3, r3, #3
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	4a20      	ldr	r2, [pc, #128]	@ (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8006018:	fa22 f303 	lsr.w	r3, r2, r3
 800601c:	637b      	str	r3, [r7, #52]	@ 0x34
 800601e:	e020      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006020:	4b1c      	ldr	r3, [pc, #112]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800602c:	d106      	bne.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800602e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006030:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006034:	d102      	bne.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8006036:	4b19      	ldr	r3, [pc, #100]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8006038:	637b      	str	r3, [r7, #52]	@ 0x34
 800603a:	e012      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800603c:	4b15      	ldr	r3, [pc, #84]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800603e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b02      	cmp	r3, #2
 8006048:	d107      	bne.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 800604a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006050:	d103      	bne.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8006052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006056:	637b      	str	r3, [r7, #52]	@ 0x34
 8006058:	e003      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800605e:	f000 be54 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006062:	f000 be52 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006066:	4b0b      	ldr	r3, [pc, #44]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006074:	2b00      	cmp	r3, #0
 8006076:	d104      	bne.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006078:	f7fd fca4 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 800607c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800607e:	f000 be44 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006084:	2b01      	cmp	r3, #1
 8006086:	d10b      	bne.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8006088:	f7fd fb70 	bl	800376c <HAL_RCC_GetSysClockFreq>
 800608c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800608e:	f000 be3c 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006092:	bf00      	nop
 8006094:	44020c00 	.word	0x44020c00
 8006098:	03d09000 	.word	0x03d09000
 800609c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80060a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d108      	bne.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060a6:	f107 0314 	add.w	r3, r7, #20
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff f814 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060b4:	f000 be29 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80060b8:	4b9f      	ldr	r3, [pc, #636]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060c4:	d105      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80060c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d102      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 80060cc:	4b9b      	ldr	r3, [pc, #620]	@ (800633c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 80060ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80060d0:	e023      	b.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80060d2:	4b99      	ldr	r3, [pc, #612]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d10c      	bne.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d109      	bne.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80060e4:	4b94      	ldr	r3, [pc, #592]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	08db      	lsrs	r3, r3, #3
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	4a94      	ldr	r2, [pc, #592]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80060f0:	fa22 f303 	lsr.w	r3, r2, r3
 80060f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80060f6:	e010      	b.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80060f8:	4b8f      	ldr	r3, [pc, #572]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006104:	d105      	bne.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8006106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006108:	2b05      	cmp	r3, #5
 800610a:	d102      	bne.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 800610c:	4b8d      	ldr	r3, [pc, #564]	@ (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800610e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006110:	e003      	b.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006116:	f000 bdf8 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800611a:	f000 bdf6 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800611e:	4b86      	ldr	r3, [pc, #536]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800612a:	4b83      	ldr	r3, [pc, #524]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800612c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b02      	cmp	r3, #2
 8006136:	d106      	bne.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8006138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613a:	2b00      	cmp	r3, #0
 800613c:	d103      	bne.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 800613e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006142:	637b      	str	r3, [r7, #52]	@ 0x34
 8006144:	e012      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006146:	4b7c      	ldr	r3, [pc, #496]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800614c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006150:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006154:	d106      	bne.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8006156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006158:	2b08      	cmp	r3, #8
 800615a:	d103      	bne.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 800615c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006160:	637b      	str	r3, [r7, #52]	@ 0x34
 8006162:	e003      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006168:	f000 bdcf 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800616c:	f000 bdcd 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006170:	4b71      	ldr	r3, [pc, #452]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006172:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006176:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800617a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617e:	2b00      	cmp	r3, #0
 8006180:	d104      	bne.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006182:	f7fd fc3b 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 8006186:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006188:	f000 bdbf 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800618c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006192:	d108      	bne.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006194:	f107 0308 	add.w	r3, r7, #8
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff f909 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061a2:	f000 bdb2 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80061a6:	4b64      	ldr	r3, [pc, #400]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d10d      	bne.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 80061b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061b8:	d109      	bne.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061ba:	4b5f      	ldr	r3, [pc, #380]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	08db      	lsrs	r3, r3, #3
 80061c0:	f003 0303 	and.w	r3, r3, #3
 80061c4:	4a5e      	ldr	r2, [pc, #376]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80061c6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80061cc:	e011      	b.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80061ce:	4b5a      	ldr	r3, [pc, #360]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061da:	d106      	bne.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 80061dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061e2:	d102      	bne.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 80061e4:	4b57      	ldr	r3, [pc, #348]	@ (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80061e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80061e8:	e003      	b.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061ee:	f000 bd8c 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80061f2:	f000 bd8a 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80061f6:	4b50      	ldr	r3, [pc, #320]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80061f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061fc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006200:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006204:	2b00      	cmp	r3, #0
 8006206:	d104      	bne.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006208:	f7fd fbf8 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 800620c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800620e:	f000 bd7c 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006214:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006218:	d108      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800621a:	f107 0308 	add.w	r3, r7, #8
 800621e:	4618      	mov	r0, r3
 8006220:	f7ff f8c6 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006228:	f000 bd6f 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800622c:	4b42      	ldr	r3, [pc, #264]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0302 	and.w	r3, r3, #2
 8006234:	2b02      	cmp	r3, #2
 8006236:	d10d      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8006238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800623e:	d109      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006240:	4b3d      	ldr	r3, [pc, #244]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	08db      	lsrs	r3, r3, #3
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	4a3d      	ldr	r2, [pc, #244]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 800624c:	fa22 f303 	lsr.w	r3, r2, r3
 8006250:	637b      	str	r3, [r7, #52]	@ 0x34
 8006252:	e011      	b.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006254:	4b38      	ldr	r3, [pc, #224]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800625c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006260:	d106      	bne.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006268:	d102      	bne.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 800626a:	4b36      	ldr	r3, [pc, #216]	@ (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800626c:	637b      	str	r3, [r7, #52]	@ 0x34
 800626e:	e003      	b.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006274:	f000 bd49 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006278:	f000 bd47 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800627c:	4b2e      	ldr	r3, [pc, #184]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800627e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006282:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006286:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628a:	2b00      	cmp	r3, #0
 800628c:	d104      	bne.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800628e:	f7fd fbe1 	bl	8003a54 <HAL_RCC_GetPCLK3Freq>
 8006292:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006294:	f000 bd39 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800629e:	d108      	bne.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062a0:	f107 0308 	add.w	r3, r7, #8
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff f883 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062ae:	f000 bd2c 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80062b2:	4b21      	ldr	r3, [pc, #132]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d10d      	bne.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80062be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062c4:	d109      	bne.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062c6:	4b1c      	ldr	r3, [pc, #112]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	08db      	lsrs	r3, r3, #3
 80062cc:	f003 0303 	and.w	r3, r3, #3
 80062d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80062d2:	fa22 f303 	lsr.w	r3, r2, r3
 80062d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d8:	e011      	b.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80062da:	4b17      	ldr	r3, [pc, #92]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062e6:	d106      	bne.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 80062e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062ee:	d102      	bne.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 80062f0:	4b14      	ldr	r3, [pc, #80]	@ (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80062f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80062f4:	e003      	b.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062fa:	f000 bd06 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80062fe:	f000 bd04 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006302:	4b0d      	ldr	r3, [pc, #52]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006304:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006308:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800630c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800630e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006310:	2b00      	cmp	r3, #0
 8006312:	d104      	bne.n	800631e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006314:	f7fd fb72 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 8006318:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800631a:	f000 bcf6 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800631e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006324:	d110      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006326:	f107 0308 	add.w	r3, r7, #8
 800632a:	4618      	mov	r0, r3
 800632c:	f7ff f840 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006334:	f000 bce9 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006338:	44020c00 	.word	0x44020c00
 800633c:	017d7840 	.word	0x017d7840
 8006340:	03d09000 	.word	0x03d09000
 8006344:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006348:	4ba4      	ldr	r3, [pc, #656]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b02      	cmp	r3, #2
 8006352:	d10e      	bne.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8006354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006356:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800635a:	d10a      	bne.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800635c:	4b9f      	ldr	r3, [pc, #636]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	08db      	lsrs	r3, r3, #3
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	4a9e      	ldr	r2, [pc, #632]	@ (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006368:	fa22 f303 	lsr.w	r3, r2, r3
 800636c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800636e:	f000 bccc 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006376:	f000 bcc8 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 800637a:	4b98      	ldr	r3, [pc, #608]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800637c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006380:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006384:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8006386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006388:	2b00      	cmp	r3, #0
 800638a:	d104      	bne.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800638c:	f7fd fb62 	bl	8003a54 <HAL_RCC_GetPCLK3Freq>
 8006390:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006392:	f000 bcba 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800639c:	d108      	bne.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800639e:	f107 0308 	add.w	r3, r7, #8
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff f804 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063ac:	f000 bcad 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80063b0:	4b8a      	ldr	r3, [pc, #552]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d10e      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80063bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063c2:	d10a      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063c4:	4b85      	ldr	r3, [pc, #532]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	08db      	lsrs	r3, r3, #3
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	4a84      	ldr	r2, [pc, #528]	@ (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80063d0:	fa22 f303 	lsr.w	r3, r2, r3
 80063d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063d6:	f000 bc98 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063de:	f000 bc94 	b.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80063e2:	4b7e      	ldr	r3, [pc, #504]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80063e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80063e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80063ec:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80063f4:	d056      	beq.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80063fc:	f200 808b 	bhi.w	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006406:	d03e      	beq.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8006408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800640e:	f200 8082 	bhi.w	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006418:	d027      	beq.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800641a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006420:	d879      	bhi.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006428:	d017      	beq.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 800642a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006430:	d871      	bhi.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006434:	2b00      	cmp	r3, #0
 8006436:	d004      	beq.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8006438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800643e:	d004      	beq.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8006440:	e069      	b.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006442:	f7fd fb07 	bl	8003a54 <HAL_RCC_GetPCLK3Freq>
 8006446:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006448:	e068      	b.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800644a:	f107 0314 	add.w	r3, r7, #20
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe fe42 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006458:	e060      	b.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800645a:	f107 0308 	add.w	r3, r7, #8
 800645e:	4618      	mov	r0, r3
 8006460:	f7fe ffa6 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006468:	e058      	b.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800646a:	4b5c      	ldr	r3, [pc, #368]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800646c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b02      	cmp	r3, #2
 8006476:	d103      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8006478:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800647c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800647e:	e04d      	b.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006484:	e04a      	b.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006486:	4b55      	ldr	r3, [pc, #340]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800648c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006490:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006494:	d103      	bne.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8006496:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800649a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800649c:	e03e      	b.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80064a2:	e03b      	b.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064a4:	4b4d      	ldr	r3, [pc, #308]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80064a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80064aa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80064ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064b0:	4b4a      	ldr	r3, [pc, #296]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d10c      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 80064bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064c2:	4b46      	ldr	r3, [pc, #280]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	08db      	lsrs	r3, r3, #3
 80064c8:	f003 0303 	and.w	r3, r3, #3
 80064cc:	4a44      	ldr	r2, [pc, #272]	@ (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80064ce:	fa22 f303 	lsr.w	r3, r2, r3
 80064d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d4:	e01e      	b.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064d6:	4b41      	ldr	r3, [pc, #260]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064e2:	d106      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80064e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ea:	d102      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80064ec:	4b3d      	ldr	r3, [pc, #244]	@ (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 80064ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80064f0:	e010      	b.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064f2:	4b3a      	ldr	r3, [pc, #232]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064fe:	d106      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8006500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006502:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006506:	d102      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006508:	4b37      	ldr	r3, [pc, #220]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 800650a:	637b      	str	r3, [r7, #52]	@ 0x34
 800650c:	e002      	b.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006512:	e003      	b.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8006514:	e002      	b.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800651a:	bf00      	nop
          }
        }
        break;
 800651c:	e3f5      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800651e:	4b2f      	ldr	r3, [pc, #188]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006520:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006524:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006528:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800652a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006530:	d05f      	beq.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8006532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006534:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006538:	f200 8094 	bhi.w	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800653c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006542:	d03f      	beq.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8006544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006546:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800654a:	f200 808b 	bhi.w	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800654e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006550:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006554:	d028      	beq.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800655c:	f200 8082 	bhi.w	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006566:	d017      	beq.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8006568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800656e:	d879      	bhi.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006572:	2b00      	cmp	r3, #0
 8006574:	d004      	beq.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800657c:	d004      	beq.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 800657e:	e071      	b.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006580:	f7fd fa3c 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 8006584:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006586:	e070      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006588:	f107 0314 	add.w	r3, r7, #20
 800658c:	4618      	mov	r0, r3
 800658e:	f7fe fda3 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006596:	e068      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006598:	f107 0308 	add.w	r3, r7, #8
 800659c:	4618      	mov	r0, r3
 800659e:	f7fe ff07 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80065a6:	e060      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065a8:	4b0c      	ldr	r3, [pc, #48]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80065aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d103      	bne.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 80065b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065ba:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80065bc:	e055      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 80065be:	2300      	movs	r3, #0
 80065c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80065c2:	e052      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80065c4:	4b05      	ldr	r3, [pc, #20]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80065c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065d2:	d10b      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 80065d4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80065d8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80065da:	e046      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 80065dc:	44020c00 	.word	0x44020c00
 80065e0:	03d09000 	.word	0x03d09000
 80065e4:	003d0900 	.word	0x003d0900
 80065e8:	017d7840 	.word	0x017d7840
              frequency = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80065f0:	e03b      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80065f2:	4bae      	ldr	r3, [pc, #696]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80065f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065f8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80065fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065fe:	4bab      	ldr	r3, [pc, #684]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b02      	cmp	r3, #2
 8006608:	d10c      	bne.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 800660a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660c:	2b00      	cmp	r3, #0
 800660e:	d109      	bne.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006610:	4ba6      	ldr	r3, [pc, #664]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	08db      	lsrs	r3, r3, #3
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	4aa5      	ldr	r2, [pc, #660]	@ (80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 800661c:	fa22 f303 	lsr.w	r3, r2, r3
 8006620:	637b      	str	r3, [r7, #52]	@ 0x34
 8006622:	e01e      	b.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006624:	4ba1      	ldr	r3, [pc, #644]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800662c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006630:	d106      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8006632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006638:	d102      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800663a:	4b9e      	ldr	r3, [pc, #632]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 800663c:	637b      	str	r3, [r7, #52]	@ 0x34
 800663e:	e010      	b.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006640:	4b9a      	ldr	r3, [pc, #616]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006648:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800664c:	d106      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800664e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006650:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006654:	d102      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006656:	4b98      	ldr	r3, [pc, #608]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006658:	637b      	str	r3, [r7, #52]	@ 0x34
 800665a:	e002      	b.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800665c:	2300      	movs	r3, #0
 800665e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006660:	e003      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8006662:	e002      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8006664:	2300      	movs	r3, #0
 8006666:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006668:	bf00      	nop
          }
        }
        break;
 800666a:	e34e      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800666c:	4b8f      	ldr	r3, [pc, #572]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800666e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006676:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006678:	4b8c      	ldr	r3, [pc, #560]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006684:	d105      	bne.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8006686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006688:	2b00      	cmp	r3, #0
 800668a:	d102      	bne.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 800668c:	4b8a      	ldr	r3, [pc, #552]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800668e:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006690:	e33b      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8006692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006698:	d107      	bne.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800669a:	f107 0320 	add.w	r3, r7, #32
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fe fbae 	bl	8004e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066a8:	e32f      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80066aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066b0:	d107      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066b2:	f107 0314 	add.w	r3, r7, #20
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fe fd0e 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066c0:	e323      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066c6:	e320      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80066c8:	4b78      	ldr	r3, [pc, #480]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80066ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80066d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d6:	2b04      	cmp	r3, #4
 80066d8:	d860      	bhi.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 80066da:	a201      	add	r2, pc, #4	@ (adr r2, 80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80066dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e0:	080066f5 	.word	0x080066f5
 80066e4:	08006705 	.word	0x08006705
 80066e8:	08006715 	.word	0x08006715
 80066ec:	08006725 	.word	0x08006725
 80066f0:	0800672b 	.word	0x0800672b
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066f4:	f107 0320 	add.w	r3, r7, #32
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fe fb81 	bl	8004e00 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80066fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006700:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006702:	e04e      	b.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006704:	f107 0314 	add.w	r3, r7, #20
 8006708:	4618      	mov	r0, r3
 800670a:	f7fe fce5 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006712:	e046      	b.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006714:	f107 0308 	add.w	r3, r7, #8
 8006718:	4618      	mov	r0, r3
 800671a:	f7fe fe49 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006722:	e03e      	b.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006724:	4b65      	ldr	r3, [pc, #404]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006726:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006728:	e03b      	b.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800672a:	4b60      	ldr	r3, [pc, #384]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800672c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006730:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006734:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006736:	4b5d      	ldr	r3, [pc, #372]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b02      	cmp	r3, #2
 8006740:	d10c      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8006742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006744:	2b00      	cmp	r3, #0
 8006746:	d109      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006748:	4b58      	ldr	r3, [pc, #352]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	08db      	lsrs	r3, r3, #3
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	4a57      	ldr	r2, [pc, #348]	@ (80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006754:	fa22 f303 	lsr.w	r3, r2, r3
 8006758:	637b      	str	r3, [r7, #52]	@ 0x34
 800675a:	e01e      	b.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800675c:	4b53      	ldr	r3, [pc, #332]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006768:	d106      	bne.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 800676a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006770:	d102      	bne.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006772:	4b50      	ldr	r3, [pc, #320]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006774:	637b      	str	r3, [r7, #52]	@ 0x34
 8006776:	e010      	b.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006778:	4b4c      	ldr	r3, [pc, #304]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006780:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006784:	d106      	bne.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8006786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006788:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800678c:	d102      	bne.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800678e:	4b4a      	ldr	r3, [pc, #296]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006790:	637b      	str	r3, [r7, #52]	@ 0x34
 8006792:	e002      	b.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006798:	e003      	b.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800679a:	e002      	b.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80067a0:	bf00      	nop
          }
        }
        break;
 80067a2:	e2b2      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80067a4:	4b41      	ldr	r3, [pc, #260]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80067a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067ae:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80067b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	f200 80a4 	bhi.w	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 80067b8:	a201      	add	r2, pc, #4	@ (adr r2, 80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 80067ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067be:	bf00      	nop
 80067c0:	08006845 	.word	0x08006845
 80067c4:	08006901 	.word	0x08006901
 80067c8:	08006901 	.word	0x08006901
 80067cc:	08006901 	.word	0x08006901
 80067d0:	08006901 	.word	0x08006901
 80067d4:	08006901 	.word	0x08006901
 80067d8:	08006901 	.word	0x08006901
 80067dc:	08006901 	.word	0x08006901
 80067e0:	08006855 	.word	0x08006855
 80067e4:	08006901 	.word	0x08006901
 80067e8:	08006901 	.word	0x08006901
 80067ec:	08006901 	.word	0x08006901
 80067f0:	08006901 	.word	0x08006901
 80067f4:	08006901 	.word	0x08006901
 80067f8:	08006901 	.word	0x08006901
 80067fc:	08006901 	.word	0x08006901
 8006800:	08006865 	.word	0x08006865
 8006804:	08006901 	.word	0x08006901
 8006808:	08006901 	.word	0x08006901
 800680c:	08006901 	.word	0x08006901
 8006810:	08006901 	.word	0x08006901
 8006814:	08006901 	.word	0x08006901
 8006818:	08006901 	.word	0x08006901
 800681c:	08006901 	.word	0x08006901
 8006820:	08006875 	.word	0x08006875
 8006824:	08006901 	.word	0x08006901
 8006828:	08006901 	.word	0x08006901
 800682c:	08006901 	.word	0x08006901
 8006830:	08006901 	.word	0x08006901
 8006834:	08006901 	.word	0x08006901
 8006838:	08006901 	.word	0x08006901
 800683c:	08006901 	.word	0x08006901
 8006840:	0800687b 	.word	0x0800687b
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006844:	f107 0320 	add.w	r3, r7, #32
 8006848:	4618      	mov	r0, r3
 800684a:	f7fe fad9 	bl	8004e00 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006852:	e058      	b.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006854:	f107 0314 	add.w	r3, r7, #20
 8006858:	4618      	mov	r0, r3
 800685a:	f7fe fc3d 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006862:	e050      	b.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006864:	f107 0308 	add.w	r3, r7, #8
 8006868:	4618      	mov	r0, r3
 800686a:	f7fe fda1 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006872:	e048      	b.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006874:	4b11      	ldr	r3, [pc, #68]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006876:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006878:	e045      	b.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800687a:	4b0c      	ldr	r3, [pc, #48]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800687c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006880:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006884:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006886:	4b09      	ldr	r3, [pc, #36]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b02      	cmp	r3, #2
 8006890:	d116      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8006892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d113      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006898:	4b04      	ldr	r3, [pc, #16]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	08db      	lsrs	r3, r3, #3
 800689e:	f003 0303 	and.w	r3, r3, #3
 80068a2:	4a03      	ldr	r2, [pc, #12]	@ (80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80068a4:	fa22 f303 	lsr.w	r3, r2, r3
 80068a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068aa:	e028      	b.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 80068ac:	44020c00 	.word	0x44020c00
 80068b0:	03d09000 	.word	0x03d09000
 80068b4:	003d0900 	.word	0x003d0900
 80068b8:	017d7840 	.word	0x017d7840
 80068bc:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068c0:	4b95      	ldr	r3, [pc, #596]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068cc:	d106      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 80068ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d4:	d102      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80068d6:	4b91      	ldr	r3, [pc, #580]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80068d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068da:	e010      	b.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068dc:	4b8e      	ldr	r3, [pc, #568]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068e8:	d106      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 80068ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068f0:	d102      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80068f2:	4b8b      	ldr	r3, [pc, #556]	@ (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80068f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80068f6:	e002      	b.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80068f8:	2300      	movs	r3, #0
 80068fa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80068fc:	e003      	b.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 80068fe:	e002      	b.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8006900:	2300      	movs	r3, #0
 8006902:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006904:	bf00      	nop
          }
        }
        break;
 8006906:	e200      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006908:	4b83      	ldr	r3, [pc, #524]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800690a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800690e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006912:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8006914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800691a:	d031      	beq.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800691c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006922:	d866      	bhi.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8006924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006926:	2bc0      	cmp	r3, #192	@ 0xc0
 8006928:	d027      	beq.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 800692a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692c:	2bc0      	cmp	r3, #192	@ 0xc0
 800692e:	d860      	bhi.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8006930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006932:	2b80      	cmp	r3, #128	@ 0x80
 8006934:	d019      	beq.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8006936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006938:	2b80      	cmp	r3, #128	@ 0x80
 800693a:	d85a      	bhi.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 800693c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	2b40      	cmp	r3, #64	@ 0x40
 8006946:	d008      	beq.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8006948:	e053      	b.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800694a:	f107 0320 	add.w	r3, r7, #32
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe fa56 	bl	8004e00 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006958:	e04e      	b.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800695a:	f107 0314 	add.w	r3, r7, #20
 800695e:	4618      	mov	r0, r3
 8006960:	f7fe fbba 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006968:	e046      	b.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800696a:	f107 0308 	add.w	r3, r7, #8
 800696e:	4618      	mov	r0, r3
 8006970:	f7fe fd1e 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006978:	e03e      	b.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800697a:	4b6a      	ldr	r3, [pc, #424]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 800697c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800697e:	e03b      	b.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006980:	4b65      	ldr	r3, [pc, #404]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006982:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006986:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800698a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800698c:	4b62      	ldr	r3, [pc, #392]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b02      	cmp	r3, #2
 8006996:	d10c      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8006998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699a:	2b00      	cmp	r3, #0
 800699c:	d109      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800699e:	4b5e      	ldr	r3, [pc, #376]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	08db      	lsrs	r3, r3, #3
 80069a4:	f003 0303 	and.w	r3, r3, #3
 80069a8:	4a5f      	ldr	r2, [pc, #380]	@ (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80069aa:	fa22 f303 	lsr.w	r3, r2, r3
 80069ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80069b0:	e01e      	b.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069b2:	4b59      	ldr	r3, [pc, #356]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069be:	d106      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80069c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069c6:	d102      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80069c8:	4b54      	ldr	r3, [pc, #336]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80069ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80069cc:	e010      	b.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069ce:	4b52      	ldr	r3, [pc, #328]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069da:	d106      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 80069dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069e2:	d102      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80069e4:	4b4e      	ldr	r3, [pc, #312]	@ (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80069e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80069e8:	e002      	b.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80069ea:	2300      	movs	r3, #0
 80069ec:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80069ee:	e003      	b.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 80069f0:	e002      	b.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80069f6:	bf00      	nop
          }
        }
        break;
 80069f8:	e187      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80069fa:	4b47      	ldr	r3, [pc, #284]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80069fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a00:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006a04:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8006a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d103      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006a0c:	f7fd f80c 	bl	8003a28 <HAL_RCC_GetPCLK2Freq>
 8006a10:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8006a12:	e17a      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8006a14:	4b40      	ldr	r3, [pc, #256]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a20:	d10b      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a28:	d107      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a2a:	f107 0314 	add.w	r3, r7, #20
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fb52 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a38:	e045      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8006a3a:	4b37      	ldr	r3, [pc, #220]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a46:	d10b      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8006a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a4e:	d107      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a50:	f107 0308 	add.w	r3, r7, #8
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fe fcab 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a5e:	e032      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8006a60:	4b2d      	ldr	r3, [pc, #180]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d10d      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006a72:	d109      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a74:	4b28      	ldr	r3, [pc, #160]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	08db      	lsrs	r3, r3, #3
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8006a80:	fa22 f303 	lsr.w	r3, r2, r3
 8006a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a86:	e01e      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8006a88:	4b23      	ldr	r3, [pc, #140]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a94:	d106      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8006a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a9c:	d102      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 8006a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8006aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa2:	e010      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8006aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ab0:	d106      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006ab8:	d102      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 8006aba:	4b19      	ldr	r3, [pc, #100]	@ (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8006abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006abe:	e002      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ac4:	e121      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006ac6:	e120      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006ac8:	4b13      	ldr	r3, [pc, #76]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006aca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ace:	f003 0303 	and.w	r3, r3, #3
 8006ad2:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	d861      	bhi.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8006ada:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8006adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae0:	08006af1 	.word	0x08006af1
 8006ae4:	08006af9 	.word	0x08006af9
 8006ae8:	08006b09 	.word	0x08006b09
 8006aec:	08006b2d 	.word	0x08006b2d
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8006af0:	f7fc ff68 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 8006af4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006af6:	e055      	b.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006af8:	f107 0320 	add.w	r3, r7, #32
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7fe f97f 	bl	8004e00 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b06:	e04d      	b.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b08:	f107 0314 	add.w	r3, r7, #20
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fe fae3 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b16:	e045      	b.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006b18:	44020c00 	.word	0x44020c00
 8006b1c:	003d0900 	.word	0x003d0900
 8006b20:	017d7840 	.word	0x017d7840
 8006b24:	00bb8000 	.word	0x00bb8000
 8006b28:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b2c:	4b79      	ldr	r3, [pc, #484]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006b2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b32:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006b36:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b38:	4b76      	ldr	r3, [pc, #472]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d10c      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8006b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d109      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b4a:	4b72      	ldr	r3, [pc, #456]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	08db      	lsrs	r3, r3, #3
 8006b50:	f003 0303 	and.w	r3, r3, #3
 8006b54:	4a70      	ldr	r2, [pc, #448]	@ (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8006b56:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b5c:	e01e      	b.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b6a:	d106      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8006b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b72:	d102      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006b74:	4b69      	ldr	r3, [pc, #420]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8006b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b78:	e010      	b.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b7a:	4b66      	ldr	r3, [pc, #408]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b86:	d106      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8006b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b8e:	d102      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006b90:	4b63      	ldr	r3, [pc, #396]	@ (8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8006b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b94:	e002      	b.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006b9a:	e003      	b.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006b9c:	e002      	b.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006ba2:	bf00      	nop
          }
        }
        break;
 8006ba4:	e0b1      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8006ba6:	4b5b      	ldr	r3, [pc, #364]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006bb0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8006bb2:	4b58      	ldr	r3, [pc, #352]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d106      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d103      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 8006bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bcc:	e01f      	b.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8006bce:	4b51      	ldr	r3, [pc, #324]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bdc:	d106      	bne.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8006bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be0:	2b40      	cmp	r3, #64	@ 0x40
 8006be2:	d103      	bne.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8006be4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bea:	e010      	b.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8006bec:	4b49      	ldr	r3, [pc, #292]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bf8:	d106      	bne.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	2b80      	cmp	r3, #128	@ 0x80
 8006bfe:	d103      	bne.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8006c00:	f248 0312 	movw	r3, #32786	@ 0x8012
 8006c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c06:	e002      	b.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006c0c:	e07d      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006c0e:	e07c      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006c10:	4b40      	ldr	r3, [pc, #256]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006c12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c16:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006c1a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006c1c:	4b3d      	ldr	r3, [pc, #244]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c28:	d105      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d102      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8006c30:	4b3c      	ldr	r3, [pc, #240]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8006c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c34:	e031      	b.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8006c36:	4b37      	ldr	r3, [pc, #220]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c42:	d10a      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8006c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c46:	2b10      	cmp	r3, #16
 8006c48:	d107      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c4a:	f107 0320 	add.w	r3, r7, #32
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fe f8d6 	bl	8004e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c58:	e01f      	b.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8006c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d106      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8006c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6a:	2b20      	cmp	r3, #32
 8006c6c:	d103      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 8006c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c74:	e011      	b.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8006c76:	4b27      	ldr	r3, [pc, #156]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c84:	d106      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8006c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c88:	2b30      	cmp	r3, #48	@ 0x30
 8006c8a:	d103      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8006c8c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c92:	e002      	b.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006c98:	e037      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006c9a:	e036      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8006c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006c9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ca2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ca6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006caa:	2b10      	cmp	r3, #16
 8006cac:	d107      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cae:	f107 0320 	add.w	r3, r7, #32
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe f8a4 	bl	8004e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cba:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006cbc:	e025      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8006cbe:	4b15      	ldr	r3, [pc, #84]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cca:	d10a      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cce:	2b20      	cmp	r3, #32
 8006cd0:	d107      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cd2:	f107 0308 	add.w	r3, r7, #8
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fe fb6a 	bl	80053b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ce0:	e00f      	b.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8006ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cee:	d105      	bne.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf2:	2b30      	cmp	r3, #48	@ 0x30
 8006cf4:	d102      	bne.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 8006cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8006cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cfa:	e002      	b.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8006d00:	e003      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006d02:	e002      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d08:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8006d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	373c      	adds	r7, #60	@ 0x3c
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd90      	pop	{r4, r7, pc}
 8006d14:	44020c00 	.word	0x44020c00
 8006d18:	03d09000 	.word	0x03d09000
 8006d1c:	003d0900 	.word	0x003d0900
 8006d20:	017d7840 	.word	0x017d7840
 8006d24:	02dc6c00 	.word	0x02dc6c00

08006d28 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8006d30:	4b48      	ldr	r3, [pc, #288]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a47      	ldr	r2, [pc, #284]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006d36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d3a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006d3c:	f7fa f958 	bl	8000ff0 <HAL_GetTick>
 8006d40:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d42:	e008      	b.n	8006d56 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d44:	f7fa f954 	bl	8000ff0 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d901      	bls.n	8006d56 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e07a      	b.n	8006e4c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d56:	4b3f      	ldr	r3, [pc, #252]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f0      	bne.n	8006d44 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006d62:	4b3c      	ldr	r3, [pc, #240]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d66:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006d6a:	f023 0303 	bic.w	r3, r3, #3
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6811      	ldr	r1, [r2, #0]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	6852      	ldr	r2, [r2, #4]
 8006d76:	0212      	lsls	r2, r2, #8
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	4936      	ldr	r1, [pc, #216]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	3b01      	subs	r3, #1
 8006d86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	025b      	lsls	r3, r3, #9
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	431a      	orrs	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	041b      	lsls	r3, r3, #16
 8006d9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006da2:	431a      	orrs	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	061b      	lsls	r3, r3, #24
 8006dac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006db0:	4928      	ldr	r1, [pc, #160]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006db6:	4b27      	ldr	r3, [pc, #156]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dba:	f023 020c 	bic.w	r2, r3, #12
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	4924      	ldr	r1, [pc, #144]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8006dc8:	4b22      	ldr	r3, [pc, #136]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dcc:	f023 0220 	bic.w	r2, r3, #32
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	491f      	ldr	r1, [pc, #124]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006dda:	4b1e      	ldr	r3, [pc, #120]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de2:	491c      	ldr	r1, [pc, #112]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8006de8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dec:	4a19      	ldr	r2, [pc, #100]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006dee:	f023 0310 	bic.w	r3, r3, #16
 8006df2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8006df4:	4b17      	ldr	r3, [pc, #92]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dfc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6a12      	ldr	r2, [r2, #32]
 8006e04:	00d2      	lsls	r2, r2, #3
 8006e06:	4913      	ldr	r1, [pc, #76]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8006e0c:	4b11      	ldr	r3, [pc, #68]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e10:	4a10      	ldr	r2, [pc, #64]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006e12:	f043 0310 	orr.w	r3, r3, #16
 8006e16:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8006e18:	4b0e      	ldr	r3, [pc, #56]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006e1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e22:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e24:	f7fa f8e4 	bl	8000ff0 <HAL_GetTick>
 8006e28:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e2a:	e008      	b.n	8006e3e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e2c:	f7fa f8e0 	bl	8000ff0 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d901      	bls.n	8006e3e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e006      	b.n	8006e4c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e3e:	4b05      	ldr	r3, [pc, #20]	@ (8006e54 <RCCEx_PLL2_Config+0x12c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0f0      	beq.n	8006e2c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0

}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	44020c00 	.word	0x44020c00

08006e58 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8006e60:	4b48      	ldr	r3, [pc, #288]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a47      	ldr	r2, [pc, #284]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006e66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e6a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e6c:	f7fa f8c0 	bl	8000ff0 <HAL_GetTick>
 8006e70:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e72:	e008      	b.n	8006e86 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e74:	f7fa f8bc 	bl	8000ff0 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d901      	bls.n	8006e86 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e07a      	b.n	8006f7c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e86:	4b3f      	ldr	r3, [pc, #252]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1f0      	bne.n	8006e74 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006e92:	4b3c      	ldr	r3, [pc, #240]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e96:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006e9a:	f023 0303 	bic.w	r3, r3, #3
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	6811      	ldr	r1, [r2, #0]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	6852      	ldr	r2, [r2, #4]
 8006ea6:	0212      	lsls	r2, r2, #8
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	4936      	ldr	r1, [pc, #216]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	630b      	str	r3, [r1, #48]	@ 0x30
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	025b      	lsls	r3, r3, #9
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	041b      	lsls	r3, r3, #16
 8006ece:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	061b      	lsls	r3, r3, #24
 8006edc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ee0:	4928      	ldr	r1, [pc, #160]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ee6:	4b27      	ldr	r3, [pc, #156]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eea:	f023 020c 	bic.w	r2, r3, #12
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	4924      	ldr	r1, [pc, #144]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8006ef8:	4b22      	ldr	r3, [pc, #136]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006efc:	f023 0220 	bic.w	r2, r3, #32
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	491f      	ldr	r1, [pc, #124]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f12:	491c      	ldr	r1, [pc, #112]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8006f18:	4b1a      	ldr	r3, [pc, #104]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1c:	4a19      	ldr	r2, [pc, #100]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006f1e:	f023 0310 	bic.w	r3, r3, #16
 8006f22:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8006f24:	4b17      	ldr	r3, [pc, #92]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f2c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6a12      	ldr	r2, [r2, #32]
 8006f34:	00d2      	lsls	r2, r2, #3
 8006f36:	4913      	ldr	r1, [pc, #76]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8006f3c:	4b11      	ldr	r3, [pc, #68]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f40:	4a10      	ldr	r2, [pc, #64]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006f42:	f043 0310 	orr.w	r3, r3, #16
 8006f46:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8006f48:	4b0e      	ldr	r3, [pc, #56]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f52:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006f54:	f7fa f84c 	bl	8000ff0 <HAL_GetTick>
 8006f58:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f5a:	e008      	b.n	8006f6e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f5c:	f7fa f848 	bl	8000ff0 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d901      	bls.n	8006f6e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e006      	b.n	8006f7c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f6e:	4b05      	ldr	r3, [pc, #20]	@ (8006f84 <RCCEx_PLL3_Config+0x12c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0f0      	beq.n	8006f5c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	44020c00 	.word	0x44020c00

08006f88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e042      	b.n	8007020 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d106      	bne.n	8006fb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7f9 fd85 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2224      	movs	r2, #36	@ 0x24
 8006fb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0201 	bic.w	r2, r2, #1
 8006fc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fd82 	bl	8007adc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fbd1 	bl	8007780 <UART_SetConfig>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d101      	bne.n	8006fe8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e01b      	b.n	8007020 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ff6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689a      	ldr	r2, [r3, #8]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007006:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0201 	orr.w	r2, r2, #1
 8007016:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fe01 	bl	8007c20 <UART_CheckIdleState>
 800701e:	4603      	mov	r3, r0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08a      	sub	sp, #40	@ 0x28
 800702c:	af02      	add	r7, sp, #8
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	4613      	mov	r3, r2
 8007036:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800703e:	2b20      	cmp	r3, #32
 8007040:	f040 808b 	bne.w	800715a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d002      	beq.n	8007050 <HAL_UART_Transmit+0x28>
 800704a:	88fb      	ldrh	r3, [r7, #6]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e083      	b.n	800715c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800705e:	2b80      	cmp	r3, #128	@ 0x80
 8007060:	d107      	bne.n	8007072 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007070:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2221      	movs	r2, #33	@ 0x21
 800707e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007082:	f7f9 ffb5 	bl	8000ff0 <HAL_GetTick>
 8007086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	88fa      	ldrh	r2, [r7, #6]
 800708c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	88fa      	ldrh	r2, [r7, #6]
 8007094:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070a0:	d108      	bne.n	80070b4 <HAL_UART_Transmit+0x8c>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d104      	bne.n	80070b4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	61bb      	str	r3, [r7, #24]
 80070b2:	e003      	b.n	80070bc <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070bc:	e030      	b.n	8007120 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2200      	movs	r2, #0
 80070c6:	2180      	movs	r1, #128	@ 0x80
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fe53 	bl	8007d74 <UART_WaitOnFlagUntilTimeout>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2220      	movs	r2, #32
 80070d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e03d      	b.n	800715c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10b      	bne.n	80070fe <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	3302      	adds	r3, #2
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	e007      	b.n	800710e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	781a      	ldrb	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	3301      	adds	r3, #1
 800710c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007114:	b29b      	uxth	r3, r3
 8007116:	3b01      	subs	r3, #1
 8007118:	b29a      	uxth	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007126:	b29b      	uxth	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1c8      	bne.n	80070be <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	2200      	movs	r2, #0
 8007134:	2140      	movs	r1, #64	@ 0x40
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 fe1c 	bl	8007d74 <UART_WaitOnFlagUntilTimeout>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d005      	beq.n	800714e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2220      	movs	r2, #32
 8007146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e006      	b.n	800715c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2220      	movs	r2, #32
 8007152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	e000      	b.n	800715c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800715a:	2302      	movs	r3, #2
  }
}
 800715c:	4618      	mov	r0, r3
 800715e:	3720      	adds	r7, #32
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b0ae      	sub	sp, #184	@ 0xb8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800718a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800718e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007192:	4013      	ands	r3, r2
 8007194:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8007198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800719c:	2b00      	cmp	r3, #0
 800719e:	d11b      	bne.n	80071d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d015      	beq.n	80071d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d105      	bne.n	80071c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d009      	beq.n	80071d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 82ac 	beq.w	8007726 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	4798      	blx	r3
      }
      return;
 80071d6:	e2a6      	b.n	8007726 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80071d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 80fd 	beq.w	80073dc <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80071e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80071e6:	4b7a      	ldr	r3, [pc, #488]	@ (80073d0 <HAL_UART_IRQHandler+0x26c>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d106      	bne.n	80071fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80071ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80071f2:	4b78      	ldr	r3, [pc, #480]	@ (80073d4 <HAL_UART_IRQHandler+0x270>)
 80071f4:	4013      	ands	r3, r2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 80f0 	beq.w	80073dc <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d011      	beq.n	800722c <HAL_UART_IRQHandler+0xc8>
 8007208:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800720c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00b      	beq.n	800722c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2201      	movs	r2, #1
 800721a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007222:	f043 0201 	orr.w	r2, r3, #1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800722c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d011      	beq.n	800725c <HAL_UART_IRQHandler+0xf8>
 8007238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2202      	movs	r2, #2
 800724a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007252:	f043 0204 	orr.w	r2, r3, #4
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800725c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007260:	f003 0304 	and.w	r3, r3, #4
 8007264:	2b00      	cmp	r3, #0
 8007266:	d011      	beq.n	800728c <HAL_UART_IRQHandler+0x128>
 8007268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2204      	movs	r2, #4
 800727a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007282:	f043 0202 	orr.w	r2, r3, #2
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800728c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007290:	f003 0308 	and.w	r3, r3, #8
 8007294:	2b00      	cmp	r3, #0
 8007296:	d017      	beq.n	80072c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007298:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d105      	bne.n	80072b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80072a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80072a8:	4b49      	ldr	r3, [pc, #292]	@ (80073d0 <HAL_UART_IRQHandler+0x26c>)
 80072aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00b      	beq.n	80072c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2208      	movs	r2, #8
 80072b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072be:	f043 0208 	orr.w	r2, r3, #8
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d012      	beq.n	80072fa <HAL_UART_IRQHandler+0x196>
 80072d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80072d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00c      	beq.n	80072fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072f0:	f043 0220 	orr.w	r2, r3, #32
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 8212 	beq.w	800772a <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007306:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800730a:	f003 0320 	and.w	r3, r3, #32
 800730e:	2b00      	cmp	r3, #0
 8007310:	d013      	beq.n	800733a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007312:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007316:	f003 0320 	and.w	r3, r3, #32
 800731a:	2b00      	cmp	r3, #0
 800731c:	d105      	bne.n	800732a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800731e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d007      	beq.n	800733a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007340:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800734e:	2b40      	cmp	r3, #64	@ 0x40
 8007350:	d005      	beq.n	800735e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007352:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007356:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800735a:	2b00      	cmp	r3, #0
 800735c:	d02e      	beq.n	80073bc <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fd75 	bl	8007e4e <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800736e:	2b40      	cmp	r3, #64	@ 0x40
 8007370:	d120      	bne.n	80073b4 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007378:	2b00      	cmp	r3, #0
 800737a:	d017      	beq.n	80073ac <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007382:	4a15      	ldr	r2, [pc, #84]	@ (80073d8 <HAL_UART_IRQHandler+0x274>)
 8007384:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800738c:	4618      	mov	r0, r3
 800738e:	f7fb fa43 	bl	8002818 <HAL_DMA_Abort_IT>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d019      	beq.n	80073cc <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800739e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80073a6:	4610      	mov	r0, r2
 80073a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073aa:	e00f      	b.n	80073cc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f9d1 	bl	8007754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b2:	e00b      	b.n	80073cc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f9cd 	bl	8007754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ba:	e007      	b.n	80073cc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f9c9 	bl	8007754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80073ca:	e1ae      	b.n	800772a <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073cc:	bf00      	nop
    return;
 80073ce:	e1ac      	b.n	800772a <HAL_UART_IRQHandler+0x5c6>
 80073d0:	10000001 	.word	0x10000001
 80073d4:	04000120 	.word	0x04000120
 80073d8:	08007f1b 	.word	0x08007f1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	f040 8142 	bne.w	800766a <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80073e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073ea:	f003 0310 	and.w	r3, r3, #16
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 813b 	beq.w	800766a <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80073f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80073f8:	f003 0310 	and.w	r3, r3, #16
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 8134 	beq.w	800766a <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2210      	movs	r2, #16
 8007408:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007414:	2b40      	cmp	r3, #64	@ 0x40
 8007416:	f040 80aa 	bne.w	800756e <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007424:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8007428:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8084 	beq.w	800753a <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007438:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800743c:	429a      	cmp	r2, r3
 800743e:	d27c      	bcs.n	800753a <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007446:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007452:	2b81      	cmp	r3, #129	@ 0x81
 8007454:	d060      	beq.n	8007518 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800745e:	e853 3f00 	ldrex	r3, [r3]
 8007462:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007464:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007466:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800746a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007478:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800747c:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007480:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007484:	e841 2300 	strex	r3, r2, [r1]
 8007488:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800748a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1e2      	bne.n	8007456 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3308      	adds	r3, #8
 8007496:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80074a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074a2:	f023 0301 	bic.w	r3, r3, #1
 80074a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3308      	adds	r3, #8
 80074b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80074b4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80074b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80074ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80074bc:	e841 2300 	strex	r3, r2, [r1]
 80074c0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80074c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e3      	bne.n	8007490 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2220      	movs	r2, #32
 80074cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074de:	e853 3f00 	ldrex	r3, [r3]
 80074e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074e6:	f023 0310 	bic.w	r3, r3, #16
 80074ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074fa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007500:	e841 2300 	strex	r3, r2, [r1]
 8007504:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1e4      	bne.n	80074d6 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007512:	4618      	mov	r0, r3
 8007514:	f7fb f904 	bl	8002720 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800752a:	b29b      	uxth	r3, r3
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	b29b      	uxth	r3, r3
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f918 	bl	8007768 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007538:	e0f9      	b.n	800772e <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007540:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007544:	429a      	cmp	r2, r3
 8007546:	f040 80f2 	bne.w	800772e <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007552:	2b81      	cmp	r3, #129	@ 0x81
 8007554:	f040 80eb 	bne.w	800772e <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007564:	4619      	mov	r1, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f8fe 	bl	8007768 <HAL_UARTEx_RxEventCallback>
      return;
 800756c:	e0df      	b.n	800772e <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800757a:	b29b      	uxth	r3, r3
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 80d1 	beq.w	8007732 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8007590:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 80cc 	beq.w	8007732 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a2:	e853 3f00 	ldrex	r3, [r3]
 80075a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	461a      	mov	r2, r3
 80075b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80075bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80075be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075c4:	e841 2300 	strex	r3, r2, [r1]
 80075c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e4      	bne.n	800759a <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3308      	adds	r3, #8
 80075d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075da:	e853 3f00 	ldrex	r3, [r3]
 80075de:	623b      	str	r3, [r7, #32]
   return(result);
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075e6:	f023 0301 	bic.w	r3, r3, #1
 80075ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3308      	adds	r3, #8
 80075f4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80075f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80075fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007600:	e841 2300 	strex	r3, r2, [r1]
 8007604:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1e1      	bne.n	80075d0 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2220      	movs	r2, #32
 8007610:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	60fb      	str	r3, [r7, #12]
   return(result);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f023 0310 	bic.w	r3, r3, #16
 8007634:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	461a      	mov	r2, r3
 800763e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007642:	61fb      	str	r3, [r7, #28]
 8007644:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	69b9      	ldr	r1, [r7, #24]
 8007648:	69fa      	ldr	r2, [r7, #28]
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	617b      	str	r3, [r7, #20]
   return(result);
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e4      	bne.n	8007620 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2202      	movs	r2, #2
 800765a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800765c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f880 	bl	8007768 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007668:	e063      	b.n	8007732 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800766a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800766e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00e      	beq.n	8007694 <HAL_UART_IRQHandler+0x530>
 8007676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800767a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d008      	beq.n	8007694 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800768a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fc81 	bl	8007f94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007692:	e051      	b.n	8007738 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007694:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800769c:	2b00      	cmp	r3, #0
 800769e:	d014      	beq.n	80076ca <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80076a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80076a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d105      	bne.n	80076b8 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80076ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d008      	beq.n	80076ca <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d03a      	beq.n	8007736 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	4798      	blx	r3
    }
    return;
 80076c8:	e035      	b.n	8007736 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80076ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80076ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d009      	beq.n	80076ea <HAL_UART_IRQHandler+0x586>
 80076d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80076da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fc2b 	bl	8007f3e <UART_EndTransmit_IT>
    return;
 80076e8:	e026      	b.n	8007738 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80076ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80076ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d009      	beq.n	800770a <HAL_UART_IRQHandler+0x5a6>
 80076f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80076fa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d003      	beq.n	800770a <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fc5a 	bl	8007fbc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007708:	e016      	b.n	8007738 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800770a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800770e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d010      	beq.n	8007738 <HAL_UART_IRQHandler+0x5d4>
 8007716:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800771a:	2b00      	cmp	r3, #0
 800771c:	da0c      	bge.n	8007738 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fc42 	bl	8007fa8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007724:	e008      	b.n	8007738 <HAL_UART_IRQHandler+0x5d4>
      return;
 8007726:	bf00      	nop
 8007728:	e006      	b.n	8007738 <HAL_UART_IRQHandler+0x5d4>
    return;
 800772a:	bf00      	nop
 800772c:	e004      	b.n	8007738 <HAL_UART_IRQHandler+0x5d4>
      return;
 800772e:	bf00      	nop
 8007730:	e002      	b.n	8007738 <HAL_UART_IRQHandler+0x5d4>
      return;
 8007732:	bf00      	nop
 8007734:	e000      	b.n	8007738 <HAL_UART_IRQHandler+0x5d4>
    return;
 8007736:	bf00      	nop
  }
}
 8007738:	37b8      	adds	r7, #184	@ 0xb8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop

08007740 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007784:	b094      	sub	sp, #80	@ 0x50
 8007786:	af00      	add	r7, sp, #0
 8007788:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	4b83      	ldr	r3, [pc, #524]	@ (80079a4 <UART_SetConfig+0x224>)
 8007796:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779a:	689a      	ldr	r2, [r3, #8]
 800779c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	431a      	orrs	r2, r3
 80077a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	431a      	orrs	r2, r3
 80077a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	497c      	ldr	r1, [pc, #496]	@ (80079a8 <UART_SetConfig+0x228>)
 80077b8:	4019      	ands	r1, r3
 80077ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077c0:	430b      	orrs	r3, r1
 80077c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80077ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d0:	68d9      	ldr	r1, [r3, #12]
 80077d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	ea40 0301 	orr.w	r3, r0, r1
 80077da:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	4b6f      	ldr	r3, [pc, #444]	@ (80079a4 <UART_SetConfig+0x224>)
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d009      	beq.n	8007800 <UART_SetConfig+0x80>
 80077ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	4b6e      	ldr	r3, [pc, #440]	@ (80079ac <UART_SetConfig+0x22c>)
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d004      	beq.n	8007800 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f8:	6a1a      	ldr	r2, [r3, #32]
 80077fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077fc:	4313      	orrs	r3, r2
 80077fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800780a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800780e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007814:	430b      	orrs	r3, r1
 8007816:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781e:	f023 000f 	bic.w	r0, r3, #15
 8007822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007824:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	ea40 0301 	orr.w	r3, r0, r1
 800782e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	4b5e      	ldr	r3, [pc, #376]	@ (80079b0 <UART_SetConfig+0x230>)
 8007836:	429a      	cmp	r2, r3
 8007838:	d102      	bne.n	8007840 <UART_SetConfig+0xc0>
 800783a:	2301      	movs	r3, #1
 800783c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800783e:	e032      	b.n	80078a6 <UART_SetConfig+0x126>
 8007840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	4b5b      	ldr	r3, [pc, #364]	@ (80079b4 <UART_SetConfig+0x234>)
 8007846:	429a      	cmp	r2, r3
 8007848:	d102      	bne.n	8007850 <UART_SetConfig+0xd0>
 800784a:	2302      	movs	r3, #2
 800784c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800784e:	e02a      	b.n	80078a6 <UART_SetConfig+0x126>
 8007850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	4b58      	ldr	r3, [pc, #352]	@ (80079b8 <UART_SetConfig+0x238>)
 8007856:	429a      	cmp	r2, r3
 8007858:	d102      	bne.n	8007860 <UART_SetConfig+0xe0>
 800785a:	2304      	movs	r3, #4
 800785c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800785e:	e022      	b.n	80078a6 <UART_SetConfig+0x126>
 8007860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	4b55      	ldr	r3, [pc, #340]	@ (80079bc <UART_SetConfig+0x23c>)
 8007866:	429a      	cmp	r2, r3
 8007868:	d102      	bne.n	8007870 <UART_SetConfig+0xf0>
 800786a:	2308      	movs	r3, #8
 800786c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800786e:	e01a      	b.n	80078a6 <UART_SetConfig+0x126>
 8007870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	4b52      	ldr	r3, [pc, #328]	@ (80079c0 <UART_SetConfig+0x240>)
 8007876:	429a      	cmp	r2, r3
 8007878:	d102      	bne.n	8007880 <UART_SetConfig+0x100>
 800787a:	2310      	movs	r3, #16
 800787c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800787e:	e012      	b.n	80078a6 <UART_SetConfig+0x126>
 8007880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	4b4f      	ldr	r3, [pc, #316]	@ (80079c4 <UART_SetConfig+0x244>)
 8007886:	429a      	cmp	r2, r3
 8007888:	d102      	bne.n	8007890 <UART_SetConfig+0x110>
 800788a:	2320      	movs	r3, #32
 800788c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800788e:	e00a      	b.n	80078a6 <UART_SetConfig+0x126>
 8007890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	4b43      	ldr	r3, [pc, #268]	@ (80079a4 <UART_SetConfig+0x224>)
 8007896:	429a      	cmp	r2, r3
 8007898:	d103      	bne.n	80078a2 <UART_SetConfig+0x122>
 800789a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800789e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078a0:	e001      	b.n	80078a6 <UART_SetConfig+0x126>
 80078a2:	2300      	movs	r3, #0
 80078a4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	4b3e      	ldr	r3, [pc, #248]	@ (80079a4 <UART_SetConfig+0x224>)
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d005      	beq.n	80078bc <UART_SetConfig+0x13c>
 80078b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	4b3d      	ldr	r3, [pc, #244]	@ (80079ac <UART_SetConfig+0x22c>)
 80078b6:	429a      	cmp	r2, r3
 80078b8:	f040 8088 	bne.w	80079cc <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80078bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078be:	2200      	movs	r2, #0
 80078c0:	623b      	str	r3, [r7, #32]
 80078c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80078c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80078c8:	f7fd fede 	bl	8005688 <HAL_RCCEx_GetPeriphCLKFreq>
 80078cc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80078ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 80eb 	beq.w	8007aac <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078da:	4a3b      	ldr	r2, [pc, #236]	@ (80079c8 <UART_SetConfig+0x248>)
 80078dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078e0:	461a      	mov	r2, r3
 80078e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80078e8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	4613      	mov	r3, r2
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	4413      	add	r3, r2
 80078f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d305      	bcc.n	8007906 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007900:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007902:	429a      	cmp	r2, r3
 8007904:	d903      	bls.n	800790e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800790c:	e048      	b.n	80079a0 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800790e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007910:	2200      	movs	r2, #0
 8007912:	61bb      	str	r3, [r7, #24]
 8007914:	61fa      	str	r2, [r7, #28]
 8007916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800791a:	4a2b      	ldr	r2, [pc, #172]	@ (80079c8 <UART_SetConfig+0x248>)
 800791c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007920:	b29b      	uxth	r3, r3
 8007922:	2200      	movs	r2, #0
 8007924:	613b      	str	r3, [r7, #16]
 8007926:	617a      	str	r2, [r7, #20]
 8007928:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800792c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007930:	f7f8 fcb8 	bl	80002a4 <__aeabi_uldivmod>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	4610      	mov	r0, r2
 800793a:	4619      	mov	r1, r3
 800793c:	f04f 0200 	mov.w	r2, #0
 8007940:	f04f 0300 	mov.w	r3, #0
 8007944:	020b      	lsls	r3, r1, #8
 8007946:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800794a:	0202      	lsls	r2, r0, #8
 800794c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800794e:	6849      	ldr	r1, [r1, #4]
 8007950:	0849      	lsrs	r1, r1, #1
 8007952:	2000      	movs	r0, #0
 8007954:	460c      	mov	r4, r1
 8007956:	4605      	mov	r5, r0
 8007958:	eb12 0804 	adds.w	r8, r2, r4
 800795c:	eb43 0905 	adc.w	r9, r3, r5
 8007960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	60bb      	str	r3, [r7, #8]
 8007968:	60fa      	str	r2, [r7, #12]
 800796a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800796e:	4640      	mov	r0, r8
 8007970:	4649      	mov	r1, r9
 8007972:	f7f8 fc97 	bl	80002a4 <__aeabi_uldivmod>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	4613      	mov	r3, r2
 800797c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800797e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007980:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007984:	d308      	bcc.n	8007998 <UART_SetConfig+0x218>
 8007986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007988:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800798c:	d204      	bcs.n	8007998 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800798e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007994:	60da      	str	r2, [r3, #12]
 8007996:	e003      	b.n	80079a0 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800799e:	e085      	b.n	8007aac <UART_SetConfig+0x32c>
 80079a0:	e084      	b.n	8007aac <UART_SetConfig+0x32c>
 80079a2:	bf00      	nop
 80079a4:	44002400 	.word	0x44002400
 80079a8:	cfff69f3 	.word	0xcfff69f3
 80079ac:	54002400 	.word	0x54002400
 80079b0:	40013800 	.word	0x40013800
 80079b4:	40004400 	.word	0x40004400
 80079b8:	40004800 	.word	0x40004800
 80079bc:	40004c00 	.word	0x40004c00
 80079c0:	40005000 	.word	0x40005000
 80079c4:	40006400 	.word	0x40006400
 80079c8:	08008b74 	.word	0x08008b74
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079d4:	d13c      	bne.n	8007a50 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80079d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079d8:	2200      	movs	r2, #0
 80079da:	603b      	str	r3, [r7, #0]
 80079dc:	607a      	str	r2, [r7, #4]
 80079de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079e2:	f7fd fe51 	bl	8005688 <HAL_RCCEx_GetPeriphCLKFreq>
 80079e6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d05e      	beq.n	8007aac <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f2:	4a39      	ldr	r2, [pc, #228]	@ (8007ad8 <UART_SetConfig+0x358>)
 80079f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079f8:	461a      	mov	r2, r3
 80079fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a00:	005a      	lsls	r2, r3, #1
 8007a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	085b      	lsrs	r3, r3, #1
 8007a08:	441a      	add	r2, r3
 8007a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a16:	2b0f      	cmp	r3, #15
 8007a18:	d916      	bls.n	8007a48 <UART_SetConfig+0x2c8>
 8007a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a20:	d212      	bcs.n	8007a48 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	f023 030f 	bic.w	r3, r3, #15
 8007a2a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a2e:	085b      	lsrs	r3, r3, #1
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	f003 0307 	and.w	r3, r3, #7
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8007a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8007a44:	60da      	str	r2, [r3, #12]
 8007a46:	e031      	b.n	8007aac <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007a4e:	e02d      	b.n	8007aac <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007a50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a52:	2200      	movs	r2, #0
 8007a54:	469a      	mov	sl, r3
 8007a56:	4693      	mov	fp, r2
 8007a58:	4650      	mov	r0, sl
 8007a5a:	4659      	mov	r1, fp
 8007a5c:	f7fd fe14 	bl	8005688 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a60:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8007a62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d021      	beq.n	8007aac <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8007ad8 <UART_SetConfig+0x358>)
 8007a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a72:	461a      	mov	r2, r3
 8007a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a76:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	085b      	lsrs	r3, r3, #1
 8007a80:	441a      	add	r2, r3
 8007a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a8e:	2b0f      	cmp	r3, #15
 8007a90:	d909      	bls.n	8007aa6 <UART_SetConfig+0x326>
 8007a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a98:	d205      	bcs.n	8007aa6 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	60da      	str	r2, [r3, #12]
 8007aa4:	e002      	b.n	8007aac <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007abe:	2200      	movs	r2, #0
 8007ac0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007ac8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3750      	adds	r7, #80	@ 0x50
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ad6:	bf00      	nop
 8007ad8:	08008b74 	.word	0x08008b74

08007adc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae8:	f003 0308 	and.w	r3, r3, #8
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2c:	f003 0302 	and.w	r3, r3, #2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00a      	beq.n	8007b4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4e:	f003 0304 	and.w	r3, r3, #4
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b70:	f003 0310 	and.w	r3, r3, #16
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00a      	beq.n	8007b8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d01a      	beq.n	8007bf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bda:	d10a      	bne.n	8007bf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	430a      	orrs	r2, r1
 8007c12:	605a      	str	r2, [r3, #4]
  }
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b098      	sub	sp, #96	@ 0x60
 8007c24:	af02      	add	r7, sp, #8
 8007c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c30:	f7f9 f9de 	bl	8000ff0 <HAL_GetTick>
 8007c34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0308 	and.w	r3, r3, #8
 8007c40:	2b08      	cmp	r3, #8
 8007c42:	d12f      	bne.n	8007ca4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f88e 	bl	8007d74 <UART_WaitOnFlagUntilTimeout>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d022      	beq.n	8007ca4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c72:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c84:	e841 2300 	strex	r3, r2, [r1]
 8007c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e6      	bne.n	8007c5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2220      	movs	r2, #32
 8007c94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e063      	b.n	8007d6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0304 	and.w	r3, r3, #4
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d149      	bne.n	8007d46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cb2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f857 	bl	8007d74 <UART_WaitOnFlagUntilTimeout>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d03c      	beq.n	8007d46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cea:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cf2:	e841 2300 	strex	r3, r2, [r1]
 8007cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1e6      	bne.n	8007ccc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3308      	adds	r3, #8
 8007d04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f023 0301 	bic.w	r3, r3, #1
 8007d14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d1e:	61fa      	str	r2, [r7, #28]
 8007d20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d22:	69b9      	ldr	r1, [r7, #24]
 8007d24:	69fa      	ldr	r2, [r7, #28]
 8007d26:	e841 2300 	strex	r3, r2, [r1]
 8007d2a:	617b      	str	r3, [r7, #20]
   return(result);
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e5      	bne.n	8007cfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2220      	movs	r2, #32
 8007d36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e012      	b.n	8007d6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3758      	adds	r7, #88	@ 0x58
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	603b      	str	r3, [r7, #0]
 8007d80:	4613      	mov	r3, r2
 8007d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d84:	e04f      	b.n	8007e26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d8c:	d04b      	beq.n	8007e26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d8e:	f7f9 f92f 	bl	8000ff0 <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d302      	bcc.n	8007da4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e04e      	b.n	8007e46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0304 	and.w	r3, r3, #4
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d037      	beq.n	8007e26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b80      	cmp	r3, #128	@ 0x80
 8007dba:	d034      	beq.n	8007e26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2b40      	cmp	r3, #64	@ 0x40
 8007dc0:	d031      	beq.n	8007e26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	f003 0308 	and.w	r3, r3, #8
 8007dcc:	2b08      	cmp	r3, #8
 8007dce:	d110      	bne.n	8007df2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2208      	movs	r2, #8
 8007dd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 f838 	bl	8007e4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2208      	movs	r2, #8
 8007de2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e029      	b.n	8007e46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69db      	ldr	r3, [r3, #28]
 8007df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e00:	d111      	bne.n	8007e26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 f81e 	bl	8007e4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e00f      	b.n	8007e46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	69da      	ldr	r2, [r3, #28]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	bf0c      	ite	eq
 8007e36:	2301      	moveq	r3, #1
 8007e38:	2300      	movne	r3, #0
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d0a0      	beq.n	8007d86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b095      	sub	sp, #84	@ 0x54
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e5e:	e853 3f00 	ldrex	r3, [r3]
 8007e62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	461a      	mov	r2, r3
 8007e72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e74:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e7c:	e841 2300 	strex	r3, r2, [r1]
 8007e80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1e6      	bne.n	8007e56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	e853 3f00 	ldrex	r3, [r3]
 8007e96:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e9e:	f023 0301 	bic.w	r3, r3, #1
 8007ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	3308      	adds	r3, #8
 8007eaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007eac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007eae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007eb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007eb4:	e841 2300 	strex	r3, r2, [r1]
 8007eb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1e3      	bne.n	8007e88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d118      	bne.n	8007efa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	e853 3f00 	ldrex	r3, [r3]
 8007ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	f023 0310 	bic.w	r3, r3, #16
 8007edc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ee6:	61bb      	str	r3, [r7, #24]
 8007ee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eea:	6979      	ldr	r1, [r7, #20]
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	e841 2300 	strex	r3, r2, [r1]
 8007ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1e6      	bne.n	8007ec8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f0e:	bf00      	nop
 8007f10:	3754      	adds	r7, #84	@ 0x54
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f7ff fc0f 	bl	8007754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f36:	bf00      	nop
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b088      	sub	sp, #32
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	e853 3f00 	ldrex	r3, [r3]
 8007f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f5a:	61fb      	str	r3, [r7, #28]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	461a      	mov	r2, r3
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	61bb      	str	r3, [r7, #24]
 8007f66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	6979      	ldr	r1, [r7, #20]
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	e841 2300 	strex	r3, r2, [r1]
 8007f70:	613b      	str	r3, [r7, #16]
   return(result);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e6      	bne.n	8007f46 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff fbda 	bl	8007740 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f8c:	bf00      	nop
 8007f8e:	3720      	adds	r7, #32
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d101      	bne.n	8007fe6 <HAL_UARTEx_DisableFifoMode+0x16>
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	e027      	b.n	8008036 <HAL_UARTEx_DisableFifoMode+0x66>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2224      	movs	r2, #36	@ 0x24
 8007ff2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 0201 	bic.w	r2, r2, #1
 800800c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008014:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2220      	movs	r2, #32
 8008028:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008052:	2b01      	cmp	r3, #1
 8008054:	d101      	bne.n	800805a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008056:	2302      	movs	r3, #2
 8008058:	e02d      	b.n	80080b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2224      	movs	r2, #36	@ 0x24
 8008066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0201 	bic.w	r2, r2, #1
 8008080:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f850 	bl	800813c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2220      	movs	r2, #32
 80080a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d101      	bne.n	80080d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080d2:	2302      	movs	r3, #2
 80080d4:	e02d      	b.n	8008132 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2224      	movs	r2, #36	@ 0x24
 80080e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 0201 	bic.w	r2, r2, #1
 80080fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	430a      	orrs	r2, r1
 8008110:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f812 	bl	800813c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2220      	movs	r2, #32
 8008124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008148:	2b00      	cmp	r3, #0
 800814a:	d108      	bne.n	800815e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800815c:	e031      	b.n	80081c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800815e:	2308      	movs	r3, #8
 8008160:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008162:	2308      	movs	r3, #8
 8008164:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	0e5b      	lsrs	r3, r3, #25
 800816e:	b2db      	uxtb	r3, r3
 8008170:	f003 0307 	and.w	r3, r3, #7
 8008174:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	0f5b      	lsrs	r3, r3, #29
 800817e:	b2db      	uxtb	r3, r3
 8008180:	f003 0307 	and.w	r3, r3, #7
 8008184:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	7b3a      	ldrb	r2, [r7, #12]
 800818a:	4911      	ldr	r1, [pc, #68]	@ (80081d0 <UARTEx_SetNbDataToProcess+0x94>)
 800818c:	5c8a      	ldrb	r2, [r1, r2]
 800818e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008192:	7b3a      	ldrb	r2, [r7, #12]
 8008194:	490f      	ldr	r1, [pc, #60]	@ (80081d4 <UARTEx_SetNbDataToProcess+0x98>)
 8008196:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008198:	fb93 f3f2 	sdiv	r3, r3, r2
 800819c:	b29a      	uxth	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	7b7a      	ldrb	r2, [r7, #13]
 80081a8:	4909      	ldr	r1, [pc, #36]	@ (80081d0 <UARTEx_SetNbDataToProcess+0x94>)
 80081aa:	5c8a      	ldrb	r2, [r1, r2]
 80081ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081b0:	7b7a      	ldrb	r2, [r7, #13]
 80081b2:	4908      	ldr	r1, [pc, #32]	@ (80081d4 <UARTEx_SetNbDataToProcess+0x98>)
 80081b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80081c2:	bf00      	nop
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	08008b8c 	.word	0x08008b8c
 80081d4:	08008b94 	.word	0x08008b94

080081d8 <siprintf>:
 80081d8:	b40e      	push	{r1, r2, r3}
 80081da:	b510      	push	{r4, lr}
 80081dc:	b09d      	sub	sp, #116	@ 0x74
 80081de:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80081e2:	2400      	movs	r4, #0
 80081e4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80081e6:	9002      	str	r0, [sp, #8]
 80081e8:	9006      	str	r0, [sp, #24]
 80081ea:	9107      	str	r1, [sp, #28]
 80081ec:	9104      	str	r1, [sp, #16]
 80081ee:	4809      	ldr	r0, [pc, #36]	@ (8008214 <siprintf+0x3c>)
 80081f0:	4909      	ldr	r1, [pc, #36]	@ (8008218 <siprintf+0x40>)
 80081f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80081f6:	9105      	str	r1, [sp, #20]
 80081f8:	a902      	add	r1, sp, #8
 80081fa:	6800      	ldr	r0, [r0, #0]
 80081fc:	9301      	str	r3, [sp, #4]
 80081fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008200:	f000 f89c 	bl	800833c <_svfiprintf_r>
 8008204:	9b02      	ldr	r3, [sp, #8]
 8008206:	701c      	strb	r4, [r3, #0]
 8008208:	b01d      	add	sp, #116	@ 0x74
 800820a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800820e:	b003      	add	sp, #12
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	2000000c 	.word	0x2000000c
 8008218:	ffff0208 	.word	0xffff0208

0800821c <memset>:
 800821c:	4402      	add	r2, r0
 800821e:	4603      	mov	r3, r0
 8008220:	4293      	cmp	r3, r2
 8008222:	d100      	bne.n	8008226 <memset+0xa>
 8008224:	4770      	bx	lr
 8008226:	f803 1b01 	strb.w	r1, [r3], #1
 800822a:	e7f9      	b.n	8008220 <memset+0x4>

0800822c <__errno>:
 800822c:	4b01      	ldr	r3, [pc, #4]	@ (8008234 <__errno+0x8>)
 800822e:	6818      	ldr	r0, [r3, #0]
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	2000000c 	.word	0x2000000c

08008238 <__libc_init_array>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	4d0d      	ldr	r5, [pc, #52]	@ (8008270 <__libc_init_array+0x38>)
 800823c:	2600      	movs	r6, #0
 800823e:	4c0d      	ldr	r4, [pc, #52]	@ (8008274 <__libc_init_array+0x3c>)
 8008240:	1b64      	subs	r4, r4, r5
 8008242:	10a4      	asrs	r4, r4, #2
 8008244:	42a6      	cmp	r6, r4
 8008246:	d109      	bne.n	800825c <__libc_init_array+0x24>
 8008248:	4d0b      	ldr	r5, [pc, #44]	@ (8008278 <__libc_init_array+0x40>)
 800824a:	2600      	movs	r6, #0
 800824c:	4c0b      	ldr	r4, [pc, #44]	@ (800827c <__libc_init_array+0x44>)
 800824e:	f000 fc75 	bl	8008b3c <_init>
 8008252:	1b64      	subs	r4, r4, r5
 8008254:	10a4      	asrs	r4, r4, #2
 8008256:	42a6      	cmp	r6, r4
 8008258:	d105      	bne.n	8008266 <__libc_init_array+0x2e>
 800825a:	bd70      	pop	{r4, r5, r6, pc}
 800825c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008260:	3601      	adds	r6, #1
 8008262:	4798      	blx	r3
 8008264:	e7ee      	b.n	8008244 <__libc_init_array+0xc>
 8008266:	f855 3b04 	ldr.w	r3, [r5], #4
 800826a:	3601      	adds	r6, #1
 800826c:	4798      	blx	r3
 800826e:	e7f2      	b.n	8008256 <__libc_init_array+0x1e>
 8008270:	08008bd8 	.word	0x08008bd8
 8008274:	08008bd8 	.word	0x08008bd8
 8008278:	08008bd8 	.word	0x08008bd8
 800827c:	08008bdc 	.word	0x08008bdc

08008280 <__retarget_lock_acquire_recursive>:
 8008280:	4770      	bx	lr

08008282 <__retarget_lock_release_recursive>:
 8008282:	4770      	bx	lr

08008284 <__ssputs_r>:
 8008284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008288:	461f      	mov	r7, r3
 800828a:	688e      	ldr	r6, [r1, #8]
 800828c:	4682      	mov	sl, r0
 800828e:	460c      	mov	r4, r1
 8008290:	42be      	cmp	r6, r7
 8008292:	4690      	mov	r8, r2
 8008294:	680b      	ldr	r3, [r1, #0]
 8008296:	d82d      	bhi.n	80082f4 <__ssputs_r+0x70>
 8008298:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800829c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80082a0:	d026      	beq.n	80082f0 <__ssputs_r+0x6c>
 80082a2:	6965      	ldr	r5, [r4, #20]
 80082a4:	6909      	ldr	r1, [r1, #16]
 80082a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082aa:	eba3 0901 	sub.w	r9, r3, r1
 80082ae:	1c7b      	adds	r3, r7, #1
 80082b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082b4:	444b      	add	r3, r9
 80082b6:	106d      	asrs	r5, r5, #1
 80082b8:	429d      	cmp	r5, r3
 80082ba:	bf38      	it	cc
 80082bc:	461d      	movcc	r5, r3
 80082be:	0553      	lsls	r3, r2, #21
 80082c0:	d527      	bpl.n	8008312 <__ssputs_r+0x8e>
 80082c2:	4629      	mov	r1, r5
 80082c4:	f000 f958 	bl	8008578 <_malloc_r>
 80082c8:	4606      	mov	r6, r0
 80082ca:	b360      	cbz	r0, 8008326 <__ssputs_r+0xa2>
 80082cc:	464a      	mov	r2, r9
 80082ce:	6921      	ldr	r1, [r4, #16]
 80082d0:	f000 fbd4 	bl	8008a7c <memcpy>
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082de:	81a3      	strh	r3, [r4, #12]
 80082e0:	6126      	str	r6, [r4, #16]
 80082e2:	444e      	add	r6, r9
 80082e4:	6165      	str	r5, [r4, #20]
 80082e6:	eba5 0509 	sub.w	r5, r5, r9
 80082ea:	6026      	str	r6, [r4, #0]
 80082ec:	463e      	mov	r6, r7
 80082ee:	60a5      	str	r5, [r4, #8]
 80082f0:	42be      	cmp	r6, r7
 80082f2:	d900      	bls.n	80082f6 <__ssputs_r+0x72>
 80082f4:	463e      	mov	r6, r7
 80082f6:	4632      	mov	r2, r6
 80082f8:	4641      	mov	r1, r8
 80082fa:	6820      	ldr	r0, [r4, #0]
 80082fc:	f000 fb86 	bl	8008a0c <memmove>
 8008300:	68a3      	ldr	r3, [r4, #8]
 8008302:	2000      	movs	r0, #0
 8008304:	1b9b      	subs	r3, r3, r6
 8008306:	60a3      	str	r3, [r4, #8]
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	4433      	add	r3, r6
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008312:	462a      	mov	r2, r5
 8008314:	f000 fb4c 	bl	80089b0 <_realloc_r>
 8008318:	4606      	mov	r6, r0
 800831a:	2800      	cmp	r0, #0
 800831c:	d1e0      	bne.n	80082e0 <__ssputs_r+0x5c>
 800831e:	6921      	ldr	r1, [r4, #16]
 8008320:	4650      	mov	r0, sl
 8008322:	f000 fbb9 	bl	8008a98 <_free_r>
 8008326:	230c      	movs	r3, #12
 8008328:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800832c:	f8ca 3000 	str.w	r3, [sl]
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008336:	81a3      	strh	r3, [r4, #12]
 8008338:	e7e9      	b.n	800830e <__ssputs_r+0x8a>
	...

0800833c <_svfiprintf_r>:
 800833c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008340:	4698      	mov	r8, r3
 8008342:	898b      	ldrh	r3, [r1, #12]
 8008344:	b09d      	sub	sp, #116	@ 0x74
 8008346:	4607      	mov	r7, r0
 8008348:	061b      	lsls	r3, r3, #24
 800834a:	460d      	mov	r5, r1
 800834c:	4614      	mov	r4, r2
 800834e:	d510      	bpl.n	8008372 <_svfiprintf_r+0x36>
 8008350:	690b      	ldr	r3, [r1, #16]
 8008352:	b973      	cbnz	r3, 8008372 <_svfiprintf_r+0x36>
 8008354:	2140      	movs	r1, #64	@ 0x40
 8008356:	f000 f90f 	bl	8008578 <_malloc_r>
 800835a:	6028      	str	r0, [r5, #0]
 800835c:	6128      	str	r0, [r5, #16]
 800835e:	b930      	cbnz	r0, 800836e <_svfiprintf_r+0x32>
 8008360:	230c      	movs	r3, #12
 8008362:	603b      	str	r3, [r7, #0]
 8008364:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008368:	b01d      	add	sp, #116	@ 0x74
 800836a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836e:	2340      	movs	r3, #64	@ 0x40
 8008370:	616b      	str	r3, [r5, #20]
 8008372:	2300      	movs	r3, #0
 8008374:	f8cd 800c 	str.w	r8, [sp, #12]
 8008378:	f04f 0901 	mov.w	r9, #1
 800837c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8008520 <_svfiprintf_r+0x1e4>
 8008380:	9309      	str	r3, [sp, #36]	@ 0x24
 8008382:	2320      	movs	r3, #32
 8008384:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008388:	2330      	movs	r3, #48	@ 0x30
 800838a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800838e:	4623      	mov	r3, r4
 8008390:	469a      	mov	sl, r3
 8008392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008396:	b10a      	cbz	r2, 800839c <_svfiprintf_r+0x60>
 8008398:	2a25      	cmp	r2, #37	@ 0x25
 800839a:	d1f9      	bne.n	8008390 <_svfiprintf_r+0x54>
 800839c:	ebba 0b04 	subs.w	fp, sl, r4
 80083a0:	d00b      	beq.n	80083ba <_svfiprintf_r+0x7e>
 80083a2:	465b      	mov	r3, fp
 80083a4:	4622      	mov	r2, r4
 80083a6:	4629      	mov	r1, r5
 80083a8:	4638      	mov	r0, r7
 80083aa:	f7ff ff6b 	bl	8008284 <__ssputs_r>
 80083ae:	3001      	adds	r0, #1
 80083b0:	f000 80a7 	beq.w	8008502 <_svfiprintf_r+0x1c6>
 80083b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083b6:	445a      	add	r2, fp
 80083b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80083ba:	f89a 3000 	ldrb.w	r3, [sl]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f000 809f 	beq.w	8008502 <_svfiprintf_r+0x1c6>
 80083c4:	2300      	movs	r3, #0
 80083c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083ca:	f10a 0a01 	add.w	sl, sl, #1
 80083ce:	9304      	str	r3, [sp, #16]
 80083d0:	9307      	str	r3, [sp, #28]
 80083d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80083d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083dc:	4654      	mov	r4, sl
 80083de:	2205      	movs	r2, #5
 80083e0:	484f      	ldr	r0, [pc, #316]	@ (8008520 <_svfiprintf_r+0x1e4>)
 80083e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083e6:	f000 fb3b 	bl	8008a60 <memchr>
 80083ea:	9a04      	ldr	r2, [sp, #16]
 80083ec:	b9d8      	cbnz	r0, 8008426 <_svfiprintf_r+0xea>
 80083ee:	06d0      	lsls	r0, r2, #27
 80083f0:	bf44      	itt	mi
 80083f2:	2320      	movmi	r3, #32
 80083f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083f8:	0711      	lsls	r1, r2, #28
 80083fa:	bf44      	itt	mi
 80083fc:	232b      	movmi	r3, #43	@ 0x2b
 80083fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008402:	f89a 3000 	ldrb.w	r3, [sl]
 8008406:	2b2a      	cmp	r3, #42	@ 0x2a
 8008408:	d015      	beq.n	8008436 <_svfiprintf_r+0xfa>
 800840a:	9a07      	ldr	r2, [sp, #28]
 800840c:	4654      	mov	r4, sl
 800840e:	2000      	movs	r0, #0
 8008410:	f04f 0c0a 	mov.w	ip, #10
 8008414:	4621      	mov	r1, r4
 8008416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800841a:	3b30      	subs	r3, #48	@ 0x30
 800841c:	2b09      	cmp	r3, #9
 800841e:	d94b      	bls.n	80084b8 <_svfiprintf_r+0x17c>
 8008420:	b1b0      	cbz	r0, 8008450 <_svfiprintf_r+0x114>
 8008422:	9207      	str	r2, [sp, #28]
 8008424:	e014      	b.n	8008450 <_svfiprintf_r+0x114>
 8008426:	eba0 0308 	sub.w	r3, r0, r8
 800842a:	46a2      	mov	sl, r4
 800842c:	fa09 f303 	lsl.w	r3, r9, r3
 8008430:	4313      	orrs	r3, r2
 8008432:	9304      	str	r3, [sp, #16]
 8008434:	e7d2      	b.n	80083dc <_svfiprintf_r+0xa0>
 8008436:	9b03      	ldr	r3, [sp, #12]
 8008438:	1d19      	adds	r1, r3, #4
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	9103      	str	r1, [sp, #12]
 8008440:	bfbb      	ittet	lt
 8008442:	425b      	neglt	r3, r3
 8008444:	f042 0202 	orrlt.w	r2, r2, #2
 8008448:	9307      	strge	r3, [sp, #28]
 800844a:	9307      	strlt	r3, [sp, #28]
 800844c:	bfb8      	it	lt
 800844e:	9204      	strlt	r2, [sp, #16]
 8008450:	7823      	ldrb	r3, [r4, #0]
 8008452:	2b2e      	cmp	r3, #46	@ 0x2e
 8008454:	d10a      	bne.n	800846c <_svfiprintf_r+0x130>
 8008456:	7863      	ldrb	r3, [r4, #1]
 8008458:	2b2a      	cmp	r3, #42	@ 0x2a
 800845a:	d132      	bne.n	80084c2 <_svfiprintf_r+0x186>
 800845c:	9b03      	ldr	r3, [sp, #12]
 800845e:	3402      	adds	r4, #2
 8008460:	1d1a      	adds	r2, r3, #4
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008468:	9203      	str	r2, [sp, #12]
 800846a:	9305      	str	r3, [sp, #20]
 800846c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008530 <_svfiprintf_r+0x1f4>
 8008470:	2203      	movs	r2, #3
 8008472:	7821      	ldrb	r1, [r4, #0]
 8008474:	4650      	mov	r0, sl
 8008476:	f000 faf3 	bl	8008a60 <memchr>
 800847a:	b138      	cbz	r0, 800848c <_svfiprintf_r+0x150>
 800847c:	eba0 000a 	sub.w	r0, r0, sl
 8008480:	2240      	movs	r2, #64	@ 0x40
 8008482:	9b04      	ldr	r3, [sp, #16]
 8008484:	3401      	adds	r4, #1
 8008486:	4082      	lsls	r2, r0
 8008488:	4313      	orrs	r3, r2
 800848a:	9304      	str	r3, [sp, #16]
 800848c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008490:	2206      	movs	r2, #6
 8008492:	4824      	ldr	r0, [pc, #144]	@ (8008524 <_svfiprintf_r+0x1e8>)
 8008494:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008498:	f000 fae2 	bl	8008a60 <memchr>
 800849c:	2800      	cmp	r0, #0
 800849e:	d036      	beq.n	800850e <_svfiprintf_r+0x1d2>
 80084a0:	4b21      	ldr	r3, [pc, #132]	@ (8008528 <_svfiprintf_r+0x1ec>)
 80084a2:	bb1b      	cbnz	r3, 80084ec <_svfiprintf_r+0x1b0>
 80084a4:	9b03      	ldr	r3, [sp, #12]
 80084a6:	3307      	adds	r3, #7
 80084a8:	f023 0307 	bic.w	r3, r3, #7
 80084ac:	3308      	adds	r3, #8
 80084ae:	9303      	str	r3, [sp, #12]
 80084b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084b2:	4433      	add	r3, r6
 80084b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084b6:	e76a      	b.n	800838e <_svfiprintf_r+0x52>
 80084b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80084bc:	460c      	mov	r4, r1
 80084be:	2001      	movs	r0, #1
 80084c0:	e7a8      	b.n	8008414 <_svfiprintf_r+0xd8>
 80084c2:	2300      	movs	r3, #0
 80084c4:	3401      	adds	r4, #1
 80084c6:	f04f 0c0a 	mov.w	ip, #10
 80084ca:	4619      	mov	r1, r3
 80084cc:	9305      	str	r3, [sp, #20]
 80084ce:	4620      	mov	r0, r4
 80084d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084d4:	3a30      	subs	r2, #48	@ 0x30
 80084d6:	2a09      	cmp	r2, #9
 80084d8:	d903      	bls.n	80084e2 <_svfiprintf_r+0x1a6>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d0c6      	beq.n	800846c <_svfiprintf_r+0x130>
 80084de:	9105      	str	r1, [sp, #20]
 80084e0:	e7c4      	b.n	800846c <_svfiprintf_r+0x130>
 80084e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80084e6:	4604      	mov	r4, r0
 80084e8:	2301      	movs	r3, #1
 80084ea:	e7f0      	b.n	80084ce <_svfiprintf_r+0x192>
 80084ec:	ab03      	add	r3, sp, #12
 80084ee:	462a      	mov	r2, r5
 80084f0:	a904      	add	r1, sp, #16
 80084f2:	4638      	mov	r0, r7
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	4b0d      	ldr	r3, [pc, #52]	@ (800852c <_svfiprintf_r+0x1f0>)
 80084f8:	f3af 8000 	nop.w
 80084fc:	1c42      	adds	r2, r0, #1
 80084fe:	4606      	mov	r6, r0
 8008500:	d1d6      	bne.n	80084b0 <_svfiprintf_r+0x174>
 8008502:	89ab      	ldrh	r3, [r5, #12]
 8008504:	065b      	lsls	r3, r3, #25
 8008506:	f53f af2d 	bmi.w	8008364 <_svfiprintf_r+0x28>
 800850a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800850c:	e72c      	b.n	8008368 <_svfiprintf_r+0x2c>
 800850e:	ab03      	add	r3, sp, #12
 8008510:	462a      	mov	r2, r5
 8008512:	a904      	add	r1, sp, #16
 8008514:	4638      	mov	r0, r7
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	4b04      	ldr	r3, [pc, #16]	@ (800852c <_svfiprintf_r+0x1f0>)
 800851a:	f000 f91f 	bl	800875c <_printf_i>
 800851e:	e7ed      	b.n	80084fc <_svfiprintf_r+0x1c0>
 8008520:	08008b9c 	.word	0x08008b9c
 8008524:	08008ba6 	.word	0x08008ba6
 8008528:	00000000 	.word	0x00000000
 800852c:	08008285 	.word	0x08008285
 8008530:	08008ba2 	.word	0x08008ba2

08008534 <sbrk_aligned>:
 8008534:	b570      	push	{r4, r5, r6, lr}
 8008536:	4e0f      	ldr	r6, [pc, #60]	@ (8008574 <sbrk_aligned+0x40>)
 8008538:	460c      	mov	r4, r1
 800853a:	4605      	mov	r5, r0
 800853c:	6831      	ldr	r1, [r6, #0]
 800853e:	b911      	cbnz	r1, 8008546 <sbrk_aligned+0x12>
 8008540:	f000 fa7e 	bl	8008a40 <_sbrk_r>
 8008544:	6030      	str	r0, [r6, #0]
 8008546:	4621      	mov	r1, r4
 8008548:	4628      	mov	r0, r5
 800854a:	f000 fa79 	bl	8008a40 <_sbrk_r>
 800854e:	1c43      	adds	r3, r0, #1
 8008550:	d103      	bne.n	800855a <sbrk_aligned+0x26>
 8008552:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008556:	4620      	mov	r0, r4
 8008558:	bd70      	pop	{r4, r5, r6, pc}
 800855a:	1cc4      	adds	r4, r0, #3
 800855c:	f024 0403 	bic.w	r4, r4, #3
 8008560:	42a0      	cmp	r0, r4
 8008562:	d0f8      	beq.n	8008556 <sbrk_aligned+0x22>
 8008564:	1a21      	subs	r1, r4, r0
 8008566:	4628      	mov	r0, r5
 8008568:	f000 fa6a 	bl	8008a40 <_sbrk_r>
 800856c:	3001      	adds	r0, #1
 800856e:	d1f2      	bne.n	8008556 <sbrk_aligned+0x22>
 8008570:	e7ef      	b.n	8008552 <sbrk_aligned+0x1e>
 8008572:	bf00      	nop
 8008574:	2000034c 	.word	0x2000034c

08008578 <_malloc_r>:
 8008578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800857c:	1ccd      	adds	r5, r1, #3
 800857e:	4606      	mov	r6, r0
 8008580:	f025 0503 	bic.w	r5, r5, #3
 8008584:	3508      	adds	r5, #8
 8008586:	2d0c      	cmp	r5, #12
 8008588:	bf38      	it	cc
 800858a:	250c      	movcc	r5, #12
 800858c:	2d00      	cmp	r5, #0
 800858e:	db01      	blt.n	8008594 <_malloc_r+0x1c>
 8008590:	42a9      	cmp	r1, r5
 8008592:	d904      	bls.n	800859e <_malloc_r+0x26>
 8008594:	230c      	movs	r3, #12
 8008596:	6033      	str	r3, [r6, #0]
 8008598:	2000      	movs	r0, #0
 800859a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800859e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008674 <_malloc_r+0xfc>
 80085a2:	f000 f9f9 	bl	8008998 <__malloc_lock>
 80085a6:	f8d8 3000 	ldr.w	r3, [r8]
 80085aa:	461c      	mov	r4, r3
 80085ac:	bb44      	cbnz	r4, 8008600 <_malloc_r+0x88>
 80085ae:	4629      	mov	r1, r5
 80085b0:	4630      	mov	r0, r6
 80085b2:	f7ff ffbf 	bl	8008534 <sbrk_aligned>
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	4604      	mov	r4, r0
 80085ba:	d158      	bne.n	800866e <_malloc_r+0xf6>
 80085bc:	f8d8 4000 	ldr.w	r4, [r8]
 80085c0:	4627      	mov	r7, r4
 80085c2:	2f00      	cmp	r7, #0
 80085c4:	d143      	bne.n	800864e <_malloc_r+0xd6>
 80085c6:	2c00      	cmp	r4, #0
 80085c8:	d04b      	beq.n	8008662 <_malloc_r+0xea>
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	4639      	mov	r1, r7
 80085ce:	4630      	mov	r0, r6
 80085d0:	eb04 0903 	add.w	r9, r4, r3
 80085d4:	f000 fa34 	bl	8008a40 <_sbrk_r>
 80085d8:	4581      	cmp	r9, r0
 80085da:	d142      	bne.n	8008662 <_malloc_r+0xea>
 80085dc:	6821      	ldr	r1, [r4, #0]
 80085de:	4630      	mov	r0, r6
 80085e0:	1a6d      	subs	r5, r5, r1
 80085e2:	4629      	mov	r1, r5
 80085e4:	f7ff ffa6 	bl	8008534 <sbrk_aligned>
 80085e8:	3001      	adds	r0, #1
 80085ea:	d03a      	beq.n	8008662 <_malloc_r+0xea>
 80085ec:	6823      	ldr	r3, [r4, #0]
 80085ee:	442b      	add	r3, r5
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	f8d8 3000 	ldr.w	r3, [r8]
 80085f6:	685a      	ldr	r2, [r3, #4]
 80085f8:	bb62      	cbnz	r2, 8008654 <_malloc_r+0xdc>
 80085fa:	f8c8 7000 	str.w	r7, [r8]
 80085fe:	e00f      	b.n	8008620 <_malloc_r+0xa8>
 8008600:	6822      	ldr	r2, [r4, #0]
 8008602:	1b52      	subs	r2, r2, r5
 8008604:	d420      	bmi.n	8008648 <_malloc_r+0xd0>
 8008606:	2a0b      	cmp	r2, #11
 8008608:	d917      	bls.n	800863a <_malloc_r+0xc2>
 800860a:	1961      	adds	r1, r4, r5
 800860c:	42a3      	cmp	r3, r4
 800860e:	6025      	str	r5, [r4, #0]
 8008610:	bf18      	it	ne
 8008612:	6059      	strne	r1, [r3, #4]
 8008614:	6863      	ldr	r3, [r4, #4]
 8008616:	bf08      	it	eq
 8008618:	f8c8 1000 	streq.w	r1, [r8]
 800861c:	5162      	str	r2, [r4, r5]
 800861e:	604b      	str	r3, [r1, #4]
 8008620:	4630      	mov	r0, r6
 8008622:	f000 f9bf 	bl	80089a4 <__malloc_unlock>
 8008626:	f104 000b 	add.w	r0, r4, #11
 800862a:	1d23      	adds	r3, r4, #4
 800862c:	f020 0007 	bic.w	r0, r0, #7
 8008630:	1ac2      	subs	r2, r0, r3
 8008632:	bf1c      	itt	ne
 8008634:	1a1b      	subne	r3, r3, r0
 8008636:	50a3      	strne	r3, [r4, r2]
 8008638:	e7af      	b.n	800859a <_malloc_r+0x22>
 800863a:	6862      	ldr	r2, [r4, #4]
 800863c:	42a3      	cmp	r3, r4
 800863e:	bf0c      	ite	eq
 8008640:	f8c8 2000 	streq.w	r2, [r8]
 8008644:	605a      	strne	r2, [r3, #4]
 8008646:	e7eb      	b.n	8008620 <_malloc_r+0xa8>
 8008648:	4623      	mov	r3, r4
 800864a:	6864      	ldr	r4, [r4, #4]
 800864c:	e7ae      	b.n	80085ac <_malloc_r+0x34>
 800864e:	463c      	mov	r4, r7
 8008650:	687f      	ldr	r7, [r7, #4]
 8008652:	e7b6      	b.n	80085c2 <_malloc_r+0x4a>
 8008654:	461a      	mov	r2, r3
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	42a3      	cmp	r3, r4
 800865a:	d1fb      	bne.n	8008654 <_malloc_r+0xdc>
 800865c:	2300      	movs	r3, #0
 800865e:	6053      	str	r3, [r2, #4]
 8008660:	e7de      	b.n	8008620 <_malloc_r+0xa8>
 8008662:	230c      	movs	r3, #12
 8008664:	4630      	mov	r0, r6
 8008666:	6033      	str	r3, [r6, #0]
 8008668:	f000 f99c 	bl	80089a4 <__malloc_unlock>
 800866c:	e794      	b.n	8008598 <_malloc_r+0x20>
 800866e:	6005      	str	r5, [r0, #0]
 8008670:	e7d6      	b.n	8008620 <_malloc_r+0xa8>
 8008672:	bf00      	nop
 8008674:	20000350 	.word	0x20000350

08008678 <_printf_common>:
 8008678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800867c:	4616      	mov	r6, r2
 800867e:	4698      	mov	r8, r3
 8008680:	688a      	ldr	r2, [r1, #8]
 8008682:	4607      	mov	r7, r0
 8008684:	690b      	ldr	r3, [r1, #16]
 8008686:	460c      	mov	r4, r1
 8008688:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800868c:	4293      	cmp	r3, r2
 800868e:	bfb8      	it	lt
 8008690:	4613      	movlt	r3, r2
 8008692:	6033      	str	r3, [r6, #0]
 8008694:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008698:	b10a      	cbz	r2, 800869e <_printf_common+0x26>
 800869a:	3301      	adds	r3, #1
 800869c:	6033      	str	r3, [r6, #0]
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	0699      	lsls	r1, r3, #26
 80086a2:	bf42      	ittt	mi
 80086a4:	6833      	ldrmi	r3, [r6, #0]
 80086a6:	3302      	addmi	r3, #2
 80086a8:	6033      	strmi	r3, [r6, #0]
 80086aa:	6825      	ldr	r5, [r4, #0]
 80086ac:	f015 0506 	ands.w	r5, r5, #6
 80086b0:	d106      	bne.n	80086c0 <_printf_common+0x48>
 80086b2:	f104 0a19 	add.w	sl, r4, #25
 80086b6:	68e3      	ldr	r3, [r4, #12]
 80086b8:	6832      	ldr	r2, [r6, #0]
 80086ba:	1a9b      	subs	r3, r3, r2
 80086bc:	42ab      	cmp	r3, r5
 80086be:	dc2b      	bgt.n	8008718 <_printf_common+0xa0>
 80086c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086c4:	6822      	ldr	r2, [r4, #0]
 80086c6:	3b00      	subs	r3, #0
 80086c8:	bf18      	it	ne
 80086ca:	2301      	movne	r3, #1
 80086cc:	0692      	lsls	r2, r2, #26
 80086ce:	d430      	bmi.n	8008732 <_printf_common+0xba>
 80086d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80086d4:	4641      	mov	r1, r8
 80086d6:	4638      	mov	r0, r7
 80086d8:	47c8      	blx	r9
 80086da:	3001      	adds	r0, #1
 80086dc:	d023      	beq.n	8008726 <_printf_common+0xae>
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	341a      	adds	r4, #26
 80086e2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80086e6:	f003 0306 	and.w	r3, r3, #6
 80086ea:	2b04      	cmp	r3, #4
 80086ec:	bf0a      	itet	eq
 80086ee:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80086f2:	2500      	movne	r5, #0
 80086f4:	6833      	ldreq	r3, [r6, #0]
 80086f6:	f04f 0600 	mov.w	r6, #0
 80086fa:	bf08      	it	eq
 80086fc:	1aed      	subeq	r5, r5, r3
 80086fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008702:	bf08      	it	eq
 8008704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008708:	4293      	cmp	r3, r2
 800870a:	bfc4      	itt	gt
 800870c:	1a9b      	subgt	r3, r3, r2
 800870e:	18ed      	addgt	r5, r5, r3
 8008710:	42b5      	cmp	r5, r6
 8008712:	d11a      	bne.n	800874a <_printf_common+0xd2>
 8008714:	2000      	movs	r0, #0
 8008716:	e008      	b.n	800872a <_printf_common+0xb2>
 8008718:	2301      	movs	r3, #1
 800871a:	4652      	mov	r2, sl
 800871c:	4641      	mov	r1, r8
 800871e:	4638      	mov	r0, r7
 8008720:	47c8      	blx	r9
 8008722:	3001      	adds	r0, #1
 8008724:	d103      	bne.n	800872e <_printf_common+0xb6>
 8008726:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800872a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800872e:	3501      	adds	r5, #1
 8008730:	e7c1      	b.n	80086b6 <_printf_common+0x3e>
 8008732:	18e1      	adds	r1, r4, r3
 8008734:	1c5a      	adds	r2, r3, #1
 8008736:	2030      	movs	r0, #48	@ 0x30
 8008738:	3302      	adds	r3, #2
 800873a:	4422      	add	r2, r4
 800873c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008740:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008744:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008748:	e7c2      	b.n	80086d0 <_printf_common+0x58>
 800874a:	2301      	movs	r3, #1
 800874c:	4622      	mov	r2, r4
 800874e:	4641      	mov	r1, r8
 8008750:	4638      	mov	r0, r7
 8008752:	47c8      	blx	r9
 8008754:	3001      	adds	r0, #1
 8008756:	d0e6      	beq.n	8008726 <_printf_common+0xae>
 8008758:	3601      	adds	r6, #1
 800875a:	e7d9      	b.n	8008710 <_printf_common+0x98>

0800875c <_printf_i>:
 800875c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008760:	7e0f      	ldrb	r7, [r1, #24]
 8008762:	4691      	mov	r9, r2
 8008764:	4680      	mov	r8, r0
 8008766:	460c      	mov	r4, r1
 8008768:	2f78      	cmp	r7, #120	@ 0x78
 800876a:	469a      	mov	sl, r3
 800876c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800876e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008772:	d807      	bhi.n	8008784 <_printf_i+0x28>
 8008774:	2f62      	cmp	r7, #98	@ 0x62
 8008776:	d80a      	bhi.n	800878e <_printf_i+0x32>
 8008778:	2f00      	cmp	r7, #0
 800877a:	f000 80d1 	beq.w	8008920 <_printf_i+0x1c4>
 800877e:	2f58      	cmp	r7, #88	@ 0x58
 8008780:	f000 80b8 	beq.w	80088f4 <_printf_i+0x198>
 8008784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008788:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800878c:	e03a      	b.n	8008804 <_printf_i+0xa8>
 800878e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008792:	2b15      	cmp	r3, #21
 8008794:	d8f6      	bhi.n	8008784 <_printf_i+0x28>
 8008796:	a101      	add	r1, pc, #4	@ (adr r1, 800879c <_printf_i+0x40>)
 8008798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800879c:	080087f5 	.word	0x080087f5
 80087a0:	08008809 	.word	0x08008809
 80087a4:	08008785 	.word	0x08008785
 80087a8:	08008785 	.word	0x08008785
 80087ac:	08008785 	.word	0x08008785
 80087b0:	08008785 	.word	0x08008785
 80087b4:	08008809 	.word	0x08008809
 80087b8:	08008785 	.word	0x08008785
 80087bc:	08008785 	.word	0x08008785
 80087c0:	08008785 	.word	0x08008785
 80087c4:	08008785 	.word	0x08008785
 80087c8:	08008907 	.word	0x08008907
 80087cc:	08008833 	.word	0x08008833
 80087d0:	080088c1 	.word	0x080088c1
 80087d4:	08008785 	.word	0x08008785
 80087d8:	08008785 	.word	0x08008785
 80087dc:	08008929 	.word	0x08008929
 80087e0:	08008785 	.word	0x08008785
 80087e4:	08008833 	.word	0x08008833
 80087e8:	08008785 	.word	0x08008785
 80087ec:	08008785 	.word	0x08008785
 80087f0:	080088c9 	.word	0x080088c9
 80087f4:	6833      	ldr	r3, [r6, #0]
 80087f6:	1d1a      	adds	r2, r3, #4
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6032      	str	r2, [r6, #0]
 80087fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008800:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008804:	2301      	movs	r3, #1
 8008806:	e09c      	b.n	8008942 <_printf_i+0x1e6>
 8008808:	6833      	ldr	r3, [r6, #0]
 800880a:	6820      	ldr	r0, [r4, #0]
 800880c:	1d19      	adds	r1, r3, #4
 800880e:	6031      	str	r1, [r6, #0]
 8008810:	0606      	lsls	r6, r0, #24
 8008812:	d501      	bpl.n	8008818 <_printf_i+0xbc>
 8008814:	681d      	ldr	r5, [r3, #0]
 8008816:	e003      	b.n	8008820 <_printf_i+0xc4>
 8008818:	0645      	lsls	r5, r0, #25
 800881a:	d5fb      	bpl.n	8008814 <_printf_i+0xb8>
 800881c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008820:	2d00      	cmp	r5, #0
 8008822:	da03      	bge.n	800882c <_printf_i+0xd0>
 8008824:	232d      	movs	r3, #45	@ 0x2d
 8008826:	426d      	negs	r5, r5
 8008828:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800882c:	4858      	ldr	r0, [pc, #352]	@ (8008990 <_printf_i+0x234>)
 800882e:	230a      	movs	r3, #10
 8008830:	e011      	b.n	8008856 <_printf_i+0xfa>
 8008832:	6821      	ldr	r1, [r4, #0]
 8008834:	6833      	ldr	r3, [r6, #0]
 8008836:	0608      	lsls	r0, r1, #24
 8008838:	f853 5b04 	ldr.w	r5, [r3], #4
 800883c:	d402      	bmi.n	8008844 <_printf_i+0xe8>
 800883e:	0649      	lsls	r1, r1, #25
 8008840:	bf48      	it	mi
 8008842:	b2ad      	uxthmi	r5, r5
 8008844:	2f6f      	cmp	r7, #111	@ 0x6f
 8008846:	6033      	str	r3, [r6, #0]
 8008848:	4851      	ldr	r0, [pc, #324]	@ (8008990 <_printf_i+0x234>)
 800884a:	bf14      	ite	ne
 800884c:	230a      	movne	r3, #10
 800884e:	2308      	moveq	r3, #8
 8008850:	2100      	movs	r1, #0
 8008852:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008856:	6866      	ldr	r6, [r4, #4]
 8008858:	2e00      	cmp	r6, #0
 800885a:	60a6      	str	r6, [r4, #8]
 800885c:	db05      	blt.n	800886a <_printf_i+0x10e>
 800885e:	6821      	ldr	r1, [r4, #0]
 8008860:	432e      	orrs	r6, r5
 8008862:	f021 0104 	bic.w	r1, r1, #4
 8008866:	6021      	str	r1, [r4, #0]
 8008868:	d04b      	beq.n	8008902 <_printf_i+0x1a6>
 800886a:	4616      	mov	r6, r2
 800886c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008870:	fb03 5711 	mls	r7, r3, r1, r5
 8008874:	5dc7      	ldrb	r7, [r0, r7]
 8008876:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800887a:	462f      	mov	r7, r5
 800887c:	460d      	mov	r5, r1
 800887e:	42bb      	cmp	r3, r7
 8008880:	d9f4      	bls.n	800886c <_printf_i+0x110>
 8008882:	2b08      	cmp	r3, #8
 8008884:	d10b      	bne.n	800889e <_printf_i+0x142>
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	07df      	lsls	r7, r3, #31
 800888a:	d508      	bpl.n	800889e <_printf_i+0x142>
 800888c:	6923      	ldr	r3, [r4, #16]
 800888e:	6861      	ldr	r1, [r4, #4]
 8008890:	4299      	cmp	r1, r3
 8008892:	bfde      	ittt	le
 8008894:	2330      	movle	r3, #48	@ 0x30
 8008896:	f806 3c01 	strble.w	r3, [r6, #-1]
 800889a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800889e:	1b92      	subs	r2, r2, r6
 80088a0:	6122      	str	r2, [r4, #16]
 80088a2:	464b      	mov	r3, r9
 80088a4:	aa03      	add	r2, sp, #12
 80088a6:	4621      	mov	r1, r4
 80088a8:	4640      	mov	r0, r8
 80088aa:	f8cd a000 	str.w	sl, [sp]
 80088ae:	f7ff fee3 	bl	8008678 <_printf_common>
 80088b2:	3001      	adds	r0, #1
 80088b4:	d14a      	bne.n	800894c <_printf_i+0x1f0>
 80088b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088ba:	b004      	add	sp, #16
 80088bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	f043 0320 	orr.w	r3, r3, #32
 80088c6:	6023      	str	r3, [r4, #0]
 80088c8:	2778      	movs	r7, #120	@ 0x78
 80088ca:	4832      	ldr	r0, [pc, #200]	@ (8008994 <_printf_i+0x238>)
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088d2:	061f      	lsls	r7, r3, #24
 80088d4:	6831      	ldr	r1, [r6, #0]
 80088d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80088da:	d402      	bmi.n	80088e2 <_printf_i+0x186>
 80088dc:	065f      	lsls	r7, r3, #25
 80088de:	bf48      	it	mi
 80088e0:	b2ad      	uxthmi	r5, r5
 80088e2:	6031      	str	r1, [r6, #0]
 80088e4:	07d9      	lsls	r1, r3, #31
 80088e6:	bf44      	itt	mi
 80088e8:	f043 0320 	orrmi.w	r3, r3, #32
 80088ec:	6023      	strmi	r3, [r4, #0]
 80088ee:	b11d      	cbz	r5, 80088f8 <_printf_i+0x19c>
 80088f0:	2310      	movs	r3, #16
 80088f2:	e7ad      	b.n	8008850 <_printf_i+0xf4>
 80088f4:	4826      	ldr	r0, [pc, #152]	@ (8008990 <_printf_i+0x234>)
 80088f6:	e7e9      	b.n	80088cc <_printf_i+0x170>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	f023 0320 	bic.w	r3, r3, #32
 80088fe:	6023      	str	r3, [r4, #0]
 8008900:	e7f6      	b.n	80088f0 <_printf_i+0x194>
 8008902:	4616      	mov	r6, r2
 8008904:	e7bd      	b.n	8008882 <_printf_i+0x126>
 8008906:	6833      	ldr	r3, [r6, #0]
 8008908:	6825      	ldr	r5, [r4, #0]
 800890a:	1d18      	adds	r0, r3, #4
 800890c:	6961      	ldr	r1, [r4, #20]
 800890e:	6030      	str	r0, [r6, #0]
 8008910:	062e      	lsls	r6, r5, #24
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	d501      	bpl.n	800891a <_printf_i+0x1be>
 8008916:	6019      	str	r1, [r3, #0]
 8008918:	e002      	b.n	8008920 <_printf_i+0x1c4>
 800891a:	0668      	lsls	r0, r5, #25
 800891c:	d5fb      	bpl.n	8008916 <_printf_i+0x1ba>
 800891e:	8019      	strh	r1, [r3, #0]
 8008920:	2300      	movs	r3, #0
 8008922:	4616      	mov	r6, r2
 8008924:	6123      	str	r3, [r4, #16]
 8008926:	e7bc      	b.n	80088a2 <_printf_i+0x146>
 8008928:	6833      	ldr	r3, [r6, #0]
 800892a:	2100      	movs	r1, #0
 800892c:	1d1a      	adds	r2, r3, #4
 800892e:	6032      	str	r2, [r6, #0]
 8008930:	681e      	ldr	r6, [r3, #0]
 8008932:	6862      	ldr	r2, [r4, #4]
 8008934:	4630      	mov	r0, r6
 8008936:	f000 f893 	bl	8008a60 <memchr>
 800893a:	b108      	cbz	r0, 8008940 <_printf_i+0x1e4>
 800893c:	1b80      	subs	r0, r0, r6
 800893e:	6060      	str	r0, [r4, #4]
 8008940:	6863      	ldr	r3, [r4, #4]
 8008942:	6123      	str	r3, [r4, #16]
 8008944:	2300      	movs	r3, #0
 8008946:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800894a:	e7aa      	b.n	80088a2 <_printf_i+0x146>
 800894c:	6923      	ldr	r3, [r4, #16]
 800894e:	4632      	mov	r2, r6
 8008950:	4649      	mov	r1, r9
 8008952:	4640      	mov	r0, r8
 8008954:	47d0      	blx	sl
 8008956:	3001      	adds	r0, #1
 8008958:	d0ad      	beq.n	80088b6 <_printf_i+0x15a>
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	079b      	lsls	r3, r3, #30
 800895e:	d413      	bmi.n	8008988 <_printf_i+0x22c>
 8008960:	68e0      	ldr	r0, [r4, #12]
 8008962:	9b03      	ldr	r3, [sp, #12]
 8008964:	4298      	cmp	r0, r3
 8008966:	bfb8      	it	lt
 8008968:	4618      	movlt	r0, r3
 800896a:	e7a6      	b.n	80088ba <_printf_i+0x15e>
 800896c:	2301      	movs	r3, #1
 800896e:	4632      	mov	r2, r6
 8008970:	4649      	mov	r1, r9
 8008972:	4640      	mov	r0, r8
 8008974:	47d0      	blx	sl
 8008976:	3001      	adds	r0, #1
 8008978:	d09d      	beq.n	80088b6 <_printf_i+0x15a>
 800897a:	3501      	adds	r5, #1
 800897c:	68e3      	ldr	r3, [r4, #12]
 800897e:	9903      	ldr	r1, [sp, #12]
 8008980:	1a5b      	subs	r3, r3, r1
 8008982:	42ab      	cmp	r3, r5
 8008984:	dcf2      	bgt.n	800896c <_printf_i+0x210>
 8008986:	e7eb      	b.n	8008960 <_printf_i+0x204>
 8008988:	2500      	movs	r5, #0
 800898a:	f104 0619 	add.w	r6, r4, #25
 800898e:	e7f5      	b.n	800897c <_printf_i+0x220>
 8008990:	08008bad 	.word	0x08008bad
 8008994:	08008bbe 	.word	0x08008bbe

08008998 <__malloc_lock>:
 8008998:	4801      	ldr	r0, [pc, #4]	@ (80089a0 <__malloc_lock+0x8>)
 800899a:	f7ff bc71 	b.w	8008280 <__retarget_lock_acquire_recursive>
 800899e:	bf00      	nop
 80089a0:	20000348 	.word	0x20000348

080089a4 <__malloc_unlock>:
 80089a4:	4801      	ldr	r0, [pc, #4]	@ (80089ac <__malloc_unlock+0x8>)
 80089a6:	f7ff bc6c 	b.w	8008282 <__retarget_lock_release_recursive>
 80089aa:	bf00      	nop
 80089ac:	20000348 	.word	0x20000348

080089b0 <_realloc_r>:
 80089b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089b4:	4607      	mov	r7, r0
 80089b6:	4614      	mov	r4, r2
 80089b8:	460d      	mov	r5, r1
 80089ba:	b921      	cbnz	r1, 80089c6 <_realloc_r+0x16>
 80089bc:	4611      	mov	r1, r2
 80089be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089c2:	f7ff bdd9 	b.w	8008578 <_malloc_r>
 80089c6:	b92a      	cbnz	r2, 80089d4 <_realloc_r+0x24>
 80089c8:	4625      	mov	r5, r4
 80089ca:	f000 f865 	bl	8008a98 <_free_r>
 80089ce:	4628      	mov	r0, r5
 80089d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089d4:	f000 f8aa 	bl	8008b2c <_malloc_usable_size_r>
 80089d8:	4284      	cmp	r4, r0
 80089da:	4606      	mov	r6, r0
 80089dc:	d802      	bhi.n	80089e4 <_realloc_r+0x34>
 80089de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089e2:	d8f4      	bhi.n	80089ce <_realloc_r+0x1e>
 80089e4:	4621      	mov	r1, r4
 80089e6:	4638      	mov	r0, r7
 80089e8:	f7ff fdc6 	bl	8008578 <_malloc_r>
 80089ec:	4680      	mov	r8, r0
 80089ee:	b908      	cbnz	r0, 80089f4 <_realloc_r+0x44>
 80089f0:	4645      	mov	r5, r8
 80089f2:	e7ec      	b.n	80089ce <_realloc_r+0x1e>
 80089f4:	42b4      	cmp	r4, r6
 80089f6:	4622      	mov	r2, r4
 80089f8:	4629      	mov	r1, r5
 80089fa:	bf28      	it	cs
 80089fc:	4632      	movcs	r2, r6
 80089fe:	f000 f83d 	bl	8008a7c <memcpy>
 8008a02:	4629      	mov	r1, r5
 8008a04:	4638      	mov	r0, r7
 8008a06:	f000 f847 	bl	8008a98 <_free_r>
 8008a0a:	e7f1      	b.n	80089f0 <_realloc_r+0x40>

08008a0c <memmove>:
 8008a0c:	4288      	cmp	r0, r1
 8008a0e:	b510      	push	{r4, lr}
 8008a10:	eb01 0402 	add.w	r4, r1, r2
 8008a14:	d902      	bls.n	8008a1c <memmove+0x10>
 8008a16:	4284      	cmp	r4, r0
 8008a18:	4623      	mov	r3, r4
 8008a1a:	d807      	bhi.n	8008a2c <memmove+0x20>
 8008a1c:	1e43      	subs	r3, r0, #1
 8008a1e:	42a1      	cmp	r1, r4
 8008a20:	d008      	beq.n	8008a34 <memmove+0x28>
 8008a22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a2a:	e7f8      	b.n	8008a1e <memmove+0x12>
 8008a2c:	4402      	add	r2, r0
 8008a2e:	4601      	mov	r1, r0
 8008a30:	428a      	cmp	r2, r1
 8008a32:	d100      	bne.n	8008a36 <memmove+0x2a>
 8008a34:	bd10      	pop	{r4, pc}
 8008a36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a3e:	e7f7      	b.n	8008a30 <memmove+0x24>

08008a40 <_sbrk_r>:
 8008a40:	b538      	push	{r3, r4, r5, lr}
 8008a42:	2300      	movs	r3, #0
 8008a44:	4d05      	ldr	r5, [pc, #20]	@ (8008a5c <_sbrk_r+0x1c>)
 8008a46:	4604      	mov	r4, r0
 8008a48:	4608      	mov	r0, r1
 8008a4a:	602b      	str	r3, [r5, #0]
 8008a4c:	f7f8 f942 	bl	8000cd4 <_sbrk>
 8008a50:	1c43      	adds	r3, r0, #1
 8008a52:	d102      	bne.n	8008a5a <_sbrk_r+0x1a>
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	b103      	cbz	r3, 8008a5a <_sbrk_r+0x1a>
 8008a58:	6023      	str	r3, [r4, #0]
 8008a5a:	bd38      	pop	{r3, r4, r5, pc}
 8008a5c:	20000354 	.word	0x20000354

08008a60 <memchr>:
 8008a60:	b2c9      	uxtb	r1, r1
 8008a62:	4603      	mov	r3, r0
 8008a64:	4402      	add	r2, r0
 8008a66:	b510      	push	{r4, lr}
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	d101      	bne.n	8008a72 <memchr+0x12>
 8008a6e:	2000      	movs	r0, #0
 8008a70:	e003      	b.n	8008a7a <memchr+0x1a>
 8008a72:	7804      	ldrb	r4, [r0, #0]
 8008a74:	3301      	adds	r3, #1
 8008a76:	428c      	cmp	r4, r1
 8008a78:	d1f6      	bne.n	8008a68 <memchr+0x8>
 8008a7a:	bd10      	pop	{r4, pc}

08008a7c <memcpy>:
 8008a7c:	440a      	add	r2, r1
 8008a7e:	1e43      	subs	r3, r0, #1
 8008a80:	4291      	cmp	r1, r2
 8008a82:	d100      	bne.n	8008a86 <memcpy+0xa>
 8008a84:	4770      	bx	lr
 8008a86:	b510      	push	{r4, lr}
 8008a88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a8c:	4291      	cmp	r1, r2
 8008a8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a92:	d1f9      	bne.n	8008a88 <memcpy+0xc>
 8008a94:	bd10      	pop	{r4, pc}
	...

08008a98 <_free_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	2900      	cmp	r1, #0
 8008a9e:	d041      	beq.n	8008b24 <_free_r+0x8c>
 8008aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aa4:	1f0c      	subs	r4, r1, #4
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	bfb8      	it	lt
 8008aaa:	18e4      	addlt	r4, r4, r3
 8008aac:	f7ff ff74 	bl	8008998 <__malloc_lock>
 8008ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8008b28 <_free_r+0x90>)
 8008ab2:	6813      	ldr	r3, [r2, #0]
 8008ab4:	b933      	cbnz	r3, 8008ac4 <_free_r+0x2c>
 8008ab6:	6063      	str	r3, [r4, #4]
 8008ab8:	6014      	str	r4, [r2, #0]
 8008aba:	4628      	mov	r0, r5
 8008abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ac0:	f7ff bf70 	b.w	80089a4 <__malloc_unlock>
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	d908      	bls.n	8008ada <_free_r+0x42>
 8008ac8:	6820      	ldr	r0, [r4, #0]
 8008aca:	1821      	adds	r1, r4, r0
 8008acc:	428b      	cmp	r3, r1
 8008ace:	bf01      	itttt	eq
 8008ad0:	6819      	ldreq	r1, [r3, #0]
 8008ad2:	685b      	ldreq	r3, [r3, #4]
 8008ad4:	1809      	addeq	r1, r1, r0
 8008ad6:	6021      	streq	r1, [r4, #0]
 8008ad8:	e7ed      	b.n	8008ab6 <_free_r+0x1e>
 8008ada:	461a      	mov	r2, r3
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	b10b      	cbz	r3, 8008ae4 <_free_r+0x4c>
 8008ae0:	42a3      	cmp	r3, r4
 8008ae2:	d9fa      	bls.n	8008ada <_free_r+0x42>
 8008ae4:	6811      	ldr	r1, [r2, #0]
 8008ae6:	1850      	adds	r0, r2, r1
 8008ae8:	42a0      	cmp	r0, r4
 8008aea:	d10b      	bne.n	8008b04 <_free_r+0x6c>
 8008aec:	6820      	ldr	r0, [r4, #0]
 8008aee:	4401      	add	r1, r0
 8008af0:	1850      	adds	r0, r2, r1
 8008af2:	6011      	str	r1, [r2, #0]
 8008af4:	4283      	cmp	r3, r0
 8008af6:	d1e0      	bne.n	8008aba <_free_r+0x22>
 8008af8:	6818      	ldr	r0, [r3, #0]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	4408      	add	r0, r1
 8008afe:	6053      	str	r3, [r2, #4]
 8008b00:	6010      	str	r0, [r2, #0]
 8008b02:	e7da      	b.n	8008aba <_free_r+0x22>
 8008b04:	d902      	bls.n	8008b0c <_free_r+0x74>
 8008b06:	230c      	movs	r3, #12
 8008b08:	602b      	str	r3, [r5, #0]
 8008b0a:	e7d6      	b.n	8008aba <_free_r+0x22>
 8008b0c:	6820      	ldr	r0, [r4, #0]
 8008b0e:	1821      	adds	r1, r4, r0
 8008b10:	428b      	cmp	r3, r1
 8008b12:	bf02      	ittt	eq
 8008b14:	6819      	ldreq	r1, [r3, #0]
 8008b16:	685b      	ldreq	r3, [r3, #4]
 8008b18:	1809      	addeq	r1, r1, r0
 8008b1a:	6063      	str	r3, [r4, #4]
 8008b1c:	bf08      	it	eq
 8008b1e:	6021      	streq	r1, [r4, #0]
 8008b20:	6054      	str	r4, [r2, #4]
 8008b22:	e7ca      	b.n	8008aba <_free_r+0x22>
 8008b24:	bd38      	pop	{r3, r4, r5, pc}
 8008b26:	bf00      	nop
 8008b28:	20000350 	.word	0x20000350

08008b2c <_malloc_usable_size_r>:
 8008b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b30:	1f18      	subs	r0, r3, #4
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	bfbc      	itt	lt
 8008b36:	580b      	ldrlt	r3, [r1, r0]
 8008b38:	18c0      	addlt	r0, r0, r3
 8008b3a:	4770      	bx	lr

08008b3c <_init>:
 8008b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3e:	bf00      	nop
 8008b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b42:	bc08      	pop	{r3}
 8008b44:	469e      	mov	lr, r3
 8008b46:	4770      	bx	lr

08008b48 <_fini>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	bf00      	nop
 8008b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4e:	bc08      	pop	{r3}
 8008b50:	469e      	mov	lr, r3
 8008b52:	4770      	bx	lr
