
mesure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d1c  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005f70  08005f70  00006f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f80  08005f80  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005f80  08005f80  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005f80  08005f80  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f80  08005f80  00006f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f84  08005f84  00006f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005f88  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08005f94  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08005f94  0000714c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbe3  00000000  00000000  00007042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae2  00000000  00000000  00014c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00016708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000877  00000000  00000000  00017230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002afdb  00000000  00000000  00017aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e085  00000000  00000000  00042a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011618e  00000000  00000000  00050b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166c95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e78  00000000  00000000  00166cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00169b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000000c 	.word	0x2000000c
 8000270:	00000000 	.word	0x00000000
 8000274:	08005f58 	.word	0x08005f58

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000010 	.word	0x20000010
 8000290:	08005f58 	.word	0x08005f58

08000294 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t raw;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800029c:	2102      	movs	r1, #2
 800029e:	4803      	ldr	r0, [pc, #12]	@ (80002ac <HAL_ADC_ConvCpltCallback+0x18>)
 80002a0:	f003 fbec 	bl	8003a7c <HAL_GPIO_TogglePin>
}
 80002a4:	bf00      	nop
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	42020000 	.word	0x42020000

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b4:	f000 fb44 	bl	8000940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b8:	f000 f812 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002bc:	f000 f8f6 	bl	80004ac <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80002c0:	f000 f8d4 	bl	800046c <MX_GPDMA1_Init>
  MX_ADC1_Init();
 80002c4:	f000 f86e 	bl	80003a4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, &raw, 1);
 80002c8:	2201      	movs	r2, #1
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <main+0x28>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <main+0x2c>)
 80002ce:	f000 ff8d 	bl	80011ec <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d2:	bf00      	nop
 80002d4:	e7fd      	b.n	80002d2 <main+0x22>
 80002d6:	bf00      	nop
 80002d8:	20000144 	.word	0x20000144
 80002dc:	20000028 	.word	0x20000028

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b09c      	sub	sp, #112	@ 0x70
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0320 	add.w	r3, r7, #32
 80002ea:	2250      	movs	r2, #80	@ 0x50
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f005 fe06 	bl	8005f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	f107 0308 	add.w	r3, r7, #8
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
 8000304:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000306:	4b25      	ldr	r3, [pc, #148]	@ (800039c <SystemClock_Config+0xbc>)
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	4a24      	ldr	r2, [pc, #144]	@ (800039c <SystemClock_Config+0xbc>)
 800030c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000310:	6113      	str	r3, [r2, #16]
 8000312:	4b22      	ldr	r3, [pc, #136]	@ (800039c <SystemClock_Config+0xbc>)
 8000314:	691b      	ldr	r3, [r3, #16]
 8000316:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800031e:	bf00      	nop
 8000320:	4b1e      	ldr	r3, [pc, #120]	@ (800039c <SystemClock_Config+0xbc>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	f003 0308 	and.w	r3, r3, #8
 8000328:	2b08      	cmp	r3, #8
 800032a:	d1f9      	bne.n	8000320 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032c:	2302      	movs	r3, #2
 800032e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000330:	2301      	movs	r3, #1
 8000332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000338:	2340      	movs	r3, #64	@ 0x40
 800033a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800033c:	2300      	movs	r3, #0
 800033e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000340:	f107 0320 	add.w	r3, r7, #32
 8000344:	4618      	mov	r0, r3
 8000346:	f003 fbb3 	bl	8003ab0 <HAL_RCC_OscConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000350:	f000 f8e0 	bl	8000514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000354:	231f      	movs	r3, #31
 8000356:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 800035c:	230b      	movs	r3, #11
 800035e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800036c:	f107 0308 	add.w	r3, r7, #8
 8000370:	2103      	movs	r1, #3
 8000372:	4618      	mov	r0, r3
 8000374:	f003 ffd4 	bl	8004320 <HAL_RCC_ClockConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800037e:	f000 f8c9 	bl	8000514 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_1);
 8000382:	4b07      	ldr	r3, [pc, #28]	@ (80003a0 <SystemClock_Config+0xc0>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800038a:	4a05      	ldr	r2, [pc, #20]	@ (80003a0 <SystemClock_Config+0xc0>)
 800038c:	f043 0310 	orr.w	r3, r3, #16
 8000390:	6013      	str	r3, [r2, #0]
}
 8000392:	bf00      	nop
 8000394:	3770      	adds	r7, #112	@ 0x70
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	44020800 	.word	0x44020800
 80003a0:	40022000 	.word	0x40022000

080003a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003aa:	463b      	mov	r3, r7
 80003ac:	2220      	movs	r2, #32
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f005 fda5 	bl	8005f00 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000464 <MX_ADC1_Init+0xc0>)
 80003b8:	4a2b      	ldr	r2, [pc, #172]	@ (8000468 <MX_ADC1_Init+0xc4>)
 80003ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80003bc:	4b29      	ldr	r3, [pc, #164]	@ (8000464 <MX_ADC1_Init+0xc0>)
 80003be:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80003c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003c4:	4b27      	ldr	r3, [pc, #156]	@ (8000464 <MX_ADC1_Init+0xc0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ca:	4b26      	ldr	r3, [pc, #152]	@ (8000464 <MX_ADC1_Init+0xc0>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003d0:	4b24      	ldr	r3, [pc, #144]	@ (8000464 <MX_ADC1_Init+0xc0>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80003d6:	4b23      	ldr	r3, [pc, #140]	@ (8000464 <MX_ADC1_Init+0xc0>)
 80003d8:	2208      	movs	r2, #8
 80003da:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003dc:	4b21      	ldr	r3, [pc, #132]	@ (8000464 <MX_ADC1_Init+0xc0>)
 80003de:	2200      	movs	r2, #0
 80003e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003e2:	4b20      	ldr	r3, [pc, #128]	@ (8000464 <MX_ADC1_Init+0xc0>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80003e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000464 <MX_ADC1_Init+0xc0>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000464 <MX_ADC1_Init+0xc0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000464 <MX_ADC1_Init+0xc0>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003fc:	4b19      	ldr	r3, [pc, #100]	@ (8000464 <MX_ADC1_Init+0xc0>)
 80003fe:	2200      	movs	r2, #0
 8000400:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000402:	4b18      	ldr	r3, [pc, #96]	@ (8000464 <MX_ADC1_Init+0xc0>)
 8000404:	2201      	movs	r2, #1
 8000406:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800040a:	4b16      	ldr	r3, [pc, #88]	@ (8000464 <MX_ADC1_Init+0xc0>)
 800040c:	2200      	movs	r2, #0
 800040e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000410:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <MX_ADC1_Init+0xc0>)
 8000412:	2200      	movs	r2, #0
 8000414:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000416:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <MX_ADC1_Init+0xc0>)
 8000418:	2200      	movs	r2, #0
 800041a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800041e:	4811      	ldr	r0, [pc, #68]	@ (8000464 <MX_ADC1_Init+0xc0>)
 8000420:	f000 fd90 	bl	8000f44 <HAL_ADC_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800042a:	f000 f873 	bl	8000514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800042e:	2301      	movs	r3, #1
 8000430:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000432:	2306      	movs	r3, #6
 8000434:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000436:	2307      	movs	r3, #7
 8000438:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800043a:	237f      	movs	r3, #127	@ 0x7f
 800043c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800043e:	2304      	movs	r3, #4
 8000440:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000446:	463b      	mov	r3, r7
 8000448:	4619      	mov	r1, r3
 800044a:	4806      	ldr	r0, [pc, #24]	@ (8000464 <MX_ADC1_Init+0xc0>)
 800044c:	f001 f80c 	bl	8001468 <HAL_ADC_ConfigChannel>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000456:	f000 f85d 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	3720      	adds	r7, #32
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000028 	.word	0x20000028
 8000468:	42028000 	.word	0x42028000

0800046c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000472:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <MX_GPDMA1_Init+0x3c>)
 8000474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000478:	4a0b      	ldr	r2, [pc, #44]	@ (80004a8 <MX_GPDMA1_Init+0x3c>)
 800047a:	f043 0301 	orr.w	r3, r3, #1
 800047e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000482:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <MX_GPDMA1_Init+0x3c>)
 8000484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000488:	f003 0301 	and.w	r3, r3, #1
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel7_IRQn, 0, 0);
 8000490:	2200      	movs	r2, #0
 8000492:	2100      	movs	r1, #0
 8000494:	2022      	movs	r0, #34	@ 0x22
 8000496:	f001 fdc5 	bl	8002024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel7_IRQn);
 800049a:	2022      	movs	r0, #34	@ 0x22
 800049c:	f001 fddc 	bl	8002058 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80004a0:	bf00      	nop
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	44020c00 	.word	0x44020c00

080004ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	4b12      	ldr	r3, [pc, #72]	@ (800050c <MX_GPIO_Init+0x60>)
 80004c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004c6:	4a11      	ldr	r2, [pc, #68]	@ (800050c <MX_GPIO_Init+0x60>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004d0:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <MX_GPIO_Init+0x60>)
 80004d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2102      	movs	r1, #2
 80004e2:	480b      	ldr	r0, [pc, #44]	@ (8000510 <MX_GPIO_Init+0x64>)
 80004e4:	f003 fab2 	bl	8003a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004e8:	2302      	movs	r3, #2
 80004ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004f4:	2303      	movs	r3, #3
 80004f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	4619      	mov	r1, r3
 80004fc:	4804      	ldr	r0, [pc, #16]	@ (8000510 <MX_GPIO_Init+0x64>)
 80004fe:	f003 f947 	bl	8003790 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000502:	bf00      	nop
 8000504:	3718      	adds	r7, #24
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	44020c00 	.word	0x44020c00
 8000510:	42020000 	.word	0x42020000

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <Error_Handler+0x8>

08000520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
	...

08000530 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b0d8      	sub	sp, #352	@ 0x160
 8000534:	af00      	add	r7, sp, #0
 8000536:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800053a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800053e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000550:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000554:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000558:	4618      	mov	r0, r3
 800055a:	23d0      	movs	r3, #208	@ 0xd0
 800055c:	461a      	mov	r2, r3
 800055e:	2100      	movs	r1, #0
 8000560:	f005 fcce 	bl	8005f00 <memset>
  if(hadc->Instance==ADC1)
 8000564:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000568:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a7c      	ldr	r2, [pc, #496]	@ (8000764 <HAL_ADC_MspInit+0x234>)
 8000572:	4293      	cmp	r3, r2
 8000574:	f040 80f0 	bne.w	8000758 <HAL_ADC_MspInit+0x228>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000578:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800057c:	f5a3 71a8 	sub.w	r1, r3, #336	@ 0x150
 8000580:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000584:	f04f 0300 	mov.w	r3, #0
 8000588:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 800058c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000590:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000594:	2200      	movs	r2, #0
 8000596:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800059a:	f107 0310 	add.w	r3, r7, #16
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 f9be 	bl	8004920 <HAL_RCCEx_PeriphCLKConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 80005aa:	f7ff ffb3 	bl	8000514 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005ae:	4b6e      	ldr	r3, [pc, #440]	@ (8000768 <HAL_ADC_MspInit+0x238>)
 80005b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005b4:	4a6c      	ldr	r2, [pc, #432]	@ (8000768 <HAL_ADC_MspInit+0x238>)
 80005b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005be:	4b6a      	ldr	r3, [pc, #424]	@ (8000768 <HAL_ADC_MspInit+0x238>)
 80005c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005c4:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80005c8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80005cc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80005d6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80005da:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	4b62      	ldr	r3, [pc, #392]	@ (8000768 <HAL_ADC_MspInit+0x238>)
 80005de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005e2:	4a61      	ldr	r2, [pc, #388]	@ (8000768 <HAL_ADC_MspInit+0x238>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005ec:	4b5e      	ldr	r3, [pc, #376]	@ (8000768 <HAL_ADC_MspInit+0x238>)
 80005ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005f2:	f003 0201 	and.w	r2, r3, #1
 80005f6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80005fa:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000604:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000608:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800060a:	2301      	movs	r3, #1
 800060c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000610:	2303      	movs	r3, #3
 8000612:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8000620:	4619      	mov	r1, r3
 8000622:	4852      	ldr	r0, [pc, #328]	@ (800076c <HAL_ADC_MspInit+0x23c>)
 8000624:	f003 f8b4 	bl	8003790 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 8000628:	2322      	movs	r3, #34	@ 0x22
 800062a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 800062e:	2300      	movs	r3, #0
 8000630:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000634:	2300      	movs	r3, #0
 8000636:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800063a:	2300      	movs	r3, #0
 800063c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8000646:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800064a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800064e:	2301      	movs	r3, #1
 8000650:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8000654:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000658:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.SrcBurstLength = 1;
 800065c:	2301      	movs	r3, #1
 800065e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.DestBurstLength = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000668:	2300      	movs	r3, #0
 800066a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800066e:	2300      	movs	r3, #0
 8000670:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.Mode = DMA_NORMAL;
 8000674:	2300      	movs	r3, #0
 8000676:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.RepeatBlockConfig.RepeatCount = 1;
 800067a:	2301      	movs	r3, #1
 800067c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8000698:	2300      	movs	r3, #0
 800069a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800069e:	2300      	movs	r3, #0
 80006a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80006a4:	2300      	movs	r3, #0
 80006a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel7) != HAL_OK)
 80006aa:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80006ae:	4930      	ldr	r1, [pc, #192]	@ (8000770 <HAL_ADC_MspInit+0x240>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 f97d 	bl	80029b0 <HAL_DMAEx_List_BuildNode>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_ADC_MspInit+0x190>
    {
      Error_Handler();
 80006bc:	f7ff ff2a 	bl	8000514 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel7, NULL, &Node_GPDMA1_Channel7) != HAL_OK)
 80006c0:	4a2b      	ldr	r2, [pc, #172]	@ (8000770 <HAL_ADC_MspInit+0x240>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	482b      	ldr	r0, [pc, #172]	@ (8000774 <HAL_ADC_MspInit+0x244>)
 80006c6:	f002 f99f 	bl	8002a08 <HAL_DMAEx_List_InsertNode>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <HAL_ADC_MspInit+0x1a4>
    {
      Error_Handler();
 80006d0:	f7ff ff20 	bl	8000514 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel7) != HAL_OK)
 80006d4:	4827      	ldr	r0, [pc, #156]	@ (8000774 <HAL_ADC_MspInit+0x244>)
 80006d6:	f002 fa60 	bl	8002b9a <HAL_DMAEx_List_SetCircularMode>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <HAL_ADC_MspInit+0x1b4>
    {
      Error_Handler();
 80006e0:	f7ff ff18 	bl	8000514 <Error_Handler>
    }

    handle_GPDMA1_Channel7.Instance = GPDMA1_Channel7;
 80006e4:	4b24      	ldr	r3, [pc, #144]	@ (8000778 <HAL_ADC_MspInit+0x248>)
 80006e6:	4a25      	ldr	r2, [pc, #148]	@ (800077c <HAL_ADC_MspInit+0x24c>)
 80006e8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel7.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80006ea:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <HAL_ADC_MspInit+0x248>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel7.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80006f0:	4b21      	ldr	r3, [pc, #132]	@ (8000778 <HAL_ADC_MspInit+0x248>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel7.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80006f6:	4b20      	ldr	r3, [pc, #128]	@ (8000778 <HAL_ADC_MspInit+0x248>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel7.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80006fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000778 <HAL_ADC_MspInit+0x248>)
 80006fe:	2200      	movs	r2, #0
 8000700:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel7.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000702:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <HAL_ADC_MspInit+0x248>)
 8000704:	2281      	movs	r2, #129	@ 0x81
 8000706:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel7) != HAL_OK)
 8000708:	481b      	ldr	r0, [pc, #108]	@ (8000778 <HAL_ADC_MspInit+0x248>)
 800070a:	f001 ff8b 	bl	8002624 <HAL_DMAEx_List_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <HAL_ADC_MspInit+0x1e8>
    {
      Error_Handler();
 8000714:	f7ff fefe 	bl	8000514 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel7, &List_GPDMA1_Channel7) != HAL_OK)
 8000718:	4916      	ldr	r1, [pc, #88]	@ (8000774 <HAL_ADC_MspInit+0x244>)
 800071a:	4817      	ldr	r0, [pc, #92]	@ (8000778 <HAL_ADC_MspInit+0x248>)
 800071c:	f002 fa9e 	bl	8002c5c <HAL_DMAEx_List_LinkQ>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <HAL_ADC_MspInit+0x1fa>
    {
      Error_Handler();
 8000726:	f7ff fef5 	bl	8000514 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel7);
 800072a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800072e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a10      	ldr	r2, [pc, #64]	@ (8000778 <HAL_ADC_MspInit+0x248>)
 8000736:	651a      	str	r2, [r3, #80]	@ 0x50
 8000738:	4a0f      	ldr	r2, [pc, #60]	@ (8000778 <HAL_ADC_MspInit+0x248>)
 800073a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800073e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel7, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000746:	2110      	movs	r1, #16
 8000748:	480b      	ldr	r0, [pc, #44]	@ (8000778 <HAL_ADC_MspInit+0x248>)
 800074a:	f001 ff0a 	bl	8002562 <HAL_DMA_ConfigChannelAttributes>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <HAL_ADC_MspInit+0x228>
    {
      Error_Handler();
 8000754:	f7ff fede 	bl	8000514 <Error_Handler>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000758:	bf00      	nop
 800075a:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	42028000 	.word	0x42028000
 8000768:	44020c00 	.word	0x44020c00
 800076c:	42020000 	.word	0x42020000
 8000770:	20000090 	.word	0x20000090
 8000774:	200000b4 	.word	0x200000b4
 8000778:	200000cc 	.word	0x200000cc
 800077c:	400203d0 	.word	0x400203d0

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <NMI_Handler+0x4>

08000788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <HardFault_Handler+0x4>

08000790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <MemManage_Handler+0x4>

08000798 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d6:	f000 f951 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <GPDMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 7 global interrupt.
  */
void GPDMA1_Channel7_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 0 */

  /* USER CODE END GPDMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel7);
 80007e4:	4802      	ldr	r0, [pc, #8]	@ (80007f0 <GPDMA1_Channel7_IRQHandler+0x10>)
 80007e6:	f001 fd5b 	bl	80022a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 1 */

  /* USER CODE END GPDMA1_Channel7_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000cc 	.word	0x200000cc

080007f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007fa:	4b35      	ldr	r3, [pc, #212]	@ (80008d0 <SystemInit+0xdc>)
 80007fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000800:	4a33      	ldr	r2, [pc, #204]	@ (80008d0 <SystemInit+0xdc>)
 8000802:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000806:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800080a:	4b32      	ldr	r3, [pc, #200]	@ (80008d4 <SystemInit+0xe0>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000810:	4b30      	ldr	r3, [pc, #192]	@ (80008d4 <SystemInit+0xe0>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000816:	4b2f      	ldr	r3, [pc, #188]	@ (80008d4 <SystemInit+0xe0>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800081c:	4b2d      	ldr	r3, [pc, #180]	@ (80008d4 <SystemInit+0xe0>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	492c      	ldr	r1, [pc, #176]	@ (80008d4 <SystemInit+0xe0>)
 8000822:	4b2d      	ldr	r3, [pc, #180]	@ (80008d8 <SystemInit+0xe4>)
 8000824:	4013      	ands	r3, r2
 8000826:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000828:	4b2a      	ldr	r3, [pc, #168]	@ (80008d4 <SystemInit+0xe0>)
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800082e:	4b29      	ldr	r3, [pc, #164]	@ (80008d4 <SystemInit+0xe0>)
 8000830:	2200      	movs	r2, #0
 8000832:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000834:	4b27      	ldr	r3, [pc, #156]	@ (80008d4 <SystemInit+0xe0>)
 8000836:	2200      	movs	r2, #0
 8000838:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800083a:	4b26      	ldr	r3, [pc, #152]	@ (80008d4 <SystemInit+0xe0>)
 800083c:	4a27      	ldr	r2, [pc, #156]	@ (80008dc <SystemInit+0xe8>)
 800083e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000840:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <SystemInit+0xe0>)
 8000842:	2200      	movs	r2, #0
 8000844:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000846:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <SystemInit+0xe0>)
 8000848:	4a24      	ldr	r2, [pc, #144]	@ (80008dc <SystemInit+0xe8>)
 800084a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800084c:	4b21      	ldr	r3, [pc, #132]	@ (80008d4 <SystemInit+0xe0>)
 800084e:	2200      	movs	r2, #0
 8000850:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000852:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <SystemInit+0xe0>)
 8000854:	4a21      	ldr	r2, [pc, #132]	@ (80008dc <SystemInit+0xe8>)
 8000856:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000858:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <SystemInit+0xe0>)
 800085a:	2200      	movs	r2, #0
 800085c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800085e:	4b1d      	ldr	r3, [pc, #116]	@ (80008d4 <SystemInit+0xe0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a1c      	ldr	r2, [pc, #112]	@ (80008d4 <SystemInit+0xe0>)
 8000864:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000868:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800086a:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <SystemInit+0xe0>)
 800086c:	2200      	movs	r2, #0
 800086e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000870:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <SystemInit+0xdc>)
 8000872:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000876:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000878:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <SystemInit+0xec>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000880:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000888:	d003      	beq.n	8000892 <SystemInit+0x9e>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000890:	d117      	bne.n	80008c2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <SystemInit+0xec>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	2b00      	cmp	r3, #0
 800089c:	d005      	beq.n	80008aa <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <SystemInit+0xec>)
 80008a0:	4a10      	ldr	r2, [pc, #64]	@ (80008e4 <SystemInit+0xf0>)
 80008a2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80008a4:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <SystemInit+0xec>)
 80008a6:	4a10      	ldr	r2, [pc, #64]	@ (80008e8 <SystemInit+0xf4>)
 80008a8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80008aa:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <SystemInit+0xec>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	4a0c      	ldr	r2, [pc, #48]	@ (80008e0 <SystemInit+0xec>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80008b6:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <SystemInit+0xec>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	4a09      	ldr	r2, [pc, #36]	@ (80008e0 <SystemInit+0xec>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	61d3      	str	r3, [r2, #28]
  }
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00
 80008d4:	44020c00 	.word	0x44020c00
 80008d8:	eae2eae3 	.word	0xeae2eae3
 80008dc:	01010280 	.word	0x01010280
 80008e0:	40022000 	.word	0x40022000
 80008e4:	08192a3b 	.word	0x08192a3b
 80008e8:	4c5d6e7f 	.word	0x4c5d6e7f

080008ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ec:	480d      	ldr	r0, [pc, #52]	@ (8000924 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f0:	f7ff ff80 	bl	80007f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f4:	480c      	ldr	r0, [pc, #48]	@ (8000928 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f6:	490d      	ldr	r1, [pc, #52]	@ (800092c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000930 <LoopForever+0xe>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <LoopForever+0x12>)
  ldr r4, =_ebss
 800090c:	4c0a      	ldr	r4, [pc, #40]	@ (8000938 <LoopForever+0x16>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800091a:	f005 faf9 	bl	8005f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091e:	f7ff fcc7 	bl	80002b0 <main>

08000922 <LoopForever>:

LoopForever:
    b LoopForever
 8000922:	e7fe      	b.n	8000922 <LoopForever>
  ldr   r0, =_estack
 8000924:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000930:	08005f88 	.word	0x08005f88
  ldr r2, =_sbss
 8000934:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000938:	2000014c 	.word	0x2000014c

0800093c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC1_IRQHandler>
	...

08000940 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000944:	2003      	movs	r0, #3
 8000946:	f001 fb62 	bl	800200e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800094a:	f003 fea1 	bl	8004690 <HAL_RCC_GetSysClockFreq>
 800094e:	4602      	mov	r2, r0
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <HAL_Init+0x44>)
 8000952:	6a1b      	ldr	r3, [r3, #32]
 8000954:	f003 030f 	and.w	r3, r3, #15
 8000958:	490b      	ldr	r1, [pc, #44]	@ (8000988 <HAL_Init+0x48>)
 800095a:	5ccb      	ldrb	r3, [r1, r3]
 800095c:	fa22 f303 	lsr.w	r3, r2, r3
 8000960:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <HAL_Init+0x4c>)
 8000962:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000964:	2004      	movs	r0, #4
 8000966:	f001 fba7 	bl	80020b8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800096a:	200f      	movs	r0, #15
 800096c:	f000 f810 	bl	8000990 <HAL_InitTick>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e002      	b.n	8000980 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800097a:	f7ff fdd1 	bl	8000520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097e:	2300      	movs	r3, #0
}
 8000980:	4618      	mov	r0, r3
 8000982:	bd80      	pop	{r7, pc}
 8000984:	44020c00 	.word	0x44020c00
 8000988:	08005f70 	.word	0x08005f70
 800098c:	20000000 	.word	0x20000000

08000990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800099c:	4b33      	ldr	r3, [pc, #204]	@ (8000a6c <HAL_InitTick+0xdc>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d101      	bne.n	80009a8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	e05c      	b.n	8000a62 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80009a8:	4b31      	ldr	r3, [pc, #196]	@ (8000a70 <HAL_InitTick+0xe0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	2b04      	cmp	r3, #4
 80009b2:	d10c      	bne.n	80009ce <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80009b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a74 <HAL_InitTick+0xe4>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a6c <HAL_InitTick+0xdc>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	e037      	b.n	8000a3e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80009ce:	f001 fbcb 	bl	8002168 <HAL_SYSTICK_GetCLKSourceConfig>
 80009d2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d023      	beq.n	8000a22 <HAL_InitTick+0x92>
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d82d      	bhi.n	8000a3c <HAL_InitTick+0xac>
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <HAL_InitTick+0x5e>
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d00d      	beq.n	8000a08 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80009ec:	e026      	b.n	8000a3c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80009ee:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <HAL_InitTick+0xe4>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a6c <HAL_InitTick+0xdc>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	4619      	mov	r1, r3
 80009f8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80009fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a04:	60fb      	str	r3, [r7, #12]
        break;
 8000a06:	e01a      	b.n	8000a3e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000a08:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <HAL_InitTick+0xdc>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a16:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1e:	60fb      	str	r3, [r7, #12]
        break;
 8000a20:	e00d      	b.n	8000a3e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000a22:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_InitTick+0xdc>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a30:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a38:	60fb      	str	r3, [r7, #12]
        break;
 8000a3a:	e000      	b.n	8000a3e <HAL_InitTick+0xae>
        break;
 8000a3c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f001 fb18 	bl	8002074 <HAL_SYSTICK_Config>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e009      	b.n	8000a62 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a56:	f001 fae5 	bl	8002024 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000a5a:	4a07      	ldr	r2, [pc, #28]	@ (8000a78 <HAL_InitTick+0xe8>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	e000e010 	.word	0xe000e010
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000004 	.word	0x20000004

08000a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <HAL_IncTick+0x20>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_IncTick+0x24>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a04      	ldr	r2, [pc, #16]	@ (8000aa0 <HAL_IncTick+0x24>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000148 	.word	0x20000148

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	@ (8000ab8 <HAL_GetTick+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000148 	.word	0x20000148

08000abc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	431a      	orrs	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	431a      	orrs	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	609a      	str	r2, [r3, #8]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000b32:	f043 0201 	orr.w	r2, r3, #1
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <LL_ADC_EnableChannel0_GPIO+0x24>)
 8000b52:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000b56:	4a05      	ldr	r2, [pc, #20]	@ (8000b6c <LL_ADC_EnableChannel0_GPIO+0x24>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	42028000 	.word	0x42028000

08000b70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	3360      	adds	r3, #96	@ 0x60
 8000b82:	461a      	mov	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <LL_ADC_SetOffset+0x44>)
 8000b92:	4013      	ands	r3, r2
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ba8:	bf00      	nop
 8000baa:	371c      	adds	r7, #28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	03fff000 	.word	0x03fff000

08000bb8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3360      	adds	r3, #96	@ 0x60
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3360      	adds	r3, #96	@ 0x60
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	4413      	add	r3, r2
 8000bfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000c0e:	bf00      	nop
 8000c10:	371c      	adds	r7, #28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b087      	sub	sp, #28
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	3360      	adds	r3, #96	@ 0x60
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000c44:	bf00      	nop
 8000c46:	371c      	adds	r7, #28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b087      	sub	sp, #28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3360      	adds	r3, #96	@ 0x60
 8000c60:	461a      	mov	r2, r3
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	431a      	orrs	r2, r3
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000c7a:	bf00      	nop
 8000c7c:	371c      	adds	r7, #28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	615a      	str	r2, [r3, #20]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b087      	sub	sp, #28
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	3330      	adds	r3, #48	@ 0x30
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	0a1b      	lsrs	r3, r3, #8
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	f003 030c 	and.w	r3, r3, #12
 8000cee:	4413      	add	r3, r2
 8000cf0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	f003 031f 	and.w	r3, r3, #31
 8000cfc:	211f      	movs	r1, #31
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	401a      	ands	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	0e9b      	lsrs	r3, r3, #26
 8000d0a:	f003 011f 	and.w	r1, r3, #31
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	f003 031f 	and.w	r3, r3, #31
 8000d14:	fa01 f303 	lsl.w	r3, r1, r3
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d1e:	bf00      	nop
 8000d20:	371c      	adds	r7, #28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b087      	sub	sp, #28
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	3314      	adds	r3, #20
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	0e5b      	lsrs	r3, r3, #25
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	4413      	add	r3, r2
 8000d48:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	0d1b      	lsrs	r3, r3, #20
 8000d52:	f003 031f 	and.w	r3, r3, #31
 8000d56:	2107      	movs	r1, #7
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	401a      	ands	r2, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	0d1b      	lsrs	r3, r3, #20
 8000d64:	f003 031f 	and.w	r3, r3, #31
 8000d68:	6879      	ldr	r1, [r7, #4]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000d74:	bf00      	nop
 8000d76:	371c      	adds	r7, #28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0318 	and.w	r3, r3, #24
 8000da2:	4908      	ldr	r1, [pc, #32]	@ (8000dc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000da4:	40d9      	lsrs	r1, r3
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	400b      	ands	r3, r1
 8000daa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000dae:	431a      	orrs	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	000fffff 	.word	0x000fffff

08000dc8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f003 031f 	and.w	r3, r3, #31
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000df4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	6093      	str	r3, [r2, #8]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e1c:	d101      	bne.n	8000e22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e000      	b.n	8000e24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000e40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e44:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000e6c:	d101      	bne.n	8000e72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000e90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e94:	f043 0201 	orr.w	r2, r3, #1
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d101      	bne.n	8000ec0 <LL_ADC_IsEnabled+0x18>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <LL_ADC_IsEnabled+0x1a>
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ede:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ee2:	f043 0204 	orr.w	r2, r3, #4
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	d101      	bne.n	8000f0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 0308 	and.w	r3, r3, #8
 8000f2c:	2b08      	cmp	r3, #8
 8000f2e:	d101      	bne.n	8000f34 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f30:	2301      	movs	r3, #1
 8000f32:	e000      	b.n	8000f36 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b089      	sub	sp, #36	@ 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e136      	b.n	80011cc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d109      	bne.n	8000f80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff fadf 	bl	8000530 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff3f 	bl	8000e08 <LL_ADC_IsDeepPowerDownEnabled>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff25 	bl	8000de4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff5a 	bl	8000e58 <LL_ADC_IsInternalRegulatorEnabled>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d115      	bne.n	8000fd6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff3e 	bl	8000e30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000fb4:	4b87      	ldr	r3, [pc, #540]	@ (80011d4 <HAL_ADC_Init+0x290>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	099b      	lsrs	r3, r3, #6
 8000fba:	4a87      	ldr	r2, [pc, #540]	@ (80011d8 <HAL_ADC_Init+0x294>)
 8000fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc0:	099b      	lsrs	r3, r3, #6
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000fc8:	e002      	b.n	8000fd0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f9      	bne.n	8000fca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff3c 	bl	8000e58 <LL_ADC_IsInternalRegulatorEnabled>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10d      	bne.n	8001002 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fea:	f043 0210 	orr.w	r2, r3, #16
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ff6:	f043 0201 	orr.w	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff75 	bl	8000ef6 <LL_ADC_REG_IsConversionOngoing>
 800100c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	2b00      	cmp	r3, #0
 8001018:	f040 80cf 	bne.w	80011ba <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	2b00      	cmp	r3, #0
 8001020:	f040 80cb 	bne.w	80011ba <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001028:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800102c:	f043 0202 	orr.w	r2, r3, #2
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff35 	bl	8000ea8 <LL_ADC_IsEnabled>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d110      	bne.n	8001066 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001044:	4865      	ldr	r0, [pc, #404]	@ (80011dc <HAL_ADC_Init+0x298>)
 8001046:	f7ff ff2f 	bl	8000ea8 <LL_ADC_IsEnabled>
 800104a:	4604      	mov	r4, r0
 800104c:	4864      	ldr	r0, [pc, #400]	@ (80011e0 <HAL_ADC_Init+0x29c>)
 800104e:	f7ff ff2b 	bl	8000ea8 <LL_ADC_IsEnabled>
 8001052:	4603      	mov	r3, r0
 8001054:	4323      	orrs	r3, r4
 8001056:	2b00      	cmp	r3, #0
 8001058:	d105      	bne.n	8001066 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4619      	mov	r1, r3
 8001060:	4860      	ldr	r0, [pc, #384]	@ (80011e4 <HAL_ADC_Init+0x2a0>)
 8001062:	f7ff fd2b 	bl	8000abc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7e5b      	ldrb	r3, [r3, #25]
 800106a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001070:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001076:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800107c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001084:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d106      	bne.n	80010a2 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001098:	3b01      	subs	r3, #1
 800109a:	045b      	lsls	r3, r3, #17
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d009      	beq.n	80010be <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ae:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b6:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	4b48      	ldr	r3, [pc, #288]	@ (80011e8 <HAL_ADC_Init+0x2a4>)
 80010c6:	4013      	ands	r3, r2
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	69b9      	ldr	r1, [r7, #24]
 80010ce:	430b      	orrs	r3, r1
 80010d0:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff15 	bl	8000f1c <LL_ADC_INJ_IsConversionOngoing>
 80010f2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d13d      	bne.n	8001176 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d13a      	bne.n	8001176 <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7e1b      	ldrb	r3, [r3, #24]
 8001104:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800110c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800111c:	f023 0302 	bic.w	r3, r3, #2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	69b9      	ldr	r1, [r7, #24]
 8001126:	430b      	orrs	r3, r1
 8001128:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001130:	2b01      	cmp	r3, #1
 8001132:	d118      	bne.n	8001166 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800113e:	f023 0304 	bic.w	r3, r3, #4
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800114a:	4311      	orrs	r1, r2
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001150:	4311      	orrs	r1, r2
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001156:	430a      	orrs	r2, r1
 8001158:	431a      	orrs	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0201 	orr.w	r2, r2, #1
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	e007      	b.n	8001176 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0201 	bic.w	r2, r2, #1
 8001174:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d10c      	bne.n	8001198 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001184:	f023 010f 	bic.w	r1, r3, #15
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	631a      	str	r2, [r3, #48]	@ 0x30
 8001196:	e007      	b.n	80011a8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 020f 	bic.w	r2, r2, #15
 80011a6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ac:	f023 0303 	bic.w	r3, r3, #3
 80011b0:	f043 0201 	orr.w	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80011b8:	e007      	b.n	80011ca <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011be:	f043 0210 	orr.w	r2, r3, #16
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3724      	adds	r7, #36	@ 0x24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd90      	pop	{r4, r7, pc}
 80011d4:	20000000 	.word	0x20000000
 80011d8:	053e2d63 	.word	0x053e2d63
 80011dc:	42028000 	.word	0x42028000
 80011e0:	42028100 	.word	0x42028100
 80011e4:	42028300 	.word	0x42028300
 80011e8:	fff04007 	.word	0xfff04007

080011ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0a2      	sub	sp, #136	@ 0x88
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80011f8:	488b      	ldr	r0, [pc, #556]	@ (8001428 <HAL_ADC_Start_DMA+0x23c>)
 80011fa:	f7ff fde5 	bl	8000dc8 <LL_ADC_GetMultimode>
 80011fe:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fe76 	bl	8000ef6 <LL_ADC_REG_IsConversionOngoing>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	f040 8101 	bne.w	8001414 <HAL_ADC_Start_DMA+0x228>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <HAL_ADC_Start_DMA+0x34>
 800121c:	2302      	movs	r3, #2
 800121e:	e0fe      	b.n	800141e <HAL_ADC_Start_DMA+0x232>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001228:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800122a:	2b00      	cmp	r3, #0
 800122c:	d006      	beq.n	800123c <HAL_ADC_Start_DMA+0x50>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800122e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001230:	2b05      	cmp	r3, #5
 8001232:	d003      	beq.n	800123c <HAL_ADC_Start_DMA+0x50>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001234:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001236:	2b09      	cmp	r3, #9
 8001238:	f040 80e4 	bne.w	8001404 <HAL_ADC_Start_DMA+0x218>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f000 fd23 	bl	8001c88 <ADC_Enable>
 8001242:	4603      	mov	r3, r0
 8001244:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001248:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800124c:	2b00      	cmp	r3, #0
 800124e:	f040 80d4 	bne.w	80013fa <HAL_ADC_Start_DMA+0x20e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001256:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800125a:	f023 0301 	bic.w	r3, r3, #1
 800125e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a70      	ldr	r2, [pc, #448]	@ (800142c <HAL_ADC_Start_DMA+0x240>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d002      	beq.n	8001276 <HAL_ADC_Start_DMA+0x8a>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	e000      	b.n	8001278 <HAL_ADC_Start_DMA+0x8c>
 8001276:	4b6e      	ldr	r3, [pc, #440]	@ (8001430 <HAL_ADC_Start_DMA+0x244>)
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	4293      	cmp	r3, r2
 800127e:	d002      	beq.n	8001286 <HAL_ADC_Start_DMA+0x9a>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001280:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001282:	2b00      	cmp	r3, #0
 8001284:	d105      	bne.n	8001292 <HAL_ADC_Start_DMA+0xa6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001296:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d006      	beq.n	80012ac <HAL_ADC_Start_DMA+0xc0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012a2:	f023 0206 	bic.w	r2, r3, #6
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012aa:	e002      	b.n	80012b2 <HAL_ADC_Start_DMA+0xc6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2200      	movs	r2, #0
 80012b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012b6:	4a5f      	ldr	r2, [pc, #380]	@ (8001434 <HAL_ADC_Start_DMA+0x248>)
 80012b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012be:	4a5e      	ldr	r2, [pc, #376]	@ (8001438 <HAL_ADC_Start_DMA+0x24c>)
 80012c0:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012c6:	4a5d      	ldr	r2, [pc, #372]	@ (800143c <HAL_ADC_Start_DMA+0x250>)
 80012c8:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	221c      	movs	r2, #28
 80012d0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f042 0210 	orr.w	r2, r2, #16
 80012e8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f042 0201 	orr.w	r2, r2, #1
 80012f8:	60da      	str	r2, [r3, #12]

        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001304:	2b00      	cmp	r3, #0
 8001306:	d04d      	beq.n	80013a4 <HAL_ADC_Start_DMA+0x1b8>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800130c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800130e:	2b00      	cmp	r3, #0
 8001310:	d046      	beq.n	80013a0 <HAL_ADC_Start_DMA+0x1b4>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d040      	beq.n	80013a0 <HAL_ADC_Start_DMA+0x1b4>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f001 fb55 	bl	80029dc <HAL_DMAEx_List_GetNodeConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_ADC_Start_DMA+0x150>
            {
              return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e070      	b.n	800141e <HAL_ADC_Start_DMA+0x232>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800133c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800133e:	2b02      	cmp	r3, #2
 8001340:	d104      	bne.n	800134c <HAL_ADC_Start_DMA+0x160>
            {
              /* Word -> Bytes */
              length_bytes = Length * 4U;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800134a:	e00a      	b.n	8001362 <HAL_ADC_Start_DMA+0x176>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800134c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800134e:	2b01      	cmp	r3, #1
 8001350:	d104      	bne.n	800135c <HAL_ADC_Start_DMA+0x170>
            {
              /* Halfword -> Bytes */
              length_bytes = Length * 2U;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800135a:	e002      	b.n	8001362 <HAL_ADC_Start_DMA+0x176>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              length_bytes = Length;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)length_bytes;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800136e:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800137c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001392:	4618      	mov	r0, r3
 8001394:	f001 fa72 	bl	800287c <HAL_DMAEx_List_Start_IT>
 8001398:	4603      	mov	r3, r0
 800139a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800139e:	e026      	b.n	80013ee <HAL_ADC_Start_DMA+0x202>
          }
          else
          {
            return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e03c      	b.n	800141e <HAL_ADC_Start_DMA+0x232>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d104      	bne.n	80013b8 <HAL_ADC_Start_DMA+0x1cc>
          {
            /* Word -> Bytes */
            length_bytes = Length * 4U;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80013b6:	e00c      	b.n	80013d2 <HAL_ADC_Start_DMA+0x1e6>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d104      	bne.n	80013cc <HAL_ADC_Start_DMA+0x1e0>
          {
            /* Halfword -> Bytes */
            length_bytes = Length * 2U;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80013ca:	e002      	b.n	80013d2 <HAL_ADC_Start_DMA+0x1e6>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            length_bytes = Length;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          /* Start the DMA channel */
          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3340      	adds	r3, #64	@ 0x40
 80013dc:	4619      	mov	r1, r3
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013e4:	f000 fef6 	bl	80021d4 <HAL_DMA_Start_IT>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fd6b 	bl	8000ece <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80013f8:	e00f      	b.n	800141a <HAL_ADC_Start_DMA+0x22e>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8001402:	e00a      	b.n	800141a <HAL_ADC_Start_DMA+0x22e>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001412:	e002      	b.n	800141a <HAL_ADC_Start_DMA+0x22e>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001414:	2302      	movs	r3, #2
 8001416:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  /* Return function status */
  return tmp_hal_status;
 800141a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800141e:	4618      	mov	r0, r3
 8001420:	3788      	adds	r7, #136	@ 0x88
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	42028300 	.word	0x42028300
 800142c:	42028100 	.word	0x42028100
 8001430:	42028000 	.word	0x42028000
 8001434:	08001d8d 	.word	0x08001d8d
 8001438:	08001e65 	.word	0x08001e65
 800143c:	08001e81 	.word	0x08001e81

08001440 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b0b6      	sub	sp, #216	@ 0xd8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001482:	2b01      	cmp	r3, #1
 8001484:	d101      	bne.n	800148a <HAL_ADC_ConfigChannel+0x22>
 8001486:	2302      	movs	r3, #2
 8001488:	e3e6      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x7f0>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fd2d 	bl	8000ef6 <LL_ADC_REG_IsConversionOngoing>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f040 83cb 	bne.w	8001c3a <HAL_ADC_ConfigChannel+0x7d2>
  {
    if ((pConfig->Channel == ADC_CHANNEL_0)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d009      	beq.n	80014c0 <HAL_ADC_ConfigChannel+0x58>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4ab0      	ldr	r2, [pc, #704]	@ (8001774 <HAL_ADC_ConfigChannel+0x30c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d109      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x62>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	4aaf      	ldr	r2, [pc, #700]	@ (8001778 <HAL_ADC_ConfigChannel+0x310>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d104      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x62>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fb3f 	bl	8000b48 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	6859      	ldr	r1, [r3, #4]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	f7ff fbfb 	bl	8000cd2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fd08 	bl	8000ef6 <LL_ADC_REG_IsConversionOngoing>
 80014e6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fd14 	bl	8000f1c <LL_ADC_INJ_IsConversionOngoing>
 80014f4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f040 81dd 	bne.w	80018bc <HAL_ADC_ConfigChannel+0x454>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 81d8 	bne.w	80018bc <HAL_ADC_ConfigChannel+0x454>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001514:	d10f      	bne.n	8001536 <HAL_ADC_ConfigChannel+0xce>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2200      	movs	r2, #0
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fc02 	bl	8000d2a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fba9 	bl	8000c86 <LL_ADC_SetSamplingTimeCommonConfig>
 8001534:	e00e      	b.n	8001554 <HAL_ADC_ConfigChannel+0xec>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	6819      	ldr	r1, [r3, #0]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	461a      	mov	r2, r3
 8001544:	f7ff fbf1 	bl	8000d2a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fb99 	bl	8000c86 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	695a      	ldr	r2, [r3, #20]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	08db      	lsrs	r3, r3, #3
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	2b04      	cmp	r3, #4
 8001574:	d022      	beq.n	80015bc <HAL_ADC_ConfigChannel+0x154>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	6919      	ldr	r1, [r3, #16]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001586:	f7ff faf3 	bl	8000b70 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	6919      	ldr	r1, [r3, #16]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	461a      	mov	r2, r3
 8001598:	f7ff fb3f 	bl	8000c1a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d102      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x14a>
 80015ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015b0:	e000      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x14c>
 80015b2:	2300      	movs	r3, #0
 80015b4:	461a      	mov	r2, r3
 80015b6:	f7ff fb4b 	bl	8000c50 <LL_ADC_SetOffsetSaturation>
 80015ba:	e17f      	b.n	80018bc <HAL_ADC_ConfigChannel+0x454>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff faf8 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10a      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x180>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff faed 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	0e9b      	lsrs	r3, r3, #26
 80015e2:	f003 021f 	and.w	r2, r3, #31
 80015e6:	e01e      	b.n	8001626 <HAL_ADC_ConfigChannel+0x1be>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fae2 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8001606:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800160a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 800160e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_ADC_ConfigChannel+0x1b2>
    return 32U;
 8001616:	2320      	movs	r3, #32
 8001618:	e004      	b.n	8001624 <HAL_ADC_ConfigChannel+0x1bc>
  return __builtin_clz(value);
 800161a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800161e:	fab3 f383 	clz	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800162e:	2b00      	cmp	r3, #0
 8001630:	d105      	bne.n	800163e <HAL_ADC_ConfigChannel+0x1d6>
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	0e9b      	lsrs	r3, r3, #26
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	e018      	b.n	8001670 <HAL_ADC_ConfigChannel+0x208>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001646:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800164a:	fa93 f3a3 	rbit	r3, r3
 800164e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001656:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800165a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 8001662:	2320      	movs	r3, #32
 8001664:	e004      	b.n	8001670 <HAL_ADC_ConfigChannel+0x208>
  return __builtin_clz(value);
 8001666:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001670:	429a      	cmp	r2, r3
 8001672:	d106      	bne.n	8001682 <HAL_ADC_ConfigChannel+0x21a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fab1 	bl	8000be4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2101      	movs	r1, #1
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fa95 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10a      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x246>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2101      	movs	r1, #1
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fa8a 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	0e9b      	lsrs	r3, r3, #26
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	e01e      	b.n	80016ec <HAL_ADC_ConfigChannel+0x284>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2101      	movs	r1, #1
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fa7f 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80016cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80016d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80016d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x278>
    return 32U;
 80016dc:	2320      	movs	r3, #32
 80016de:	e004      	b.n	80016ea <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 80016e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016e4:	fab3 f383 	clz	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x29c>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	0e9b      	lsrs	r3, r3, #26
 80016fe:	f003 031f 	and.w	r3, r3, #31
 8001702:	e018      	b.n	8001736 <HAL_ADC_ConfigChannel+0x2ce>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001710:	fa93 f3a3 	rbit	r3, r3
 8001714:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001718:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800171c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001720:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8001728:	2320      	movs	r3, #32
 800172a:	e004      	b.n	8001736 <HAL_ADC_ConfigChannel+0x2ce>
  return __builtin_clz(value);
 800172c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001730:	fab3 f383 	clz	r3, r3
 8001734:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001736:	429a      	cmp	r2, r3
 8001738:	d106      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x2e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2200      	movs	r2, #0
 8001740:	2101      	movs	r1, #1
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fa4e 	bl	8000be4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2102      	movs	r1, #2
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fa32 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10e      	bne.n	800177c <HAL_ADC_ConfigChannel+0x314>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2102      	movs	r1, #2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fa27 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	0e9b      	lsrs	r3, r3, #26
 800176e:	f003 021f 	and.w	r2, r3, #31
 8001772:	e022      	b.n	80017ba <HAL_ADC_ConfigChannel+0x352>
 8001774:	04300002 	.word	0x04300002
 8001778:	407f0000 	.word	0x407f0000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2102      	movs	r1, #2
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fa18 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800179a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800179e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80017a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x346>
    return 32U;
 80017aa:	2320      	movs	r3, #32
 80017ac:	e004      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 80017ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017b2:	fab3 f383 	clz	r3, r3
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d105      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x36a>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	0e9b      	lsrs	r3, r3, #26
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	e016      	b.n	8001800 <HAL_ADC_ConfigChannel+0x398>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017de:	fa93 f3a3 	rbit	r3, r3
 80017e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80017e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80017e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80017ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x38e>
    return 32U;
 80017f2:	2320      	movs	r3, #32
 80017f4:	e004      	b.n	8001800 <HAL_ADC_ConfigChannel+0x398>
  return __builtin_clz(value);
 80017f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017fa:	fab3 f383 	clz	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001800:	429a      	cmp	r2, r3
 8001802:	d106      	bne.n	8001812 <HAL_ADC_ConfigChannel+0x3aa>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2200      	movs	r2, #0
 800180a:	2102      	movs	r1, #2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff f9e9 	bl	8000be4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2103      	movs	r1, #3
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff f9cd 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10a      	bne.n	800183e <HAL_ADC_ConfigChannel+0x3d6>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2103      	movs	r1, #3
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff f9c2 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	0e9b      	lsrs	r3, r3, #26
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	e017      	b.n	800186e <HAL_ADC_ConfigChannel+0x406>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2103      	movs	r1, #3
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff f9b7 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001850:	fa93 f3a3 	rbit	r3, r3
 8001854:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001856:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001858:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800185a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001860:	2320      	movs	r3, #32
 8001862:	e003      	b.n	800186c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001864:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001876:	2b00      	cmp	r3, #0
 8001878:	d105      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x41e>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	0e9b      	lsrs	r3, r3, #26
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	e011      	b.n	80018aa <HAL_ADC_ConfigChannel+0x442>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001894:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001896:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x43a>
    return 32U;
 800189e:	2320      	movs	r3, #32
 80018a0:	e003      	b.n	80018aa <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 80018a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018a4:	fab3 f383 	clz	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d106      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x454>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2200      	movs	r2, #0
 80018b4:	2103      	movs	r1, #3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f994 	bl	8000be4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff faf1 	bl	8000ea8 <LL_ADC_IsEnabled>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f040 813f 	bne.w	8001b4c <HAL_ADC_ConfigChannel+0x6e4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	6819      	ldr	r1, [r3, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	461a      	mov	r2, r3
 80018dc:	f7ff fa50 	bl	8000d80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4a8e      	ldr	r2, [pc, #568]	@ (8001b20 <HAL_ADC_ConfigChannel+0x6b8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	f040 8130 	bne.w	8001b4c <HAL_ADC_ConfigChannel+0x6e4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10b      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x4ac>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0e9b      	lsrs	r3, r3, #26
 8001902:	3301      	adds	r3, #1
 8001904:	f003 031f 	and.w	r3, r3, #31
 8001908:	2b09      	cmp	r3, #9
 800190a:	bf94      	ite	ls
 800190c:	2301      	movls	r3, #1
 800190e:	2300      	movhi	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	e019      	b.n	8001948 <HAL_ADC_ConfigChannel+0x4e0>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001922:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001924:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001926:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x4c8>
    return 32U;
 800192c:	2320      	movs	r3, #32
 800192e:	e003      	b.n	8001938 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8001930:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	3301      	adds	r3, #1
 800193a:	f003 031f 	and.w	r3, r3, #31
 800193e:	2b09      	cmp	r3, #9
 8001940:	bf94      	ite	ls
 8001942:	2301      	movls	r3, #1
 8001944:	2300      	movhi	r3, #0
 8001946:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001948:	2b00      	cmp	r3, #0
 800194a:	d079      	beq.n	8001a40 <HAL_ADC_ConfigChannel+0x5d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001954:	2b00      	cmp	r3, #0
 8001956:	d107      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x500>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	0e9b      	lsrs	r3, r3, #26
 800195e:	3301      	adds	r3, #1
 8001960:	069b      	lsls	r3, r3, #26
 8001962:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001966:	e015      	b.n	8001994 <HAL_ADC_ConfigChannel+0x52c>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001978:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800197a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x51c>
    return 32U;
 8001980:	2320      	movs	r3, #32
 8001982:	e003      	b.n	800198c <HAL_ADC_ConfigChannel+0x524>
  return __builtin_clz(value);
 8001984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001986:	fab3 f383 	clz	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	3301      	adds	r3, #1
 800198e:	069b      	lsls	r3, r3, #26
 8001990:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800199c:	2b00      	cmp	r3, #0
 800199e:	d109      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x54c>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	0e9b      	lsrs	r3, r3, #26
 80019a6:	3301      	adds	r3, #1
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	2101      	movs	r1, #1
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	e017      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x57c>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019bc:	fa93 f3a3 	rbit	r3, r3
 80019c0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80019c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80019c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x568>
    return 32U;
 80019cc:	2320      	movs	r3, #32
 80019ce:	e003      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x570>
  return __builtin_clz(value);
 80019d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019d2:	fab3 f383 	clz	r3, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	3301      	adds	r3, #1
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	2101      	movs	r1, #1
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	ea42 0103 	orr.w	r1, r2, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10a      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x5a2>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0e9b      	lsrs	r3, r3, #26
 80019fa:	3301      	adds	r3, #1
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	051b      	lsls	r3, r3, #20
 8001a08:	e018      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x5d4>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x5be>
    return 32U;
 8001a22:	2320      	movs	r3, #32
 8001a24:	e003      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x5c6>
  return __builtin_clz(value);
 8001a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	3301      	adds	r3, #1
 8001a30:	f003 021f 	and.w	r2, r3, #31
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a3c:	430b      	orrs	r3, r1
 8001a3e:	e080      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x6da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d107      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x5f4>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0e9b      	lsrs	r3, r3, #26
 8001a52:	3301      	adds	r3, #1
 8001a54:	069b      	lsls	r3, r3, #26
 8001a56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a5a:	e015      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x620>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x610>
    return 32U;
 8001a74:	2320      	movs	r3, #32
 8001a76:	e003      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x618>
  return __builtin_clz(value);
 8001a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	3301      	adds	r3, #1
 8001a82:	069b      	lsls	r3, r3, #26
 8001a84:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d109      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x640>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	0e9b      	lsrs	r3, r3, #26
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	e017      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x670>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	61fb      	str	r3, [r7, #28]
  return result;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x65c>
    return 32U;
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	e003      	b.n	8001acc <HAL_ADC_ConfigChannel+0x664>
  return __builtin_clz(value);
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	3301      	adds	r3, #1
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	ea42 0103 	orr.w	r1, r2, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10d      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x69c>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	0e9b      	lsrs	r3, r3, #26
 8001aee:	3301      	adds	r3, #1
 8001af0:	f003 021f 	and.w	r2, r3, #31
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	3b1e      	subs	r3, #30
 8001afc:	051b      	lsls	r3, r3, #20
 8001afe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b02:	e01d      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x6d8>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	fa93 f3a3 	rbit	r3, r3
 8001b10:	613b      	str	r3, [r7, #16]
  return result;
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d103      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x6bc>
    return 32U;
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	e005      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x6c4>
 8001b20:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f003 021f 	and.w	r2, r3, #31
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	3b1e      	subs	r3, #30
 8001b3a:	051b      	lsls	r3, r3, #20
 8001b3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b40:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b46:	4619      	mov	r1, r3
 8001b48:	f7ff f8ef 	bl	8000d2a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b43      	ldr	r3, [pc, #268]	@ (8001c60 <HAL_ADC_ConfigChannel+0x7f8>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d079      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0x7e4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b58:	4842      	ldr	r0, [pc, #264]	@ (8001c64 <HAL_ADC_ConfigChannel+0x7fc>)
 8001b5a:	f7fe ffd5 	bl	8000b08 <LL_ADC_GetCommonPathInternalCh>
 8001b5e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a40      	ldr	r2, [pc, #256]	@ (8001c68 <HAL_ADC_ConfigChannel+0x800>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d124      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x74e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d11e      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x74e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c6c <HAL_ADC_ConfigChannel+0x804>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d164      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4835      	ldr	r0, [pc, #212]	@ (8001c64 <HAL_ADC_ConfigChannel+0x7fc>)
 8001b8e:	f7fe ffa8 	bl	8000ae2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b92:	4b37      	ldr	r3, [pc, #220]	@ (8001c70 <HAL_ADC_ConfigChannel+0x808>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	099b      	lsrs	r3, r3, #6
 8001b98:	4a36      	ldr	r2, [pc, #216]	@ (8001c74 <HAL_ADC_ConfigChannel+0x80c>)
 8001b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9e:	099b      	lsrs	r3, r3, #6
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ba6:	e002      	b.n	8001bae <HAL_ADC_ConfigChannel+0x746>
          {
            wait_loop_index--;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f9      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x740>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bb4:	e04a      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x7e4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a2f      	ldr	r2, [pc, #188]	@ (8001c78 <HAL_ADC_ConfigChannel+0x810>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d113      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x780>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001bc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10d      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a2a      	ldr	r2, [pc, #168]	@ (8001c7c <HAL_ADC_ConfigChannel+0x814>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d13a      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bde:	4619      	mov	r1, r3
 8001be0:	4820      	ldr	r0, [pc, #128]	@ (8001c64 <HAL_ADC_ConfigChannel+0x7fc>)
 8001be2:	f7fe ff7e 	bl	8000ae2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001be6:	e031      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a24      	ldr	r2, [pc, #144]	@ (8001c80 <HAL_ADC_ConfigChannel+0x818>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d113      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x7b2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10d      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x7b2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1a      	ldr	r2, [pc, #104]	@ (8001c6c <HAL_ADC_ConfigChannel+0x804>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d121      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c10:	4619      	mov	r1, r3
 8001c12:	4814      	ldr	r0, [pc, #80]	@ (8001c64 <HAL_ADC_ConfigChannel+0x7fc>)
 8001c14:	f7fe ff65 	bl	8000ae2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c18:	e018      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a19      	ldr	r2, [pc, #100]	@ (8001c84 <HAL_ADC_ConfigChannel+0x81c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d113      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x7e4>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a10      	ldr	r2, [pc, #64]	@ (8001c6c <HAL_ADC_ConfigChannel+0x804>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00e      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe ff76 	bl	8000b24 <LL_ADC_EnableChannelVDDcore>
 8001c38:	e008      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x7e4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3e:	f043 0220 	orr.w	r2, r3, #32
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001c54:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	37d8      	adds	r7, #216	@ 0xd8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	80080000 	.word	0x80080000
 8001c64:	42028300 	.word	0x42028300
 8001c68:	c3210000 	.word	0xc3210000
 8001c6c:	42028000 	.word	0x42028000
 8001c70:	20000000 	.word	0x20000000
 8001c74:	053e2d63 	.word	0x053e2d63
 8001c78:	43290000 	.word	0x43290000
 8001c7c:	42028100 	.word	0x42028100
 8001c80:	c7520000 	.word	0xc7520000
 8001c84:	475a0000 	.word	0x475a0000

08001c88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff f905 	bl	8000ea8 <LL_ADC_IsEnabled>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d166      	bne.n	8001d72 <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	4b34      	ldr	r3, [pc, #208]	@ (8001d7c <ADC_Enable+0xf4>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00d      	beq.n	8001cce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb6:	f043 0210 	orr.w	r2, r3, #16
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc2:	f043 0201 	orr.w	r2, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e052      	b.n	8001d74 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff f8d4 	bl	8000e80 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001cd8:	4829      	ldr	r0, [pc, #164]	@ (8001d80 <ADC_Enable+0xf8>)
 8001cda:	f7fe ff15 	bl	8000b08 <LL_ADC_GetCommonPathInternalCh>
 8001cde:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001ce0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d010      	beq.n	8001d0a <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ce8:	4b26      	ldr	r3, [pc, #152]	@ (8001d84 <ADC_Enable+0xfc>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	099b      	lsrs	r3, r3, #6
 8001cee:	4a26      	ldr	r2, [pc, #152]	@ (8001d88 <ADC_Enable+0x100>)
 8001cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cfc:	e002      	b.n	8001d04 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f9      	bne.n	8001cfe <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001d0a:	f7fe fecb 	bl	8000aa4 <HAL_GetTick>
 8001d0e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d10:	e028      	b.n	8001d64 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f8c6 	bl	8000ea8 <LL_ADC_IsEnabled>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d104      	bne.n	8001d2c <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f8aa 	bl	8000e80 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d2c:	f7fe feba 	bl	8000aa4 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d914      	bls.n	8001d64 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d00d      	beq.n	8001d64 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4c:	f043 0210 	orr.w	r2, r3, #16
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e007      	b.n	8001d74 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d1cf      	bne.n	8001d12 <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	8000003f 	.word	0x8000003f
 8001d80:	42028300 	.word	0x42028300
 8001d84:	20000000 	.word	0x20000000
 8001d88:	053e2d63 	.word	0x053e2d63

08001d8c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d14b      	bne.n	8001e3e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001daa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d021      	beq.n	8001e04 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe ff71 	bl	8000cac <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d032      	beq.n	8001e36 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d12b      	bne.n	8001e36 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d11f      	bne.n	8001e36 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e02:	e018      	b.n	8001e36 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d111      	bne.n	8001e36 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d105      	bne.n	8001e36 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2e:	f043 0201 	orr.w	r2, r3, #1
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7fe fa2c 	bl	8000294 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e3c:	e00e      	b.n	8001e5c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f7ff fb02 	bl	8001454 <HAL_ADC_ErrorCallback>
}
 8001e50:	e004      	b.n	8001e5c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
}
 8001e5c:	bf00      	nop
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7ff fae4 	bl	8001440 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9e:	f043 0204 	orr.w	r2, r3, #4
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f7ff fad4 	bl	8001454 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee6:	4a04      	ldr	r2, [pc, #16]	@ (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	60d3      	str	r3, [r2, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f00:	4b04      	ldr	r3, [pc, #16]	@ (8001f14 <__NVIC_GetPriorityGrouping+0x18>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	f003 0307 	and.w	r3, r3, #7
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	db0b      	blt.n	8001f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	4907      	ldr	r1, [pc, #28]	@ (8001f50 <__NVIC_EnableIRQ+0x38>)
 8001f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	2001      	movs	r0, #1
 8001f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000e100 	.word	0xe000e100

08001f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	6039      	str	r1, [r7, #0]
 8001f5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	db0a      	blt.n	8001f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	490c      	ldr	r1, [pc, #48]	@ (8001fa0 <__NVIC_SetPriority+0x4c>)
 8001f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f72:	0112      	lsls	r2, r2, #4
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	440b      	add	r3, r1
 8001f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f7c:	e00a      	b.n	8001f94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4908      	ldr	r1, [pc, #32]	@ (8001fa4 <__NVIC_SetPriority+0x50>)
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	3b04      	subs	r3, #4
 8001f8c:	0112      	lsls	r2, r2, #4
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	440b      	add	r3, r1
 8001f92:	761a      	strb	r2, [r3, #24]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000e100 	.word	0xe000e100
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	@ 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f1c3 0307 	rsb	r3, r3, #7
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	bf28      	it	cs
 8001fc6:	2304      	movcs	r3, #4
 8001fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d902      	bls.n	8001fd8 <NVIC_EncodePriority+0x30>
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3b03      	subs	r3, #3
 8001fd6:	e000      	b.n	8001fda <NVIC_EncodePriority+0x32>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	401a      	ands	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	43d9      	mvns	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	4313      	orrs	r3, r2
         );
}
 8002002:	4618      	mov	r0, r3
 8002004:	3724      	adds	r7, #36	@ 0x24
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ff4c 	bl	8001eb4 <__NVIC_SetPriorityGrouping>
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002032:	f7ff ff63 	bl	8001efc <__NVIC_GetPriorityGrouping>
 8002036:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68b9      	ldr	r1, [r7, #8]
 800203c:	6978      	ldr	r0, [r7, #20]
 800203e:	f7ff ffb3 	bl	8001fa8 <NVIC_EncodePriority>
 8002042:	4602      	mov	r2, r0
 8002044:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff82 	bl	8001f54 <__NVIC_SetPriority>
}
 8002050:	bf00      	nop
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff56 	bl	8001f18 <__NVIC_EnableIRQ>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002084:	d301      	bcc.n	800208a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002086:	2301      	movs	r3, #1
 8002088:	e00d      	b.n	80020a6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800208a:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <HAL_SYSTICK_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002092:	4b08      	ldr	r3, [pc, #32]	@ (80020b4 <HAL_SYSTICK_Config+0x40>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002098:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <HAL_SYSTICK_Config+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a05      	ldr	r2, [pc, #20]	@ (80020b4 <HAL_SYSTICK_Config+0x40>)
 800209e:	f043 0303 	orr.w	r3, r3, #3
 80020a2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d844      	bhi.n	8002150 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80020c6:	a201      	add	r2, pc, #4	@ (adr r2, 80020cc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80020c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020cc:	080020ef 	.word	0x080020ef
 80020d0:	0800210d 	.word	0x0800210d
 80020d4:	0800212f 	.word	0x0800212f
 80020d8:	08002151 	.word	0x08002151
 80020dc:	080020e1 	.word	0x080020e1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80020e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002160 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002160 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	6013      	str	r3, [r2, #0]
      break;
 80020ec:	e031      	b.n	8002152 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80020ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002160 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80020fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002100:	4a18      	ldr	r2, [pc, #96]	@ (8002164 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002102:	f023 030c 	bic.w	r3, r3, #12
 8002106:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800210a:	e022      	b.n	8002152 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800210c:	4b14      	ldr	r3, [pc, #80]	@ (8002160 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a13      	ldr	r2, [pc, #76]	@ (8002160 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002112:	f023 0304 	bic.w	r3, r3, #4
 8002116:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002118:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800211a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800211e:	f023 030c 	bic.w	r3, r3, #12
 8002122:	4a10      	ldr	r2, [pc, #64]	@ (8002164 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002124:	f043 0304 	orr.w	r3, r3, #4
 8002128:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800212c:	e011      	b.n	8002152 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800212e:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a0b      	ldr	r2, [pc, #44]	@ (8002160 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800213a:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800213c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002140:	f023 030c 	bic.w	r3, r3, #12
 8002144:	4a07      	ldr	r2, [pc, #28]	@ (8002164 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002146:	f043 0308 	orr.w	r3, r3, #8
 800214a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800214e:	e000      	b.n	8002152 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002150:	bf00      	nop
  }
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000e010 	.word	0xe000e010
 8002164:	44020c00 	.word	0x44020c00

08002168 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800216e:	4b17      	ldr	r3, [pc, #92]	@ (80021cc <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800217a:	2304      	movs	r3, #4
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	e01e      	b.n	80021be <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002180:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002182:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b08      	cmp	r3, #8
 8002190:	d00f      	beq.n	80021b2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b08      	cmp	r3, #8
 8002196:	d80f      	bhi.n	80021b8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d003      	beq.n	80021ac <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80021a4:	e008      	b.n	80021b8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
        break;
 80021aa:	e008      	b.n	80021be <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80021ac:	2301      	movs	r3, #1
 80021ae:	607b      	str	r3, [r7, #4]
        break;
 80021b0:	e005      	b.n	80021be <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80021b2:	2302      	movs	r3, #2
 80021b4:	607b      	str	r3, [r7, #4]
        break;
 80021b6:	e002      	b.n	80021be <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80021b8:	2300      	movs	r3, #0
 80021ba:	607b      	str	r3, [r7, #4]
        break;
 80021bc:	bf00      	nop
    }
  }
  return systick_source;
 80021be:	687b      	ldr	r3, [r7, #4]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000e010 	.word	0xe000e010
 80021d0:	44020c00 	.word	0x44020c00

080021d4 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e055      	b.n	8002298 <HAL_DMA_Start_IT+0xc4>
  }

  /* Check the DMA Mode is DMA_NORMAL */
  if (hdma->Mode != DMA_NORMAL)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_DMA_Start_IT+0x24>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e04f      	b.n	8002298 <HAL_DMA_Start_IT+0xc4>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_DMA_Start_IT+0x32>
 8002202:	2302      	movs	r3, #2
 8002204:	e048      	b.n	8002298 <HAL_DMA_Start_IT+0xc4>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d136      	bne.n	8002288 <HAL_DMA_Start_IT+0xb4>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2202      	movs	r2, #2
 800221e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 f9d3 	bl	80025da <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002242:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002248:	2b00      	cmp	r3, #0
 800224a:	d007      	beq.n	800225c <HAL_DMA_Start_IT+0x88>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800225a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <HAL_DMA_Start_IT+0xa0>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002272:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	e007      	b.n	8002298 <HAL_DMA_Start_IT+0xc4>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2240      	movs	r2, #64	@ 0x40
 800228c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80022b0:	f023 030f 	bic.w	r3, r3, #15
 80022b4:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022be:	3b50      	subs	r3, #80	@ 0x50
 80022c0:	09db      	lsrs	r3, r3, #7
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	2201      	movs	r2, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4013      	ands	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 813b 	beq.w	8002556 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d011      	beq.n	8002312 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002304:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800231c:	2b00      	cmp	r3, #0
 800231e:	d011      	beq.n	8002344 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002336:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233c:	f043 0202 	orr.w	r2, r3, #2
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d011      	beq.n	8002376 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002368:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236e:	f043 0204 	orr.w	r2, r3, #4
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d011      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800239a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a0:	f043 0208 	orr.w	r2, r3, #8
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d013      	beq.n	80023de <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00c      	beq.n	80023de <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023cc:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d04c      	beq.n	8002486 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d045      	beq.n	8002486 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002402:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b04      	cmp	r3, #4
 800240e:	d12e      	bne.n	800246e <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800241e:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0202 	orr.w	r2, r2, #2
 800242e:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800243c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002448:	2201      	movs	r2, #1
 800244a:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2200      	movs	r2, #0
 8002452:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d07a      	beq.n	800255a <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	4798      	blx	r3
        }

        return;
 800246c:	e075      	b.n	800255a <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2205      	movs	r2, #5
 8002472:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d039      	beq.n	8002508 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d032      	beq.n	8002508 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d012      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d116      	bne.n	80024e6 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d111      	bne.n	80024e6 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ce:	2201      	movs	r2, #1
 80024d0:	731a      	strb	r2, [r3, #12]
 80024d2:	e008      	b.n	80024e6 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d103      	bne.n	80024e6 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80024ee:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250c:	2b00      	cmp	r3, #0
 800250e:	d025      	beq.n	800255c <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0202 	orr.w	r2, r2, #2
 800251e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800252c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002538:	2201      	movs	r2, #1
 800253a:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002548:	2b00      	cmp	r3, #0
 800254a:	d007      	beq.n	800255c <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4798      	blx	r3
 8002554:	e002      	b.n	800255c <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002556:	bf00      	nop
 8002558:	e000      	b.n	800255c <HAL_DMA_IRQHandler+0x2bc>
        return;
 800255a:	bf00      	nop
    }
  }
}
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002562:	b480      	push	{r7}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e02b      	b.n	80025ce <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800257e:	f023 030f 	bic.w	r3, r3, #15
 8002582:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258c:	3b50      	subs	r3, #80	@ 0x50
 800258e:	09db      	lsrs	r3, r3, #7
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	2201      	movs	r2, #1
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d012      	beq.n	80025cc <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	f003 0311 	and.w	r3, r3, #17
 80025ac:	2b11      	cmp	r3, #17
 80025ae:	d106      	bne.n	80025be <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	e006      	b.n	80025cc <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	401a      	ands	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80025da:	b480      	push	{r7}
 80025dc:	b085      	sub	sp, #20
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ee:	0c1b      	lsrs	r3, r3, #16
 80025f0:	041b      	lsls	r3, r3, #16
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	b291      	uxth	r1, r2
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	430b      	orrs	r3, r1
 80025fc:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002606:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800262c:	f7fe fa3a 	bl	8000aa4 <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0db      	b.n	80027f4 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a6e      	ldr	r2, [pc, #440]	@ (80027fc <HAL_DMAEx_List_Init+0x1d8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	f000 809f 	beq.w	8002786 <HAL_DMAEx_List_Init+0x162>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a6c      	ldr	r2, [pc, #432]	@ (8002800 <HAL_DMAEx_List_Init+0x1dc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	f000 8099 	beq.w	8002786 <HAL_DMAEx_List_Init+0x162>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a6a      	ldr	r2, [pc, #424]	@ (8002804 <HAL_DMAEx_List_Init+0x1e0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	f000 8093 	beq.w	8002786 <HAL_DMAEx_List_Init+0x162>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a68      	ldr	r2, [pc, #416]	@ (8002808 <HAL_DMAEx_List_Init+0x1e4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	f000 808d 	beq.w	8002786 <HAL_DMAEx_List_Init+0x162>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a66      	ldr	r2, [pc, #408]	@ (800280c <HAL_DMAEx_List_Init+0x1e8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	f000 8087 	beq.w	8002786 <HAL_DMAEx_List_Init+0x162>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a64      	ldr	r2, [pc, #400]	@ (8002810 <HAL_DMAEx_List_Init+0x1ec>)
 800267e:	4293      	cmp	r3, r2
 8002680:	f000 8081 	beq.w	8002786 <HAL_DMAEx_List_Init+0x162>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a62      	ldr	r2, [pc, #392]	@ (8002814 <HAL_DMAEx_List_Init+0x1f0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d07b      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a61      	ldr	r2, [pc, #388]	@ (8002818 <HAL_DMAEx_List_Init+0x1f4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d076      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a5f      	ldr	r2, [pc, #380]	@ (800281c <HAL_DMAEx_List_Init+0x1f8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d071      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002820 <HAL_DMAEx_List_Init+0x1fc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d06c      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a5c      	ldr	r2, [pc, #368]	@ (8002824 <HAL_DMAEx_List_Init+0x200>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d067      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002828 <HAL_DMAEx_List_Init+0x204>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d062      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a59      	ldr	r2, [pc, #356]	@ (800282c <HAL_DMAEx_List_Init+0x208>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d05d      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a58      	ldr	r2, [pc, #352]	@ (8002830 <HAL_DMAEx_List_Init+0x20c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d058      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a56      	ldr	r2, [pc, #344]	@ (8002834 <HAL_DMAEx_List_Init+0x210>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d053      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a55      	ldr	r2, [pc, #340]	@ (8002838 <HAL_DMAEx_List_Init+0x214>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d04e      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a53      	ldr	r2, [pc, #332]	@ (800283c <HAL_DMAEx_List_Init+0x218>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d049      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a52      	ldr	r2, [pc, #328]	@ (8002840 <HAL_DMAEx_List_Init+0x21c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d044      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a50      	ldr	r2, [pc, #320]	@ (8002844 <HAL_DMAEx_List_Init+0x220>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d03f      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a4f      	ldr	r2, [pc, #316]	@ (8002848 <HAL_DMAEx_List_Init+0x224>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d03a      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a4d      	ldr	r2, [pc, #308]	@ (800284c <HAL_DMAEx_List_Init+0x228>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d035      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a4c      	ldr	r2, [pc, #304]	@ (8002850 <HAL_DMAEx_List_Init+0x22c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d030      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a4a      	ldr	r2, [pc, #296]	@ (8002854 <HAL_DMAEx_List_Init+0x230>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d02b      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a49      	ldr	r2, [pc, #292]	@ (8002858 <HAL_DMAEx_List_Init+0x234>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d026      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a47      	ldr	r2, [pc, #284]	@ (800285c <HAL_DMAEx_List_Init+0x238>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d021      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a46      	ldr	r2, [pc, #280]	@ (8002860 <HAL_DMAEx_List_Init+0x23c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d01c      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a44      	ldr	r2, [pc, #272]	@ (8002864 <HAL_DMAEx_List_Init+0x240>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d017      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a43      	ldr	r2, [pc, #268]	@ (8002868 <HAL_DMAEx_List_Init+0x244>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d012      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a41      	ldr	r2, [pc, #260]	@ (800286c <HAL_DMAEx_List_Init+0x248>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00d      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a40      	ldr	r2, [pc, #256]	@ (8002870 <HAL_DMAEx_List_Init+0x24c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d008      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a3e      	ldr	r2, [pc, #248]	@ (8002874 <HAL_DMAEx_List_Init+0x250>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d003      	beq.n	8002786 <HAL_DMAEx_List_Init+0x162>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a3d      	ldr	r2, [pc, #244]	@ (8002878 <HAL_DMAEx_List_Init+0x254>)
 8002784:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2202      	movs	r2, #2
 8002792:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0206 	orr.w	r2, r2, #6
 80027a4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80027a6:	e00f      	b.n	80027c8 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80027a8:	f7fe f97c 	bl	8000aa4 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b05      	cmp	r3, #5
 80027b4:	d908      	bls.n	80027c8 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2210      	movs	r2, #16
 80027ba:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2203      	movs	r2, #3
 80027c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e015      	b.n	80027f4 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1e8      	bne.n	80027a8 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fadc 	bl	8002d94 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40020050 	.word	0x40020050
 8002800:	50020050 	.word	0x50020050
 8002804:	400200d0 	.word	0x400200d0
 8002808:	500200d0 	.word	0x500200d0
 800280c:	40020150 	.word	0x40020150
 8002810:	50020150 	.word	0x50020150
 8002814:	400201d0 	.word	0x400201d0
 8002818:	500201d0 	.word	0x500201d0
 800281c:	40020250 	.word	0x40020250
 8002820:	50020250 	.word	0x50020250
 8002824:	400202d0 	.word	0x400202d0
 8002828:	500202d0 	.word	0x500202d0
 800282c:	40020350 	.word	0x40020350
 8002830:	50020350 	.word	0x50020350
 8002834:	400203d0 	.word	0x400203d0
 8002838:	500203d0 	.word	0x500203d0
 800283c:	40021050 	.word	0x40021050
 8002840:	50021050 	.word	0x50021050
 8002844:	400210d0 	.word	0x400210d0
 8002848:	500210d0 	.word	0x500210d0
 800284c:	40021150 	.word	0x40021150
 8002850:	50021150 	.word	0x50021150
 8002854:	400211d0 	.word	0x400211d0
 8002858:	500211d0 	.word	0x500211d0
 800285c:	40021250 	.word	0x40021250
 8002860:	50021250 	.word	0x50021250
 8002864:	400212d0 	.word	0x400212d0
 8002868:	500212d0 	.word	0x500212d0
 800286c:	40021350 	.word	0x40021350
 8002870:	50021350 	.word	0x50021350
 8002874:	400213d0 	.word	0x400213d0
 8002878:	500213d0 	.word	0x500213d0

0800287c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_DMAEx_List_Start_IT+0x16>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e088      	b.n	80029a8 <HAL_DMAEx_List_Start_IT+0x12c>
  }

  /* Check the DMA Mode is not DMA_NORMAL */
  if (hdma->Mode == DMA_NORMAL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_DMAEx_List_Start_IT+0x26>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e082      	b.n	80029a8 <HAL_DMAEx_List_Start_IT+0x12c>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80028a8:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b4:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d005      	beq.n	80028c8 <HAL_DMAEx_List_Start_IT+0x4c>
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d16a      	bne.n	8002998 <HAL_DMAEx_List_Start_IT+0x11c>
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d067      	beq.n	8002998 <HAL_DMAEx_List_Start_IT+0x11c>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d157      	bne.n	8002984 <HAL_DMAEx_List_Start_IT+0x108>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_DMAEx_List_Start_IT+0x66>
 80028de:	2302      	movs	r3, #2
 80028e0:	e062      	b.n	80029a8 <HAL_DMAEx_List_Start_IT+0x12c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028f6:	2202      	movs	r2, #2
 80028f8:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002916:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_DMAEx_List_Start_IT+0xb4>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800292e:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <HAL_DMAEx_List_Start_IT+0xcc>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002946:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f107 010c 	add.w	r1, r7, #12
 8002952:	2200      	movs	r2, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fe4b 	bl	80035f0 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4619      	mov	r1, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	0c0b      	lsrs	r3, r1, #16
 8002968:	041b      	lsls	r3, r3, #16
 800296a:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002978:	4013      	ands	r3, r2
 800297a:	68f9      	ldr	r1, [r7, #12]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	430b      	orrs	r3, r1
 8002982:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	e007      	b.n	80029a8 <HAL_DMAEx_List_Start_IT+0x12c>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2240      	movs	r2, #64	@ 0x40
 800299c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <HAL_DMAEx_List_BuildNode+0x16>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e004      	b.n	80029d4 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80029ca:	6839      	ldr	r1, [r7, #0]
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fb39 	bl	8003044 <DMA_List_BuildNode>

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HAL_DMAEx_List_GetNodeConfig+0x16>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e004      	b.n	8002a00 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80029f6:	6839      	ldr	r1, [r7, #0]
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fc83 	bl	8003304 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08c      	sub	sp, #48	@ 0x30
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_DMAEx_List_InsertNode+0x18>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0b6      	b.n	8002b92 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d104      	bne.n	8002a36 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2204      	movs	r2, #4
 8002a30:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e0ad      	b.n	8002b92 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fd6a 	bl	8003518 <DMA_List_CheckNodesBaseAddresses>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d004      	beq.n	8002a54 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2205      	movs	r2, #5
 8002a4e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e09e      	b.n	8002b92 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fd8b 	bl	8003578 <DMA_List_CheckNodesTypes>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d004      	beq.n	8002a72 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e08f      	b.n	8002b92 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2202      	movs	r2, #2
 8002a76:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8002a7e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002a82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fdb1 	bl	80035f0 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d11a      	bne.n	8002acc <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d106      	bne.n	8002aaa <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	e06c      	b.n	8002b84 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002aba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002abc:	4319      	orrs	r1, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	e05b      	b.n	8002b84 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10f      	bne.n	8002af2 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002adc:	4013      	ands	r3, r2
 8002ade:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ae0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ae2:	4319      	orrs	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e043      	b.n	8002b7a <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8002af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af4:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8002af6:	f107 0314 	add.w	r3, r7, #20
 8002afa:	461a      	mov	r2, r3
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 fda6 	bl	8003650 <DMA_List_FindNode>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d132      	bne.n	8002b70 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d11a      	bne.n	8002b4a <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00b      	beq.n	8002b34 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	461a      	mov	r2, r3
 8002b22:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002b26:	4013      	ands	r3, r2
 8002b28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b2c:	4319      	orrs	r1, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b40:	4319      	orrs	r1, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002b48:	e017      	b.n	8002b7a <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8002b4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002b60:	4013      	ands	r3, r2
 8002b62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b66:	4319      	orrs	r1, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002b6e:	e004      	b.n	8002b7a <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2206      	movs	r2, #6
 8002b74:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e00b      	b.n	8002b92 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3730      	adds	r7, #48	@ 0x30
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b08a      	sub	sp, #40	@ 0x28
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e052      	b.n	8002c52 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d104      	bne.n	8002bbe <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e049      	b.n	8002c52 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00c      	beq.n	8002be0 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d101      	bne.n	8002bd6 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e03d      	b.n	8002c52 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2204      	movs	r2, #4
 8002bda:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e038      	b.n	8002c52 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d104      	bne.n	8002bf2 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2204      	movs	r2, #4
 8002bec:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e02f      	b.n	8002c52 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f107 0220 	add.w	r2, r7, #32
 8002c06:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fcf0 	bl	80035f0 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8002c14:	f107 030c 	add.w	r3, r7, #12
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fd17 	bl	8003650 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4610      	mov	r0, r2
 8002c34:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8002c36:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8002c38:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3728      	adds	r7, #40	@ 0x28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <HAL_DMAEx_List_LinkQ+0x16>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e078      	b.n	8002d68 <HAL_DMAEx_List_LinkQ+0x10c>
  }

  /* Check the DMA Mode is not DMA_NORMAL */
  if (hdma->Mode == DMA_NORMAL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_DMAEx_List_LinkQ+0x26>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e072      	b.n	8002d68 <HAL_DMAEx_List_LinkQ+0x10c>
  }

  /* Get DMA state */
  state = hdma->State;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002c88:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d002      	beq.n	8002c9c <HAL_DMAEx_List_LinkQ+0x40>
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d108      	bne.n	8002cae <HAL_DMAEx_List_LinkQ+0x52>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2240      	movs	r2, #64	@ 0x40
 8002ca0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e05c      	b.n	8002d68 <HAL_DMAEx_List_LinkQ+0x10c>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	7b1b      	ldrb	r3, [r3, #12]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d104      	bne.n	8002cc2 <HAL_DMAEx_List_LinkQ+0x66>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e052      	b.n	8002d68 <HAL_DMAEx_List_LinkQ+0x10c>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a2b      	ldr	r2, [pc, #172]	@ (8002d74 <HAL_DMAEx_List_LinkQ+0x118>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d022      	beq.n	8002d12 <HAL_DMAEx_List_LinkQ+0xb6>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a29      	ldr	r2, [pc, #164]	@ (8002d78 <HAL_DMAEx_List_LinkQ+0x11c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01d      	beq.n	8002d12 <HAL_DMAEx_List_LinkQ+0xb6>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a28      	ldr	r2, [pc, #160]	@ (8002d7c <HAL_DMAEx_List_LinkQ+0x120>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d018      	beq.n	8002d12 <HAL_DMAEx_List_LinkQ+0xb6>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a26      	ldr	r2, [pc, #152]	@ (8002d80 <HAL_DMAEx_List_LinkQ+0x124>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <HAL_DMAEx_List_LinkQ+0xb6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a25      	ldr	r2, [pc, #148]	@ (8002d84 <HAL_DMAEx_List_LinkQ+0x128>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00e      	beq.n	8002d12 <HAL_DMAEx_List_LinkQ+0xb6>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a23      	ldr	r2, [pc, #140]	@ (8002d88 <HAL_DMAEx_List_LinkQ+0x12c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_DMAEx_List_LinkQ+0xb6>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a22      	ldr	r2, [pc, #136]	@ (8002d8c <HAL_DMAEx_List_LinkQ+0x130>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_DMAEx_List_LinkQ+0xb6>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a20      	ldr	r2, [pc, #128]	@ (8002d90 <HAL_DMAEx_List_LinkQ+0x134>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <HAL_DMAEx_List_LinkQ+0xba>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_DMAEx_List_LinkQ+0xbc>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10b      	bne.n	8002d34 <HAL_DMAEx_List_LinkQ+0xd8>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d004      	beq.n	8002d34 <HAL_DMAEx_List_LinkQ+0xd8>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e019      	b.n	8002d68 <HAL_DMAEx_List_LinkQ+0x10c>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d38:	2b81      	cmp	r3, #129	@ 0x81
 8002d3a:	d108      	bne.n	8002d4e <HAL_DMAEx_List_LinkQ+0xf2>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10d      	bne.n	8002d60 <HAL_DMAEx_List_LinkQ+0x104>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2204      	movs	r2, #4
 8002d48:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00c      	b.n	8002d68 <HAL_DMAEx_List_LinkQ+0x10c>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d004      	beq.n	8002d60 <HAL_DMAEx_List_LinkQ+0x104>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2204      	movs	r2, #4
 8002d5a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e003      	b.n	8002d68 <HAL_DMAEx_List_LinkQ+0x10c>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40020350 	.word	0x40020350
 8002d78:	50020350 	.word	0x50020350
 8002d7c:	400203d0 	.word	0x400203d0
 8002d80:	500203d0 	.word	0x500203d0
 8002d84:	40021350 	.word	0x40021350
 8002d88:	50021350 	.word	0x50021350
 8002d8c:	400213d0 	.word	0x400213d0
 8002d90:	500213d0 	.word	0x500213d0

08002d94 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a85      	ldr	r2, [pc, #532]	@ (8002fc4 <DMA_List_Init+0x230>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	f000 80a0 	beq.w	8002ef4 <DMA_List_Init+0x160>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a83      	ldr	r2, [pc, #524]	@ (8002fc8 <DMA_List_Init+0x234>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	f000 809a 	beq.w	8002ef4 <DMA_List_Init+0x160>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a81      	ldr	r2, [pc, #516]	@ (8002fcc <DMA_List_Init+0x238>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	f000 8094 	beq.w	8002ef4 <DMA_List_Init+0x160>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a7f      	ldr	r2, [pc, #508]	@ (8002fd0 <DMA_List_Init+0x23c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	f000 808e 	beq.w	8002ef4 <DMA_List_Init+0x160>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a7d      	ldr	r2, [pc, #500]	@ (8002fd4 <DMA_List_Init+0x240>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	f000 8088 	beq.w	8002ef4 <DMA_List_Init+0x160>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a7b      	ldr	r2, [pc, #492]	@ (8002fd8 <DMA_List_Init+0x244>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	f000 8082 	beq.w	8002ef4 <DMA_List_Init+0x160>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a79      	ldr	r2, [pc, #484]	@ (8002fdc <DMA_List_Init+0x248>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d07c      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a78      	ldr	r2, [pc, #480]	@ (8002fe0 <DMA_List_Init+0x24c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d077      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a76      	ldr	r2, [pc, #472]	@ (8002fe4 <DMA_List_Init+0x250>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d072      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a75      	ldr	r2, [pc, #468]	@ (8002fe8 <DMA_List_Init+0x254>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d06d      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a73      	ldr	r2, [pc, #460]	@ (8002fec <DMA_List_Init+0x258>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d068      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a72      	ldr	r2, [pc, #456]	@ (8002ff0 <DMA_List_Init+0x25c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d063      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a70      	ldr	r2, [pc, #448]	@ (8002ff4 <DMA_List_Init+0x260>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d05e      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6f      	ldr	r2, [pc, #444]	@ (8002ff8 <DMA_List_Init+0x264>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d059      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a6d      	ldr	r2, [pc, #436]	@ (8002ffc <DMA_List_Init+0x268>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d054      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a6c      	ldr	r2, [pc, #432]	@ (8003000 <DMA_List_Init+0x26c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d04f      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a6a      	ldr	r2, [pc, #424]	@ (8003004 <DMA_List_Init+0x270>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d04a      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a69      	ldr	r2, [pc, #420]	@ (8003008 <DMA_List_Init+0x274>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d045      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a67      	ldr	r2, [pc, #412]	@ (800300c <DMA_List_Init+0x278>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d040      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a66      	ldr	r2, [pc, #408]	@ (8003010 <DMA_List_Init+0x27c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d03b      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a64      	ldr	r2, [pc, #400]	@ (8003014 <DMA_List_Init+0x280>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d036      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a63      	ldr	r2, [pc, #396]	@ (8003018 <DMA_List_Init+0x284>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d031      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a61      	ldr	r2, [pc, #388]	@ (800301c <DMA_List_Init+0x288>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d02c      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a60      	ldr	r2, [pc, #384]	@ (8003020 <DMA_List_Init+0x28c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d027      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a5e      	ldr	r2, [pc, #376]	@ (8003024 <DMA_List_Init+0x290>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d022      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a5d      	ldr	r2, [pc, #372]	@ (8003028 <DMA_List_Init+0x294>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d01d      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a5b      	ldr	r2, [pc, #364]	@ (800302c <DMA_List_Init+0x298>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d018      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a5a      	ldr	r2, [pc, #360]	@ (8003030 <DMA_List_Init+0x29c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d013      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a58      	ldr	r2, [pc, #352]	@ (8003034 <DMA_List_Init+0x2a0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00e      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a57      	ldr	r2, [pc, #348]	@ (8003038 <DMA_List_Init+0x2a4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d009      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a55      	ldr	r2, [pc, #340]	@ (800303c <DMA_List_Init+0x2a8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <DMA_List_Init+0x160>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a54      	ldr	r2, [pc, #336]	@ (8003040 <DMA_List_Init+0x2ac>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d101      	bne.n	8002ef8 <DMA_List_Init+0x164>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <DMA_List_Init+0x166>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d004      	beq.n	8002f08 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2200      	movs	r2, #0
 8002f22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002f2c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2200      	movs	r2, #0
 8002f34:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2200      	movs	r2, #0
 8002f44:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a2a      	ldr	r2, [pc, #168]	@ (8002ff4 <DMA_List_Init+0x260>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d022      	beq.n	8002f96 <DMA_List_Init+0x202>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a28      	ldr	r2, [pc, #160]	@ (8002ff8 <DMA_List_Init+0x264>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d01d      	beq.n	8002f96 <DMA_List_Init+0x202>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a27      	ldr	r2, [pc, #156]	@ (8002ffc <DMA_List_Init+0x268>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d018      	beq.n	8002f96 <DMA_List_Init+0x202>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a25      	ldr	r2, [pc, #148]	@ (8003000 <DMA_List_Init+0x26c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <DMA_List_Init+0x202>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a30      	ldr	r2, [pc, #192]	@ (8003034 <DMA_List_Init+0x2a0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00e      	beq.n	8002f96 <DMA_List_Init+0x202>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8003038 <DMA_List_Init+0x2a4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d009      	beq.n	8002f96 <DMA_List_Init+0x202>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a2d      	ldr	r2, [pc, #180]	@ (800303c <DMA_List_Init+0x2a8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <DMA_List_Init+0x202>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a2b      	ldr	r2, [pc, #172]	@ (8003040 <DMA_List_Init+0x2ac>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d101      	bne.n	8002f9a <DMA_List_Init+0x206>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <DMA_List_Init+0x208>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d007      	beq.n	8002fb0 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2200      	movs	r2, #0
 8002fae:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	40020050 	.word	0x40020050
 8002fc8:	50020050 	.word	0x50020050
 8002fcc:	400200d0 	.word	0x400200d0
 8002fd0:	500200d0 	.word	0x500200d0
 8002fd4:	40020150 	.word	0x40020150
 8002fd8:	50020150 	.word	0x50020150
 8002fdc:	400201d0 	.word	0x400201d0
 8002fe0:	500201d0 	.word	0x500201d0
 8002fe4:	40020250 	.word	0x40020250
 8002fe8:	50020250 	.word	0x50020250
 8002fec:	400202d0 	.word	0x400202d0
 8002ff0:	500202d0 	.word	0x500202d0
 8002ff4:	40020350 	.word	0x40020350
 8002ff8:	50020350 	.word	0x50020350
 8002ffc:	400203d0 	.word	0x400203d0
 8003000:	500203d0 	.word	0x500203d0
 8003004:	40021050 	.word	0x40021050
 8003008:	50021050 	.word	0x50021050
 800300c:	400210d0 	.word	0x400210d0
 8003010:	500210d0 	.word	0x500210d0
 8003014:	40021150 	.word	0x40021150
 8003018:	50021150 	.word	0x50021150
 800301c:	400211d0 	.word	0x400211d0
 8003020:	500211d0 	.word	0x500211d0
 8003024:	40021250 	.word	0x40021250
 8003028:	50021250 	.word	0x50021250
 800302c:	400212d0 	.word	0x400212d0
 8003030:	500212d0 	.word	0x500212d0
 8003034:	40021350 	.word	0x40021350
 8003038:	50021350 	.word	0x50021350
 800303c:	400213d0 	.word	0x400213d0
 8003040:	500213d0 	.word	0x500213d0

08003044 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003056:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 800305c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003062:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8003068:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d017      	beq.n	80030aa <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003086:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308c:	3b01      	subs	r3, #1
 800308e:	051b      	lsls	r3, r3, #20
 8003090:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003094:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309a:	3b01      	subs	r3, #1
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80030a2:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80030a4:	431a      	orrs	r2, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	f240 23ff 	movw	r3, #767	@ 0x2ff
 80030b6:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80030b8:	431a      	orrs	r2, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c6:	d10c      	bne.n	80030e2 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d011      	beq.n	80030f8 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	605a      	str	r2, [r3, #4]
 80030e0:	e00a      	b.n	80030f8 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ea:	d105      	bne.n	80030f8 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Configure HW Peripheral flow control selection */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= pNodeConfig->Init.Mode;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003100:	431a      	orrs	r2, r3
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	605a      	str	r2, [r3, #4]

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00f      	beq.n	800312e <DMA_List_BuildNode+0xea>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311a:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003120:	041b      	lsls	r3, r3, #16
 8003122:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003126:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003128:	431a      	orrs	r2, r3
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003132:	b29a      	uxth	r2, r3
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d04e      	beq.n	80031e2 <DMA_List_BuildNode+0x19e>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800314c:	3b01      	subs	r3, #1
 800314e:	0419      	lsls	r1, r3, #16
 8003150:	4b6a      	ldr	r3, [pc, #424]	@ (80032fc <DMA_List_BuildNode+0x2b8>)
 8003152:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003154:	431a      	orrs	r2, r3
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315e:	2b00      	cmp	r3, #0
 8003160:	da06      	bge.n	8003170 <DMA_List_BuildNode+0x12c>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	609a      	str	r2, [r3, #8]
 800316e:	e005      	b.n	800317c <DMA_List_BuildNode+0x138>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003180:	2b00      	cmp	r3, #0
 8003182:	da06      	bge.n	8003192 <DMA_List_BuildNode+0x14e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	e005      	b.n	800319e <DMA_List_BuildNode+0x15a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	da06      	bge.n	80031b4 <DMA_List_BuildNode+0x170>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	609a      	str	r2, [r3, #8]
 80031b2:	e005      	b.n	80031c0 <DMA_List_BuildNode+0x17c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	da06      	bge.n	80031d6 <DMA_List_BuildNode+0x192>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	e005      	b.n	80031e2 <DMA_List_BuildNode+0x19e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d05d      	beq.n	80032ba <DMA_List_BuildNode+0x276>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003202:	2b00      	cmp	r3, #0
 8003204:	da09      	bge.n	800321a <DMA_List_BuildNode+0x1d6>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800320a:	425b      	negs	r3, r3
 800320c:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	615a      	str	r2, [r3, #20]
 8003218:	e005      	b.n	8003226 <DMA_List_BuildNode+0x1e2>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321e:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322a:	2b00      	cmp	r3, #0
 800322c:	da0d      	bge.n	800324a <DMA_List_BuildNode+0x206>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003232:	425b      	negs	r3, r3
 8003234:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	0419      	lsls	r1, r3, #16
 800323e:	4b30      	ldr	r3, [pc, #192]	@ (8003300 <DMA_List_BuildNode+0x2bc>)
 8003240:	400b      	ands	r3, r1
 8003242:	431a      	orrs	r2, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	615a      	str	r2, [r3, #20]
 8003248:	e009      	b.n	800325e <DMA_List_BuildNode+0x21a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003252:	0419      	lsls	r1, r3, #16
 8003254:	4b2a      	ldr	r3, [pc, #168]	@ (8003300 <DMA_List_BuildNode+0x2bc>)
 8003256:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8003258:	431a      	orrs	r2, r3
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003262:	2b00      	cmp	r3, #0
 8003264:	da08      	bge.n	8003278 <DMA_List_BuildNode+0x234>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326a:	425b      	negs	r3, r3
 800326c:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	b29a      	uxth	r2, r3
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	619a      	str	r2, [r3, #24]
 8003276:	e004      	b.n	8003282 <DMA_List_BuildNode+0x23e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003286:	2b00      	cmp	r3, #0
 8003288:	da0b      	bge.n	80032a2 <DMA_List_BuildNode+0x25e>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328e:	425b      	negs	r3, r3
 8003290:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800329a:	431a      	orrs	r2, r3
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	619a      	str	r2, [r3, #24]
 80032a0:	e007      	b.n	80032b2 <DMA_List_BuildNode+0x26e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032aa:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80032ac:	431a      	orrs	r2, r3
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	619a      	str	r2, [r3, #24]
    }
    /********************************************************************************* CBR2 register value is updated */

    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2200      	movs	r2, #0
 80032b6:	61da      	str	r2, [r3, #28]
 80032b8:	e002      	b.n	80032c0 <DMA_List_BuildNode+0x27c>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2200      	movs	r2, #0
 80032be:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d006      	beq.n	80032e2 <DMA_List_BuildNode+0x29e>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 80032e0:	e005      	b.n	80032ee <DMA_List_BuildNode+0x2aa>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	621a      	str	r2, [r3, #32]
}
 80032ee:	bf00      	nop
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	07ff0000 	.word	0x07ff0000
 8003300:	1fff0000 	.word	0x1fff0000

08003304 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	b2da      	uxtb	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0208 	and.w	r2, r3, #8
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0203 	and.w	r2, r3, #3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003352:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 800335c:	0d1b      	lsrs	r3, r3, #20
 800335e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003362:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b66      	ldr	r3, [pc, #408]	@ (8003514 <DMA_List_GetNodeConfig+0x210>)
 800337a:	4013      	ands	r3, r2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800339e:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033a6:	60da      	str	r2, [r3, #12]
 80033a8:	e012      	b.n	80033d0 <DMA_List_GetNodeConfig+0xcc>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d004      	beq.n	80033ca <DMA_List_GetNodeConfig+0xc6>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033c6:	60da      	str	r2, [r3, #12]
 80033c8:	e002      	b.n	80033d0 <DMA_List_GetNodeConfig+0xcc>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	b29a      	uxth	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <DMA_List_GetNodeConfig+0x132>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	0c1b      	lsrs	r3, r3, #16
 800342a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800342e:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003434:	e002      	b.n	800343c <DMA_List_GetNodeConfig+0x138>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d04a      	beq.n	80034ee <DMA_List_GetNodeConfig+0x1ea>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	b29b      	uxth	r3, r3
 800345e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003462:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8003464:	89fa      	ldrh	r2, [r7, #14]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	0c1b      	lsrs	r3, r3, #16
 8003470:	b29b      	uxth	r3, r3
 8003472:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003476:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8003478:	89fa      	ldrh	r2, [r7, #14]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d004      	beq.n	8003494 <DMA_List_GetNodeConfig+0x190>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800348e:	425a      	negs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d004      	beq.n	80034aa <DMA_List_GetNodeConfig+0x1a6>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a4:	425a      	negs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 80034b0:	89fa      	ldrh	r2, [r7, #14]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	0c1b      	lsrs	r3, r3, #16
 80034bc:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 80034be:	89fa      	ldrh	r2, [r7, #14]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d004      	beq.n	80034da <DMA_List_GetNodeConfig+0x1d6>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d4:	425a      	negs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	da11      	bge.n	8003506 <DMA_List_GetNodeConfig+0x202>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e6:	425a      	negs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 80034ec:	e00b      	b.n	8003506 <DMA_List_GetNodeConfig+0x202>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	0c002000 	.word	0x0c002000

08003518 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4313      	orrs	r3, r2
 800352e:	0c1b      	lsrs	r3, r3, #16
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	e00a      	b.n	800355a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	e004      	b.n	800355a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	0c1b      	lsrs	r3, r3, #16
 800355e:	041b      	lsls	r3, r3, #16
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	429a      	cmp	r2, r3
 8003564:	d001      	beq.n	800356a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d004      	beq.n	8003598 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e00e      	b.n	80035b6 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d004      	beq.n	80035a8 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	e006      	b.n	80035b6 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80035c8:	2302      	movs	r3, #2
 80035ca:	e00b      	b.n	80035e4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d007      	beq.n	80035e2 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d001      	beq.n	80035e2 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80035de:	2303      	movs	r3, #3
 80035e0:	e000      	b.n	80035e4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00c      	beq.n	8003622 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	4a0d      	ldr	r2, [pc, #52]	@ (8003648 <DMA_List_GetCLLRNodeInfo+0x58>)
 8003612:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00f      	beq.n	800363a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2207      	movs	r2, #7
 800361e:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8003620:	e00b      	b.n	800363a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4a08      	ldr	r2, [pc, #32]	@ (800364c <DMA_List_GetCLLRNodeInfo+0x5c>)
 800362c:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2205      	movs	r2, #5
 8003638:	601a      	str	r2, [r3, #0]
}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	fe010000 	.word	0xfe010000
 800364c:	f8010000 	.word	0xf8010000

08003650 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8003650:	b480      	push	{r7}
 8003652:	b089      	sub	sp, #36	@ 0x24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d142      	bne.n	80036fa <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8003674:	e01d      	b.n	80036b2 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d107      	bne.n	800368c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	e00f      	b.n	80036ac <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	0c1b      	lsrs	r3, r3, #16
 8003696:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4413      	add	r3, r2
 800369c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80036a4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	3301      	adds	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d3dc      	bcc.n	8003676 <DMA_List_FindNode+0x26>
 80036bc:	e029      	b.n	8003712 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d107      	bne.n	80036d4 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	e00f      	b.n	80036f4 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	0c1b      	lsrs	r3, r3, #16
 80036de:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4413      	add	r3, r2
 80036e4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80036ec:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80036f0:	4013      	ands	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	3301      	adds	r3, #1
 80036f8:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	429a      	cmp	r2, r3
 8003702:	d206      	bcs.n	8003712 <DMA_List_FindNode+0xc2>
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800370a:	4013      	ands	r3, r2
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	429a      	cmp	r2, r3
 8003710:	d1d5      	bne.n	80036be <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800371e:	4013      	ands	r3, r2
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	429a      	cmp	r2, r3
 8003724:	d001      	beq.n	800372a <DMA_List_FindNode+0xda>
    {
      return 1U;
 8003726:	2301      	movs	r3, #1
 8003728:	e02b      	b.n	8003782 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	0c1b      	lsrs	r3, r3, #16
 8003736:	041b      	lsls	r3, r3, #16
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	0c1b      	lsrs	r3, r3, #16
 8003746:	041b      	lsls	r3, r3, #16
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	461a      	mov	r2, r3
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00f      	beq.n	8003780 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	461a      	mov	r2, r3
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8003770:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	0c1b      	lsrs	r3, r3, #16
 8003778:	041b      	lsls	r3, r3, #16
 800377a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3724      	adds	r7, #36	@ 0x24
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800379e:	e142      	b.n	8003a26 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	2101      	movs	r1, #1
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ac:	4013      	ands	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 8134 	beq.w	8003a20 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x38>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b12      	cmp	r3, #18
 80037c6:	d125      	bne.n	8003814 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	08da      	lsrs	r2, r3, #3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3208      	adds	r2, #8
 80037d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	220f      	movs	r2, #15
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4013      	ands	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f003 020f 	and.w	r2, r3, #15
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	08da      	lsrs	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3208      	adds	r2, #8
 800380e:	6979      	ldr	r1, [r7, #20]
 8003810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2203      	movs	r2, #3
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4013      	ands	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 0203 	and.w	r2, r3, #3
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d00b      	beq.n	8003868 <HAL_GPIO_Init+0xd8>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d007      	beq.n	8003868 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800385c:	2b11      	cmp	r3, #17
 800385e:	d003      	beq.n	8003868 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b12      	cmp	r3, #18
 8003866:	d130      	bne.n	80038ca <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	2203      	movs	r2, #3
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4013      	ands	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800389e:	2201      	movs	r2, #1
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4013      	ands	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	f003 0201 	and.w	r2, r3, #1
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d109      	bne.n	80038ea <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d11b      	bne.n	800391a <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d017      	beq.n	800391a <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	2203      	movs	r2, #3
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4013      	ands	r3, r2
 8003900:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d07c      	beq.n	8003a20 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003926:	4a47      	ldr	r2, [pc, #284]	@ (8003a44 <HAL_GPIO_Init+0x2b4>)
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	089b      	lsrs	r3, r3, #2
 800392c:	3318      	adds	r3, #24
 800392e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003932:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	220f      	movs	r2, #15
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43db      	mvns	r3, r3
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4013      	ands	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	0a9a      	lsrs	r2, r3, #10
 800394e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a48 <HAL_GPIO_Init+0x2b8>)
 8003950:	4013      	ands	r3, r2
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	f002 0203 	and.w	r2, r2, #3
 8003958:	00d2      	lsls	r2, r2, #3
 800395a:	4093      	lsls	r3, r2
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003962:	4938      	ldr	r1, [pc, #224]	@ (8003a44 <HAL_GPIO_Init+0x2b4>)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	089b      	lsrs	r3, r3, #2
 8003968:	3318      	adds	r3, #24
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003970:	4b34      	ldr	r3, [pc, #208]	@ (8003a44 <HAL_GPIO_Init+0x2b4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	43db      	mvns	r3, r3
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4013      	ands	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003994:	4a2b      	ldr	r2, [pc, #172]	@ (8003a44 <HAL_GPIO_Init+0x2b4>)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800399a:	4b2a      	ldr	r3, [pc, #168]	@ (8003a44 <HAL_GPIO_Init+0x2b4>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	4013      	ands	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80039be:	4a21      	ldr	r2, [pc, #132]	@ (8003a44 <HAL_GPIO_Init+0x2b4>)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80039c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a44 <HAL_GPIO_Init+0x2b4>)
 80039c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039ca:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4013      	ands	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80039ea:	4a16      	ldr	r2, [pc, #88]	@ (8003a44 <HAL_GPIO_Init+0x2b4>)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80039f2:	4b14      	ldr	r3, [pc, #80]	@ (8003a44 <HAL_GPIO_Init+0x2b4>)
 80039f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039f8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	43db      	mvns	r3, r3
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4013      	ands	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003a18:	4a0a      	ldr	r2, [pc, #40]	@ (8003a44 <HAL_GPIO_Init+0x2b4>)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	3301      	adds	r3, #1
 8003a24:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f47f aeb5 	bne.w	80037a0 <HAL_GPIO_Init+0x10>
  }
}
 8003a36:	bf00      	nop
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	44022000 	.word	0x44022000
 8003a48:	002f7f7f 	.word	0x002f7f7f

08003a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	807b      	strh	r3, [r7, #2]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a5c:	787b      	ldrb	r3, [r7, #1]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a62:	887a      	ldrh	r2, [r7, #2]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a68:	e002      	b.n	8003a70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a6a:	887a      	ldrh	r2, [r7, #2]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a8e:	887a      	ldrh	r2, [r7, #2]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4013      	ands	r3, r2
 8003a94:	041a      	lsls	r2, r3, #16
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	43d9      	mvns	r1, r3
 8003a9a:	887b      	ldrh	r3, [r7, #2]
 8003a9c:	400b      	ands	r3, r1
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	619a      	str	r2, [r3, #24]
}
 8003aa4:	bf00      	nop
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d102      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f000 bc28 	b.w	8004314 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ac4:	4b94      	ldr	r3, [pc, #592]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f003 0318 	and.w	r3, r3, #24
 8003acc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003ace:	4b92      	ldr	r3, [pc, #584]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d05b      	beq.n	8003b9c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d005      	beq.n	8003af6 <HAL_RCC_OscConfig+0x46>
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	2b18      	cmp	r3, #24
 8003aee:	d114      	bne.n	8003b1a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d111      	bne.n	8003b1a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d102      	bne.n	8003b04 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f000 bc08 	b.w	8004314 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003b04:	4b84      	ldr	r3, [pc, #528]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	4981      	ldr	r1, [pc, #516]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003b18:	e040      	b.n	8003b9c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d023      	beq.n	8003b6a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b22:	4b7d      	ldr	r3, [pc, #500]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a7c      	ldr	r2, [pc, #496]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2e:	f7fc ffb9 	bl	8000aa4 <HAL_GetTick>
 8003b32:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003b36:	f7fc ffb5 	bl	8000aa4 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e3e5      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003b48:	4b73      	ldr	r3, [pc, #460]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003b54:	4b70      	ldr	r3, [pc, #448]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	041b      	lsls	r3, r3, #16
 8003b62:	496d      	ldr	r1, [pc, #436]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	618b      	str	r3, [r1, #24]
 8003b68:	e018      	b.n	8003b9c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b6a:	4b6b      	ldr	r3, [pc, #428]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6a      	ldr	r2, [pc, #424]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003b70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b76:	f7fc ff95 	bl	8000aa4 <HAL_GetTick>
 8003b7a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003b7e:	f7fc ff91 	bl	8000aa4 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e3c1      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003b90:	4b61      	ldr	r3, [pc, #388]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f0      	bne.n	8003b7e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 80a0 	beq.w	8003cea <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_OscConfig+0x10c>
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	2b18      	cmp	r3, #24
 8003bb4:	d109      	bne.n	8003bca <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d106      	bne.n	8003bca <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f040 8092 	bne.w	8003cea <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e3a4      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd2:	d106      	bne.n	8003be2 <HAL_RCC_OscConfig+0x132>
 8003bd4:	4b50      	ldr	r3, [pc, #320]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a4f      	ldr	r2, [pc, #316]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	e058      	b.n	8003c94 <HAL_RCC_OscConfig+0x1e4>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d112      	bne.n	8003c10 <HAL_RCC_OscConfig+0x160>
 8003bea:	4b4b      	ldr	r3, [pc, #300]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a4a      	ldr	r2, [pc, #296]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003bf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	4b48      	ldr	r3, [pc, #288]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a47      	ldr	r2, [pc, #284]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003bfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	4b45      	ldr	r3, [pc, #276]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a44      	ldr	r2, [pc, #272]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e041      	b.n	8003c94 <HAL_RCC_OscConfig+0x1e4>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c18:	d112      	bne.n	8003c40 <HAL_RCC_OscConfig+0x190>
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a3e      	ldr	r2, [pc, #248]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b3c      	ldr	r3, [pc, #240]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a3b      	ldr	r2, [pc, #236]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	4b39      	ldr	r3, [pc, #228]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a38      	ldr	r2, [pc, #224]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e029      	b.n	8003c94 <HAL_RCC_OscConfig+0x1e4>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003c48:	d112      	bne.n	8003c70 <HAL_RCC_OscConfig+0x1c0>
 8003c4a:	4b33      	ldr	r3, [pc, #204]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a32      	ldr	r2, [pc, #200]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	4b30      	ldr	r3, [pc, #192]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a2f      	ldr	r2, [pc, #188]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	4b2d      	ldr	r3, [pc, #180]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a2c      	ldr	r2, [pc, #176]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	e011      	b.n	8003c94 <HAL_RCC_OscConfig+0x1e4>
 8003c70:	4b29      	ldr	r3, [pc, #164]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a28      	ldr	r2, [pc, #160]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	4b26      	ldr	r3, [pc, #152]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a25      	ldr	r2, [pc, #148]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	4b23      	ldr	r3, [pc, #140]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a22      	ldr	r2, [pc, #136]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003c8e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d013      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fc ff02 	bl	8000aa4 <HAL_GetTick>
 8003ca0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003ca4:	f7fc fefe 	bl	8000aa4 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	@ 0x64
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e32e      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cb6:	4b18      	ldr	r3, [pc, #96]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x1f4>
 8003cc2:	e012      	b.n	8003cea <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7fc feee 	bl	8000aa4 <HAL_GetTick>
 8003cc8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003ccc:	f7fc feea 	bl	8000aa4 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b64      	cmp	r3, #100	@ 0x64
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e31a      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cde:	4b0e      	ldr	r3, [pc, #56]	@ (8003d18 <HAL_RCC_OscConfig+0x268>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 809a 	beq.w	8003e2c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d005      	beq.n	8003d0a <HAL_RCC_OscConfig+0x25a>
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	2b18      	cmp	r3, #24
 8003d02:	d149      	bne.n	8003d98 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d146      	bne.n	8003d98 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d104      	bne.n	8003d1c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e2fe      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
 8003d16:	bf00      	nop
 8003d18:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d11c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003d22:	4b9a      	ldr	r3, [pc, #616]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0218 	and.w	r2, r3, #24
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d014      	beq.n	8003d5c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003d32:	4b96      	ldr	r3, [pc, #600]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 0218 	bic.w	r2, r3, #24
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	4993      	ldr	r1, [pc, #588]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003d44:	f000 fdd0 	bl	80048e8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d48:	4b91      	ldr	r3, [pc, #580]	@ (8003f90 <HAL_RCC_OscConfig+0x4e0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fc fe1f 	bl	8000990 <HAL_InitTick>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e2db      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fc fea2 	bl	8000aa4 <HAL_GetTick>
 8003d60:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003d64:	f7fc fe9e 	bl	8000aa4 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e2ce      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d76:	4b85      	ldr	r3, [pc, #532]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003d82:	4b82      	ldr	r3, [pc, #520]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	041b      	lsls	r3, r3, #16
 8003d90:	497e      	ldr	r1, [pc, #504]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003d96:	e049      	b.n	8003e2c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d02c      	beq.n	8003dfa <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003da0:	4b7a      	ldr	r3, [pc, #488]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f023 0218 	bic.w	r2, r3, #24
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	4977      	ldr	r1, [pc, #476]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003db2:	4b76      	ldr	r3, [pc, #472]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a75      	ldr	r2, [pc, #468]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbe:	f7fc fe71 	bl	8000aa4 <HAL_GetTick>
 8003dc2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003dc6:	f7fc fe6d 	bl	8000aa4 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e29d      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dd8:	4b6c      	ldr	r3, [pc, #432]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003de4:	4b69      	ldr	r3, [pc, #420]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	041b      	lsls	r3, r3, #16
 8003df2:	4966      	ldr	r1, [pc, #408]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	610b      	str	r3, [r1, #16]
 8003df8:	e018      	b.n	8003e2c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfa:	4b64      	ldr	r3, [pc, #400]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a63      	ldr	r2, [pc, #396]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e06:	f7fc fe4d 	bl	8000aa4 <HAL_GetTick>
 8003e0a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003e0e:	f7fc fe49 	bl	8000aa4 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e279      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e20:	4b5a      	ldr	r3, [pc, #360]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f0      	bne.n	8003e0e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d03c      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01c      	beq.n	8003e7a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e40:	4b52      	ldr	r3, [pc, #328]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003e42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e46:	4a51      	ldr	r2, [pc, #324]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003e48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e50:	f7fc fe28 	bl	8000aa4 <HAL_GetTick>
 8003e54:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003e58:	f7fc fe24 	bl	8000aa4 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e254      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003e6a:	4b48      	ldr	r3, [pc, #288]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ef      	beq.n	8003e58 <HAL_RCC_OscConfig+0x3a8>
 8003e78:	e01b      	b.n	8003eb2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e7a:	4b44      	ldr	r3, [pc, #272]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e80:	4a42      	ldr	r2, [pc, #264]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003e82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8a:	f7fc fe0b 	bl	8000aa4 <HAL_GetTick>
 8003e8e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003e92:	f7fc fe07 	bl	8000aa4 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e237      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ea4:	4b39      	ldr	r3, [pc, #228]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1ef      	bne.n	8003e92 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80d2 	beq.w	8004064 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003ec0:	4b34      	ldr	r3, [pc, #208]	@ (8003f94 <HAL_RCC_OscConfig+0x4e4>)
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d118      	bne.n	8003efe <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003ecc:	4b31      	ldr	r3, [pc, #196]	@ (8003f94 <HAL_RCC_OscConfig+0x4e4>)
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	4a30      	ldr	r2, [pc, #192]	@ (8003f94 <HAL_RCC_OscConfig+0x4e4>)
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ed8:	f7fc fde4 	bl	8000aa4 <HAL_GetTick>
 8003edc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee0:	f7fc fde0 	bl	8000aa4 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e210      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003ef2:	4b28      	ldr	r3, [pc, #160]	@ (8003f94 <HAL_RCC_OscConfig+0x4e4>)
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d108      	bne.n	8003f18 <HAL_RCC_OscConfig+0x468>
 8003f06:	4b21      	ldr	r3, [pc, #132]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f16:	e074      	b.n	8004002 <HAL_RCC_OscConfig+0x552>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d118      	bne.n	8003f52 <HAL_RCC_OscConfig+0x4a2>
 8003f20:	4b1a      	ldr	r3, [pc, #104]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f26:	4a19      	ldr	r2, [pc, #100]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f30:	4b16      	ldr	r3, [pc, #88]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f36:	4a15      	ldr	r2, [pc, #84]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003f38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f40:	4b12      	ldr	r3, [pc, #72]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003f42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f46:	4a11      	ldr	r2, [pc, #68]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003f48:	f023 0304 	bic.w	r3, r3, #4
 8003f4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f50:	e057      	b.n	8004002 <HAL_RCC_OscConfig+0x552>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b05      	cmp	r3, #5
 8003f58:	d11e      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4e8>
 8003f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003f5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f60:	4a0a      	ldr	r2, [pc, #40]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003f62:	f043 0304 	orr.w	r3, r3, #4
 8003f66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f6a:	4b08      	ldr	r3, [pc, #32]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f70:	4a06      	ldr	r2, [pc, #24]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003f72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f7a:	4b04      	ldr	r3, [pc, #16]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f80:	4a02      	ldr	r2, [pc, #8]	@ (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f8a:	e03a      	b.n	8004002 <HAL_RCC_OscConfig+0x552>
 8003f8c:	44020c00 	.word	0x44020c00
 8003f90:	20000004 	.word	0x20000004
 8003f94:	44020800 	.word	0x44020800
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b85      	cmp	r3, #133	@ 0x85
 8003f9e:	d118      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x522>
 8003fa0:	4ba2      	ldr	r3, [pc, #648]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8003fa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fa6:	4aa1      	ldr	r2, [pc, #644]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8003fa8:	f043 0304 	orr.w	r3, r3, #4
 8003fac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fb0:	4b9e      	ldr	r3, [pc, #632]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8003fb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fb6:	4a9d      	ldr	r2, [pc, #628]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8003fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fbc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fc0:	4b9a      	ldr	r3, [pc, #616]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8003fc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fc6:	4a99      	ldr	r2, [pc, #612]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fd0:	e017      	b.n	8004002 <HAL_RCC_OscConfig+0x552>
 8003fd2:	4b96      	ldr	r3, [pc, #600]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8003fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fd8:	4a94      	ldr	r2, [pc, #592]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8003fda:	f023 0301 	bic.w	r3, r3, #1
 8003fde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fe2:	4b92      	ldr	r3, [pc, #584]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8003fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fe8:	4a90      	ldr	r2, [pc, #576]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8003fea:	f023 0304 	bic.w	r3, r3, #4
 8003fee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ff2:	4b8e      	ldr	r3, [pc, #568]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8003ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ff8:	4a8c      	ldr	r2, [pc, #560]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8003ffa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ffe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d016      	beq.n	8004038 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400a:	f7fc fd4b 	bl	8000aa4 <HAL_GetTick>
 800400e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004010:	e00a      	b.n	8004028 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004012:	f7fc fd47 	bl	8000aa4 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004020:	4293      	cmp	r3, r2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e175      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004028:	4b80      	ldr	r3, [pc, #512]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 800402a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0ed      	beq.n	8004012 <HAL_RCC_OscConfig+0x562>
 8004036:	e015      	b.n	8004064 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fc fd34 	bl	8000aa4 <HAL_GetTick>
 800403c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800403e:	e00a      	b.n	8004056 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004040:	f7fc fd30 	bl	8000aa4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e15e      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004056:	4b75      	ldr	r3, [pc, #468]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8004058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1ed      	bne.n	8004040 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d036      	beq.n	80040de <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	2b00      	cmp	r3, #0
 8004076:	d019      	beq.n	80040ac <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004078:	4b6c      	ldr	r3, [pc, #432]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a6b      	ldr	r2, [pc, #428]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 800407e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004082:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004084:	f7fc fd0e 	bl	8000aa4 <HAL_GetTick>
 8004088:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800408c:	f7fc fd0a 	bl	8000aa4 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e13a      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800409e:	4b63      	ldr	r3, [pc, #396]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x5dc>
 80040aa:	e018      	b.n	80040de <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040ac:	4b5f      	ldr	r3, [pc, #380]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a5e      	ldr	r2, [pc, #376]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 80040b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b8:	f7fc fcf4 	bl	8000aa4 <HAL_GetTick>
 80040bc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80040c0:	f7fc fcf0 	bl	8000aa4 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e120      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80040d2:	4b56      	ldr	r3, [pc, #344]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 8115 	beq.w	8004312 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b18      	cmp	r3, #24
 80040ec:	f000 80af 	beq.w	800424e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	f040 8086 	bne.w	8004206 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80040fa:	4b4c      	ldr	r3, [pc, #304]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a4b      	ldr	r2, [pc, #300]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8004100:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004106:	f7fc fccd 	bl	8000aa4 <HAL_GetTick>
 800410a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800410e:	f7fc fcc9 	bl	8000aa4 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e0f9      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004120:	4b42      	ldr	r3, [pc, #264]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1f0      	bne.n	800410e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800412c:	4b3f      	ldr	r3, [pc, #252]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 800412e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004130:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004134:	f023 0303 	bic.w	r3, r3, #3
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004140:	0212      	lsls	r2, r2, #8
 8004142:	430a      	orrs	r2, r1
 8004144:	4939      	ldr	r1, [pc, #228]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8004146:	4313      	orrs	r3, r2
 8004148:	628b      	str	r3, [r1, #40]	@ 0x28
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800414e:	3b01      	subs	r3, #1
 8004150:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004158:	3b01      	subs	r3, #1
 800415a:	025b      	lsls	r3, r3, #9
 800415c:	b29b      	uxth	r3, r3
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004164:	3b01      	subs	r3, #1
 8004166:	041b      	lsls	r3, r3, #16
 8004168:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004172:	3b01      	subs	r3, #1
 8004174:	061b      	lsls	r3, r3, #24
 8004176:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800417a:	492c      	ldr	r1, [pc, #176]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 800417c:	4313      	orrs	r3, r2
 800417e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004180:	4b2a      	ldr	r3, [pc, #168]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8004182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004184:	4a29      	ldr	r2, [pc, #164]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8004186:	f023 0310 	bic.w	r3, r3, #16
 800418a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004190:	4a26      	ldr	r2, [pc, #152]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004196:	4b25      	ldr	r3, [pc, #148]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8004198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419a:	4a24      	ldr	r2, [pc, #144]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 800419c:	f043 0310 	orr.w	r3, r3, #16
 80041a0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80041a2:	4b22      	ldr	r3, [pc, #136]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 80041a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a6:	f023 020c 	bic.w	r2, r3, #12
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ae:	491f      	ldr	r1, [pc, #124]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80041b4:	4b1d      	ldr	r3, [pc, #116]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 80041b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b8:	f023 0220 	bic.w	r2, r3, #32
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041c0:	491a      	ldr	r1, [pc, #104]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041c6:	4b19      	ldr	r3, [pc, #100]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	4a18      	ldr	r2, [pc, #96]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 80041cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041d0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80041d2:	4b16      	ldr	r3, [pc, #88]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a15      	ldr	r2, [pc, #84]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 80041d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041de:	f7fc fc61 	bl	8000aa4 <HAL_GetTick>
 80041e2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80041e6:	f7fc fc5d 	bl	8000aa4 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e08d      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80041f8:	4b0c      	ldr	r3, [pc, #48]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x736>
 8004204:	e085      	b.n	8004312 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004206:	4b09      	ldr	r3, [pc, #36]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a08      	ldr	r2, [pc, #32]	@ (800422c <HAL_RCC_OscConfig+0x77c>)
 800420c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004212:	f7fc fc47 	bl	8000aa4 <HAL_GetTick>
 8004216:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004218:	e00a      	b.n	8004230 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800421a:	f7fc fc43 	bl	8000aa4 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d903      	bls.n	8004230 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e073      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
 800422c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004230:	4b3a      	ldr	r3, [pc, #232]	@ (800431c <HAL_RCC_OscConfig+0x86c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1ee      	bne.n	800421a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800423c:	4b37      	ldr	r3, [pc, #220]	@ (800431c <HAL_RCC_OscConfig+0x86c>)
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	4a36      	ldr	r2, [pc, #216]	@ (800431c <HAL_RCC_OscConfig+0x86c>)
 8004242:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004246:	f023 0303 	bic.w	r3, r3, #3
 800424a:	6293      	str	r3, [r2, #40]	@ 0x28
 800424c:	e061      	b.n	8004312 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800424e:	4b33      	ldr	r3, [pc, #204]	@ (800431c <HAL_RCC_OscConfig+0x86c>)
 8004250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004252:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004254:	4b31      	ldr	r3, [pc, #196]	@ (800431c <HAL_RCC_OscConfig+0x86c>)
 8004256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004258:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425e:	2b01      	cmp	r3, #1
 8004260:	d031      	beq.n	80042c6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f003 0203 	and.w	r2, r3, #3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d12a      	bne.n	80042c6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d122      	bne.n	80042c6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800428a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d11a      	bne.n	80042c6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	0a5b      	lsrs	r3, r3, #9
 8004294:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800429e:	429a      	cmp	r2, r3
 80042a0:	d111      	bne.n	80042c6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	0c1b      	lsrs	r3, r3, #16
 80042a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ae:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d108      	bne.n	80042c6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	0e1b      	lsrs	r3, r3, #24
 80042b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d001      	beq.n	80042ca <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e024      	b.n	8004314 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80042ca:	4b14      	ldr	r3, [pc, #80]	@ (800431c <HAL_RCC_OscConfig+0x86c>)
 80042cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ce:	08db      	lsrs	r3, r3, #3
 80042d0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80042d8:	429a      	cmp	r2, r3
 80042da:	d01a      	beq.n	8004312 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80042dc:	4b0f      	ldr	r3, [pc, #60]	@ (800431c <HAL_RCC_OscConfig+0x86c>)
 80042de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e0:	4a0e      	ldr	r2, [pc, #56]	@ (800431c <HAL_RCC_OscConfig+0x86c>)
 80042e2:	f023 0310 	bic.w	r3, r3, #16
 80042e6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e8:	f7fc fbdc 	bl	8000aa4 <HAL_GetTick>
 80042ec:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80042ee:	bf00      	nop
 80042f0:	f7fc fbd8 	bl	8000aa4 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d0f9      	beq.n	80042f0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004300:	4a06      	ldr	r2, [pc, #24]	@ (800431c <HAL_RCC_OscConfig+0x86c>)
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004306:	4b05      	ldr	r3, [pc, #20]	@ (800431c <HAL_RCC_OscConfig+0x86c>)
 8004308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430a:	4a04      	ldr	r2, [pc, #16]	@ (800431c <HAL_RCC_OscConfig+0x86c>)
 800430c:	f043 0310 	orr.w	r3, r3, #16
 8004310:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3720      	adds	r7, #32
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	44020c00 	.word	0x44020c00

08004320 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e19e      	b.n	8004672 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004334:	4b83      	ldr	r3, [pc, #524]	@ (8004544 <HAL_RCC_ClockConfig+0x224>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d910      	bls.n	8004364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b80      	ldr	r3, [pc, #512]	@ (8004544 <HAL_RCC_ClockConfig+0x224>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f023 020f 	bic.w	r2, r3, #15
 800434a:	497e      	ldr	r1, [pc, #504]	@ (8004544 <HAL_RCC_ClockConfig+0x224>)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	4313      	orrs	r3, r2
 8004350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004352:	4b7c      	ldr	r3, [pc, #496]	@ (8004544 <HAL_RCC_ClockConfig+0x224>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d001      	beq.n	8004364 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e186      	b.n	8004672 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b00      	cmp	r3, #0
 800436e:	d012      	beq.n	8004396 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	4b74      	ldr	r3, [pc, #464]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	0a1b      	lsrs	r3, r3, #8
 800437a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800437e:	429a      	cmp	r2, r3
 8004380:	d909      	bls.n	8004396 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004382:	4b71      	ldr	r3, [pc, #452]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	496d      	ldr	r1, [pc, #436]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 8004392:	4313      	orrs	r3, r2
 8004394:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d012      	beq.n	80043c8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	4b68      	ldr	r3, [pc, #416]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d909      	bls.n	80043c8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80043b4:	4b64      	ldr	r3, [pc, #400]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	4961      	ldr	r1, [pc, #388]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d010      	beq.n	80043f6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	4b5b      	ldr	r3, [pc, #364]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d908      	bls.n	80043f6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80043e4:	4b58      	ldr	r3, [pc, #352]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4955      	ldr	r1, [pc, #340]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d010      	beq.n	8004424 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	4b50      	ldr	r3, [pc, #320]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	429a      	cmp	r2, r3
 8004410:	d908      	bls.n	8004424 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004412:	4b4d      	ldr	r3, [pc, #308]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f023 020f 	bic.w	r2, r3, #15
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	494a      	ldr	r1, [pc, #296]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 8004420:	4313      	orrs	r3, r2
 8004422:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 8093 	beq.w	8004558 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b03      	cmp	r3, #3
 8004438:	d107      	bne.n	800444a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800443a:	4b43      	ldr	r3, [pc, #268]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d121      	bne.n	800448a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e113      	b.n	8004672 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b02      	cmp	r3, #2
 8004450:	d107      	bne.n	8004462 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004452:	4b3d      	ldr	r3, [pc, #244]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d115      	bne.n	800448a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e107      	b.n	8004672 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d107      	bne.n	800447a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800446a:	4b37      	ldr	r3, [pc, #220]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004472:	2b00      	cmp	r3, #0
 8004474:	d109      	bne.n	800448a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e0fb      	b.n	8004672 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800447a:	4b33      	ldr	r3, [pc, #204]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e0f3      	b.n	8004672 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800448a:	4b2f      	ldr	r3, [pc, #188]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f023 0203 	bic.w	r2, r3, #3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	492c      	ldr	r1, [pc, #176]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 8004498:	4313      	orrs	r3, r2
 800449a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800449c:	f7fc fb02 	bl	8000aa4 <HAL_GetTick>
 80044a0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d112      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044aa:	e00a      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80044ac:	f7fc fafa 	bl	8000aa4 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e0d7      	b.n	8004672 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044c2:	4b21      	ldr	r3, [pc, #132]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f003 0318 	and.w	r3, r3, #24
 80044ca:	2b18      	cmp	r3, #24
 80044cc:	d1ee      	bne.n	80044ac <HAL_RCC_ClockConfig+0x18c>
 80044ce:	e043      	b.n	8004558 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d112      	bne.n	80044fe <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80044d8:	e00a      	b.n	80044f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80044da:	f7fc fae3 	bl	8000aa4 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e0c0      	b.n	8004672 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80044f0:	4b15      	ldr	r3, [pc, #84]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	f003 0318 	and.w	r3, r3, #24
 80044f8:	2b10      	cmp	r3, #16
 80044fa:	d1ee      	bne.n	80044da <HAL_RCC_ClockConfig+0x1ba>
 80044fc:	e02c      	b.n	8004558 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d122      	bne.n	800454c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004506:	e00a      	b.n	800451e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004508:	f7fc facc 	bl	8000aa4 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e0a9      	b.n	8004672 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800451e:	4b0a      	ldr	r3, [pc, #40]	@ (8004548 <HAL_RCC_ClockConfig+0x228>)
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f003 0318 	and.w	r3, r3, #24
 8004526:	2b08      	cmp	r3, #8
 8004528:	d1ee      	bne.n	8004508 <HAL_RCC_ClockConfig+0x1e8>
 800452a:	e015      	b.n	8004558 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800452c:	f7fc faba 	bl	8000aa4 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d906      	bls.n	800454c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e097      	b.n	8004672 <HAL_RCC_ClockConfig+0x352>
 8004542:	bf00      	nop
 8004544:	40022000 	.word	0x40022000
 8004548:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800454c:	4b4b      	ldr	r3, [pc, #300]	@ (800467c <HAL_RCC_ClockConfig+0x35c>)
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	f003 0318 	and.w	r3, r3, #24
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e9      	bne.n	800452c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d010      	beq.n	8004586 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	4b44      	ldr	r3, [pc, #272]	@ (800467c <HAL_RCC_ClockConfig+0x35c>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f003 030f 	and.w	r3, r3, #15
 8004570:	429a      	cmp	r2, r3
 8004572:	d208      	bcs.n	8004586 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004574:	4b41      	ldr	r3, [pc, #260]	@ (800467c <HAL_RCC_ClockConfig+0x35c>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f023 020f 	bic.w	r2, r3, #15
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	493e      	ldr	r1, [pc, #248]	@ (800467c <HAL_RCC_ClockConfig+0x35c>)
 8004582:	4313      	orrs	r3, r2
 8004584:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004586:	4b3e      	ldr	r3, [pc, #248]	@ (8004680 <HAL_RCC_ClockConfig+0x360>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d210      	bcs.n	80045b6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004594:	4b3a      	ldr	r3, [pc, #232]	@ (8004680 <HAL_RCC_ClockConfig+0x360>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f023 020f 	bic.w	r2, r3, #15
 800459c:	4938      	ldr	r1, [pc, #224]	@ (8004680 <HAL_RCC_ClockConfig+0x360>)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a4:	4b36      	ldr	r3, [pc, #216]	@ (8004680 <HAL_RCC_ClockConfig+0x360>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d001      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e05d      	b.n	8004672 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d010      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	4b2d      	ldr	r3, [pc, #180]	@ (800467c <HAL_RCC_ClockConfig+0x35c>)
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d208      	bcs.n	80045e4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80045d2:	4b2a      	ldr	r3, [pc, #168]	@ (800467c <HAL_RCC_ClockConfig+0x35c>)
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	4927      	ldr	r1, [pc, #156]	@ (800467c <HAL_RCC_ClockConfig+0x35c>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d012      	beq.n	8004616 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	4b21      	ldr	r3, [pc, #132]	@ (800467c <HAL_RCC_ClockConfig+0x35c>)
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045fe:	429a      	cmp	r2, r3
 8004600:	d209      	bcs.n	8004616 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004602:	4b1e      	ldr	r3, [pc, #120]	@ (800467c <HAL_RCC_ClockConfig+0x35c>)
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	491a      	ldr	r1, [pc, #104]	@ (800467c <HAL_RCC_ClockConfig+0x35c>)
 8004612:	4313      	orrs	r3, r2
 8004614:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	2b00      	cmp	r3, #0
 8004620:	d012      	beq.n	8004648 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695a      	ldr	r2, [r3, #20]
 8004626:	4b15      	ldr	r3, [pc, #84]	@ (800467c <HAL_RCC_ClockConfig+0x35c>)
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	0a1b      	lsrs	r3, r3, #8
 800462c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004630:	429a      	cmp	r2, r3
 8004632:	d209      	bcs.n	8004648 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004634:	4b11      	ldr	r3, [pc, #68]	@ (800467c <HAL_RCC_ClockConfig+0x35c>)
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	490e      	ldr	r1, [pc, #56]	@ (800467c <HAL_RCC_ClockConfig+0x35c>)
 8004644:	4313      	orrs	r3, r2
 8004646:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004648:	f000 f822 	bl	8004690 <HAL_RCC_GetSysClockFreq>
 800464c:	4602      	mov	r2, r0
 800464e:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <HAL_RCC_ClockConfig+0x35c>)
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	490b      	ldr	r1, [pc, #44]	@ (8004684 <HAL_RCC_ClockConfig+0x364>)
 8004658:	5ccb      	ldrb	r3, [r1, r3]
 800465a:	fa22 f303 	lsr.w	r3, r2, r3
 800465e:	4a0a      	ldr	r2, [pc, #40]	@ (8004688 <HAL_RCC_ClockConfig+0x368>)
 8004660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004662:	4b0a      	ldr	r3, [pc, #40]	@ (800468c <HAL_RCC_ClockConfig+0x36c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fc f992 	bl	8000990 <HAL_InitTick>
 800466c:	4603      	mov	r3, r0
 800466e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004670:	7afb      	ldrb	r3, [r7, #11]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	44020c00 	.word	0x44020c00
 8004680:	40022000 	.word	0x40022000
 8004684:	08005f70 	.word	0x08005f70
 8004688:	20000000 	.word	0x20000000
 800468c:	20000004 	.word	0x20000004

08004690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004690:	b480      	push	{r7}
 8004692:	b089      	sub	sp, #36	@ 0x24
 8004694:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004696:	4b8c      	ldr	r3, [pc, #560]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f003 0318 	and.w	r3, r3, #24
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d102      	bne.n	80046a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80046a2:	4b8a      	ldr	r3, [pc, #552]	@ (80048cc <HAL_RCC_GetSysClockFreq+0x23c>)
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	e107      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046a8:	4b87      	ldr	r3, [pc, #540]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	f003 0318 	and.w	r3, r3, #24
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d112      	bne.n	80046da <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80046b4:	4b84      	ldr	r3, [pc, #528]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0320 	and.w	r3, r3, #32
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d009      	beq.n	80046d4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046c0:	4b81      	ldr	r3, [pc, #516]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	08db      	lsrs	r3, r3, #3
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	4a81      	ldr	r2, [pc, #516]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x240>)
 80046cc:	fa22 f303 	lsr.w	r3, r2, r3
 80046d0:	61fb      	str	r3, [r7, #28]
 80046d2:	e0f1      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80046d4:	4b7e      	ldr	r3, [pc, #504]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x240>)
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	e0ee      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046da:	4b7b      	ldr	r3, [pc, #492]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f003 0318 	and.w	r3, r3, #24
 80046e2:	2b10      	cmp	r3, #16
 80046e4:	d102      	bne.n	80046ec <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046e6:	4b7b      	ldr	r3, [pc, #492]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x244>)
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	e0e5      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ec:	4b76      	ldr	r3, [pc, #472]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	f003 0318 	and.w	r3, r3, #24
 80046f4:	2b18      	cmp	r3, #24
 80046f6:	f040 80dd 	bne.w	80048b4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80046fa:	4b73      	ldr	r3, [pc, #460]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80046fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004704:	4b70      	ldr	r3, [pc, #448]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004708:	0a1b      	lsrs	r3, r3, #8
 800470a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800470e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004710:	4b6d      	ldr	r3, [pc, #436]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004714:	091b      	lsrs	r3, r3, #4
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800471c:	4b6a      	ldr	r3, [pc, #424]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800471e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004720:	08db      	lsrs	r3, r3, #3
 8004722:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	fb02 f303 	mul.w	r3, r2, r3
 800472c:	ee07 3a90 	vmov	s15, r3
 8004730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004734:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80b7 	beq.w	80048ae <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d003      	beq.n	800474e <HAL_RCC_GetSysClockFreq+0xbe>
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b03      	cmp	r3, #3
 800474a:	d056      	beq.n	80047fa <HAL_RCC_GetSysClockFreq+0x16a>
 800474c:	e077      	b.n	800483e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800474e:	4b5e      	ldr	r3, [pc, #376]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0320 	and.w	r3, r3, #32
 8004756:	2b00      	cmp	r3, #0
 8004758:	d02d      	beq.n	80047b6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800475a:	4b5b      	ldr	r3, [pc, #364]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	08db      	lsrs	r3, r3, #3
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	4a5a      	ldr	r2, [pc, #360]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x240>)
 8004766:	fa22 f303 	lsr.w	r3, r2, r3
 800476a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	ee07 3a90 	vmov	s15, r3
 800477c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004784:	4b50      	ldr	r3, [pc, #320]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478c:	ee07 3a90 	vmov	s15, r3
 8004790:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004794:	ed97 6a02 	vldr	s12, [r7, #8]
 8004798:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80048d8 <HAL_RCC_GetSysClockFreq+0x248>
 800479c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80047a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80047b4:	e065      	b.n	8004882 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	ee07 3a90 	vmov	s15, r3
 80047bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80048dc <HAL_RCC_GetSysClockFreq+0x24c>
 80047c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c8:	4b3f      	ldr	r3, [pc, #252]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80047ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d0:	ee07 3a90 	vmov	s15, r3
 80047d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80047d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80047dc:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80048d8 <HAL_RCC_GetSysClockFreq+0x248>
 80047e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80047e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80047f8:	e043      	b.n	8004882 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	ee07 3a90 	vmov	s15, r3
 8004800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004804:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80048e0 <HAL_RCC_GetSysClockFreq+0x250>
 8004808:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480c:	4b2e      	ldr	r3, [pc, #184]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800480e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004814:	ee07 3a90 	vmov	s15, r3
 8004818:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800481c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004820:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80048d8 <HAL_RCC_GetSysClockFreq+0x248>
 8004824:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004828:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800482c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004830:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004838:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800483c:	e021      	b.n	8004882 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	ee07 3a90 	vmov	s15, r3
 8004844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004848:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80048e4 <HAL_RCC_GetSysClockFreq+0x254>
 800484c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004850:	4b1d      	ldr	r3, [pc, #116]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004858:	ee07 3a90 	vmov	s15, r3
 800485c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004860:	ed97 6a02 	vldr	s12, [r7, #8]
 8004864:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80048d8 <HAL_RCC_GetSysClockFreq+0x248>
 8004868:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800486c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004870:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004874:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004880:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004882:	4b11      	ldr	r3, [pc, #68]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004886:	0a5b      	lsrs	r3, r3, #9
 8004888:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800488c:	3301      	adds	r3, #1
 800488e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800489a:	edd7 6a06 	vldr	s13, [r7, #24]
 800489e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048a6:	ee17 3a90 	vmov	r3, s15
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	e004      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
 80048b2:	e001      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80048b4:	4b06      	ldr	r3, [pc, #24]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x240>)
 80048b6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80048b8:	69fb      	ldr	r3, [r7, #28]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3724      	adds	r7, #36	@ 0x24
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	44020c00 	.word	0x44020c00
 80048cc:	003d0900 	.word	0x003d0900
 80048d0:	03d09000 	.word	0x03d09000
 80048d4:	017d7840 	.word	0x017d7840
 80048d8:	46000000 	.word	0x46000000
 80048dc:	4c742400 	.word	0x4c742400
 80048e0:	4bbebc20 	.word	0x4bbebc20
 80048e4:	4a742400 	.word	0x4a742400

080048e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80048ec:	f7ff fed0 	bl	8004690 <HAL_RCC_GetSysClockFreq>
 80048f0:	4602      	mov	r2, r0
 80048f2:	4b08      	ldr	r3, [pc, #32]	@ (8004914 <HAL_RCC_GetHCLKFreq+0x2c>)
 80048f4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80048f6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80048fa:	4907      	ldr	r1, [pc, #28]	@ (8004918 <HAL_RCC_GetHCLKFreq+0x30>)
 80048fc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80048fe:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004902:	fa22 f303 	lsr.w	r3, r2, r3
 8004906:	4a05      	ldr	r2, [pc, #20]	@ (800491c <HAL_RCC_GetHCLKFreq+0x34>)
 8004908:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800490a:	4b04      	ldr	r3, [pc, #16]	@ (800491c <HAL_RCC_GetHCLKFreq+0x34>)
 800490c:	681b      	ldr	r3, [r3, #0]
}
 800490e:	4618      	mov	r0, r3
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	44020c00 	.word	0x44020c00
 8004918:	08005f70 	.word	0x08005f70
 800491c:	20000000 	.word	0x20000000

08004920 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004924:	b0ba      	sub	sp, #232	@ 0xe8
 8004926:	af00      	add	r7, sp, #0
 8004928:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800492c:	2300      	movs	r3, #0
 800492e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004932:	2300      	movs	r3, #0
 8004934:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004938:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004944:	2500      	movs	r5, #0
 8004946:	ea54 0305 	orrs.w	r3, r4, r5
 800494a:	d00b      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800494c:	4bcd      	ldr	r3, [pc, #820]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800494e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004952:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800495a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495c:	4ac9      	ldr	r2, [pc, #804]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800495e:	430b      	orrs	r3, r1
 8004960:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004964:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496c:	f002 0801 	and.w	r8, r2, #1
 8004970:	f04f 0900 	mov.w	r9, #0
 8004974:	ea58 0309 	orrs.w	r3, r8, r9
 8004978:	d042      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800497a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800497e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004980:	2b05      	cmp	r3, #5
 8004982:	d823      	bhi.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004984:	a201      	add	r2, pc, #4	@ (adr r2, 800498c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498a:	bf00      	nop
 800498c:	080049d5 	.word	0x080049d5
 8004990:	080049a5 	.word	0x080049a5
 8004994:	080049b9 	.word	0x080049b9
 8004998:	080049d5 	.word	0x080049d5
 800499c:	080049d5 	.word	0x080049d5
 80049a0:	080049d5 	.word	0x080049d5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049a8:	3308      	adds	r3, #8
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 f978 	bl	8005ca0 <RCCEx_PLL2_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80049b6:	e00e      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049bc:	3330      	adds	r3, #48	@ 0x30
 80049be:	4618      	mov	r0, r3
 80049c0:	f001 fa06 	bl	8005dd0 <RCCEx_PLL3_Config>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80049ca:	e004      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80049d2:	e000      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80049d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10c      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80049de:	4ba9      	ldr	r3, [pc, #676]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80049e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80049e4:	f023 0107 	bic.w	r1, r3, #7
 80049e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ee:	4aa5      	ldr	r2, [pc, #660]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80049f0:	430b      	orrs	r3, r1
 80049f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80049f6:	e003      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049fc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f002 0a02 	and.w	sl, r2, #2
 8004a0c:	f04f 0b00 	mov.w	fp, #0
 8004a10:	ea5a 030b 	orrs.w	r3, sl, fp
 8004a14:	f000 8088 	beq.w	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004a18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a1e:	2b28      	cmp	r3, #40	@ 0x28
 8004a20:	d868      	bhi.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004a22:	a201      	add	r2, pc, #4	@ (adr r2, 8004a28 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004afd 	.word	0x08004afd
 8004a2c:	08004af5 	.word	0x08004af5
 8004a30:	08004af5 	.word	0x08004af5
 8004a34:	08004af5 	.word	0x08004af5
 8004a38:	08004af5 	.word	0x08004af5
 8004a3c:	08004af5 	.word	0x08004af5
 8004a40:	08004af5 	.word	0x08004af5
 8004a44:	08004af5 	.word	0x08004af5
 8004a48:	08004acd 	.word	0x08004acd
 8004a4c:	08004af5 	.word	0x08004af5
 8004a50:	08004af5 	.word	0x08004af5
 8004a54:	08004af5 	.word	0x08004af5
 8004a58:	08004af5 	.word	0x08004af5
 8004a5c:	08004af5 	.word	0x08004af5
 8004a60:	08004af5 	.word	0x08004af5
 8004a64:	08004af5 	.word	0x08004af5
 8004a68:	08004ae1 	.word	0x08004ae1
 8004a6c:	08004af5 	.word	0x08004af5
 8004a70:	08004af5 	.word	0x08004af5
 8004a74:	08004af5 	.word	0x08004af5
 8004a78:	08004af5 	.word	0x08004af5
 8004a7c:	08004af5 	.word	0x08004af5
 8004a80:	08004af5 	.word	0x08004af5
 8004a84:	08004af5 	.word	0x08004af5
 8004a88:	08004afd 	.word	0x08004afd
 8004a8c:	08004af5 	.word	0x08004af5
 8004a90:	08004af5 	.word	0x08004af5
 8004a94:	08004af5 	.word	0x08004af5
 8004a98:	08004af5 	.word	0x08004af5
 8004a9c:	08004af5 	.word	0x08004af5
 8004aa0:	08004af5 	.word	0x08004af5
 8004aa4:	08004af5 	.word	0x08004af5
 8004aa8:	08004afd 	.word	0x08004afd
 8004aac:	08004af5 	.word	0x08004af5
 8004ab0:	08004af5 	.word	0x08004af5
 8004ab4:	08004af5 	.word	0x08004af5
 8004ab8:	08004af5 	.word	0x08004af5
 8004abc:	08004af5 	.word	0x08004af5
 8004ac0:	08004af5 	.word	0x08004af5
 8004ac4:	08004af5 	.word	0x08004af5
 8004ac8:	08004afd 	.word	0x08004afd
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004acc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f001 f8e4 	bl	8005ca0 <RCCEx_PLL2_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004ade:	e00e      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ae0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ae4:	3330      	adds	r3, #48	@ 0x30
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 f972 	bl	8005dd0 <RCCEx_PLL3_Config>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004af2:	e004      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004afa:	e000      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004afe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10c      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004b06:	4b5f      	ldr	r3, [pc, #380]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004b0c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004b10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b16:	4a5b      	ldr	r2, [pc, #364]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004b1e:	e003      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b20:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b24:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b30:	f002 0304 	and.w	r3, r2, #4
 8004b34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b3e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004b42:	460b      	mov	r3, r1
 8004b44:	4313      	orrs	r3, r2
 8004b46:	d04e      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004b48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b4e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004b52:	d02c      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004b54:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004b58:	d825      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b5e:	d028      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004b60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b64:	d81f      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004b66:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b68:	d025      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004b6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b6c:	d81b      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004b6e:	2b80      	cmp	r3, #128	@ 0x80
 8004b70:	d00f      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004b72:	2b80      	cmp	r3, #128	@ 0x80
 8004b74:	d817      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01f      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004b7a:	2b40      	cmp	r3, #64	@ 0x40
 8004b7c:	d113      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b82:	3308      	adds	r3, #8
 8004b84:	4618      	mov	r0, r3
 8004b86:	f001 f88b 	bl	8005ca0 <RCCEx_PLL2_Config>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004b90:	e014      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b96:	3330      	adds	r3, #48	@ 0x30
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f001 f919 	bl	8005dd0 <RCCEx_PLL3_Config>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004ba4:	e00a      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004bac:	e006      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004bae:	bf00      	nop
 8004bb0:	e004      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004bb2:	bf00      	nop
 8004bb4:	e002      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004bb6:	bf00      	nop
 8004bb8:	e000      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bbc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10c      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004bc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004bca:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004bdc:	e003      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bde:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004be2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	f002 0308 	and.w	r3, r2, #8
 8004bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004bfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4313      	orrs	r3, r2
 8004c04:	d056      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c0c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004c10:	d031      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004c12:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004c16:	d82a      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c1c:	d02d      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004c1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c22:	d824      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c24:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c28:	d029      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004c2a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c2e:	d81e      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c34:	d011      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c3a:	d818      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d023      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c44:	d113      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f001 f827 	bl	8005ca0 <RCCEx_PLL2_Config>
 8004c52:	4603      	mov	r3, r0
 8004c54:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004c58:	e017      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c5e:	3330      	adds	r3, #48	@ 0x30
 8004c60:	4618      	mov	r0, r3
 8004c62:	f001 f8b5 	bl	8005dd0 <RCCEx_PLL3_Config>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004c6c:	e00d      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c74:	e009      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004c76:	bf00      	nop
 8004c78:	e007      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004c7a:	bf00      	nop
 8004c7c:	e005      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004c7e:	bf00      	nop
 8004c80:	e003      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004c82:	bf00      	nop
 8004c84:	44020c00 	.word	0x44020c00
        break;
 8004c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10c      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004c92:	4bb9      	ldr	r3, [pc, #740]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004c94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c98:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004c9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ca0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ca2:	4ab5      	ldr	r2, [pc, #724]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004caa:	e003      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004cb0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f002 0310 	and.w	r3, r2, #16
 8004cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004cca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	d053      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004cd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cda:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004cde:	d031      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004ce0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004ce4:	d82a      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004ce6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cea:	d02d      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004cec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cf0:	d824      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004cf2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cf6:	d029      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004cf8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cfc:	d81e      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d02:	d011      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004d04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d08:	d818      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d020      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d12:	d113      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d18:	3308      	adds	r3, #8
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 ffc0 	bl	8005ca0 <RCCEx_PLL2_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004d26:	e014      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d2c:	3330      	adds	r3, #48	@ 0x30
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f001 f84e 	bl	8005dd0 <RCCEx_PLL3_Config>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004d3a:	e00a      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d42:	e006      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004d44:	bf00      	nop
 8004d46:	e004      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004d48:	bf00      	nop
 8004d4a:	e002      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004d4c:	bf00      	nop
 8004d4e:	e000      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004d50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d52:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10c      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004d5a:	4b87      	ldr	r3, [pc, #540]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d60:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d6a:	4a83      	ldr	r2, [pc, #524]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004d72:	e003      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d74:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d78:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	f002 0320 	and.w	r3, r2, #32
 8004d88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	d053      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004d9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004da6:	d031      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004da8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004dac:	d82a      	bhi.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004dae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004db2:	d02d      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004db4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004db8:	d824      	bhi.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004dba:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004dbe:	d029      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004dc0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004dc4:	d81e      	bhi.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004dc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dca:	d011      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dd0:	d818      	bhi.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d020      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004dd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dda:	d113      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ddc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004de0:	3308      	adds	r3, #8
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 ff5c 	bl	8005ca0 <RCCEx_PLL2_Config>
 8004de8:	4603      	mov	r3, r0
 8004dea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004dee:	e014      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004df0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004df4:	3330      	adds	r3, #48	@ 0x30
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 ffea 	bl	8005dd0 <RCCEx_PLL3_Config>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004e02:	e00a      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e0a:	e006      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004e0c:	bf00      	nop
 8004e0e:	e004      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004e10:	bf00      	nop
 8004e12:	e002      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004e14:	bf00      	nop
 8004e16:	e000      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e1a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10c      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004e22:	4b55      	ldr	r3, [pc, #340]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004e24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e28:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004e2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e32:	4a51      	ldr	r2, [pc, #324]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004e34:	430b      	orrs	r3, r1
 8004e36:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004e3a:	e003      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e40:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004e50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e54:	2300      	movs	r3, #0
 8004e56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e5a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4313      	orrs	r3, r2
 8004e62:	d053      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004e64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e6a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004e6e:	d031      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004e70:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004e74:	d82a      	bhi.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004e76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e7a:	d02d      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004e7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e80:	d824      	bhi.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004e82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e86:	d029      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004e88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e8c:	d81e      	bhi.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004e8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e92:	d011      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004e94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e98:	d818      	bhi.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d020      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004e9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ea2:	d113      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ea4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ea8:	3308      	adds	r3, #8
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fef8 	bl	8005ca0 <RCCEx_PLL2_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004eb6:	e014      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004eb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ebc:	3330      	adds	r3, #48	@ 0x30
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 ff86 	bl	8005dd0 <RCCEx_PLL3_Config>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004eca:	e00a      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ed2:	e006      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004ed4:	bf00      	nop
 8004ed6:	e004      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004ed8:	bf00      	nop
 8004eda:	e002      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004edc:	bf00      	nop
 8004ede:	e000      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ee2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10c      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004eea:	4b23      	ldr	r3, [pc, #140]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ef0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004ef4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004efa:	4a1f      	ldr	r2, [pc, #124]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004efc:	430b      	orrs	r3, r1
 8004efe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f02:	e003      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f04:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f08:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004f18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f22:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	d03d      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004f2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f36:	d01b      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004f38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f3c:	d814      	bhi.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004f3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f42:	d017      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004f44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f48:	d80e      	bhi.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d016      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f52:	d109      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f58:	3330      	adds	r3, #48	@ 0x30
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 ff38 	bl	8005dd0 <RCCEx_PLL3_Config>
 8004f60:	4603      	mov	r3, r0
 8004f62:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004f66:	e00a      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f6e:	e006      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004f70:	bf00      	nop
 8004f72:	e004      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004f74:	bf00      	nop
 8004f76:	e002      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8004f78:	44020c00 	.word	0x44020c00
        break;
 8004f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10c      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004f86:	4b99      	ldr	r3, [pc, #612]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f8c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004f90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f96:	4a95      	ldr	r2, [pc, #596]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f9e:	e003      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fa4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004fb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fbe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	d03b      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004fc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004fd2:	d01b      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004fd4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004fd8:	d814      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004fda:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004fde:	d017      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8004fe0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004fe4:	d80e      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d014      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8004fea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fee:	d109      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ff0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ff4:	3330      	adds	r3, #48	@ 0x30
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 feea 	bl	8005dd0 <RCCEx_PLL3_Config>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005002:	e008      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800500a:	e004      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 800500c:	bf00      	nop
 800500e:	e002      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005010:	bf00      	nop
 8005012:	e000      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005016:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10c      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800501e:	4b73      	ldr	r3, [pc, #460]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005020:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005024:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005028:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800502c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800502e:	4a6f      	ldr	r2, [pc, #444]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005030:	430b      	orrs	r3, r1
 8005032:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005036:	e003      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005038:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800503c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005040:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800504c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005050:	2300      	movs	r3, #0
 8005052:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005056:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800505a:	460b      	mov	r3, r1
 800505c:	4313      	orrs	r3, r2
 800505e:	d03d      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005060:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005064:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005068:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800506c:	d01b      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x786>
 800506e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005072:	d814      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005074:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005078:	d017      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800507a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800507e:	d80e      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d014      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8005084:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005088:	d109      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800508a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800508e:	3330      	adds	r3, #48	@ 0x30
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fe9d 	bl	8005dd0 <RCCEx_PLL3_Config>
 8005096:	4603      	mov	r3, r0
 8005098:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 800509c:	e008      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050a4:	e004      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80050a6:	bf00      	nop
 80050a8:	e002      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80050aa:	bf00      	nop
 80050ac:	e000      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80050ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10d      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80050b8:	4b4c      	ldr	r3, [pc, #304]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80050c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ca:	4a48      	ldr	r2, [pc, #288]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050cc:	430b      	orrs	r3, r1
 80050ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80050d2:	e003      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050d8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80050dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80050e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050ec:	2300      	movs	r3, #0
 80050ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80050f2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80050f6:	460b      	mov	r3, r1
 80050f8:	4313      	orrs	r3, r2
 80050fa:	d035      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80050fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005100:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005104:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005108:	d015      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800510a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800510e:	d80e      	bhi.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d012      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005118:	d109      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800511a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800511e:	3330      	adds	r3, #48	@ 0x30
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fe55 	bl	8005dd0 <RCCEx_PLL3_Config>
 8005126:	4603      	mov	r3, r0
 8005128:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800512c:	e006      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005134:	e002      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8005136:	bf00      	nop
 8005138:	e000      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800513a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800513c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10d      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005144:	4b29      	ldr	r3, [pc, #164]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005146:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800514a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800514e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005156:	4a25      	ldr	r2, [pc, #148]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005158:	430b      	orrs	r3, r1
 800515a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800515e:	e003      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005160:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005164:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8005168:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	2100      	movs	r1, #0
 8005172:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8005176:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800517a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800517e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005182:	460b      	mov	r3, r1
 8005184:	4313      	orrs	r3, r2
 8005186:	d037      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8005188:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800518c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005190:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005194:	d015      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005196:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800519a:	d80e      	bhi.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800519c:	2b00      	cmp	r3, #0
 800519e:	d012      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80051a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051a4:	d109      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051aa:	3330      	adds	r3, #48	@ 0x30
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fe0f 	bl	8005dd0 <RCCEx_PLL3_Config>
 80051b2:	4603      	mov	r3, r0
 80051b4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80051b8:	e006      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80051c0:	e002      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80051c2:	bf00      	nop
 80051c4:	e000      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80051c6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80051c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10f      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80051d0:	4b06      	ldr	r3, [pc, #24]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051d6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80051da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e2:	4a02      	ldr	r2, [pc, #8]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051e4:	430b      	orrs	r3, r1
 80051e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80051ea:	e005      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80051ec:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051f4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80051f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	2100      	movs	r1, #0
 8005202:	67b9      	str	r1, [r7, #120]	@ 0x78
 8005204:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005208:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800520a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800520e:	460b      	mov	r3, r1
 8005210:	4313      	orrs	r3, r2
 8005212:	d00e      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005214:	4bb8      	ldr	r3, [pc, #736]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	4ab7      	ldr	r2, [pc, #732]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800521a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800521e:	61d3      	str	r3, [r2, #28]
 8005220:	4bb5      	ldr	r3, [pc, #724]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005222:	69d9      	ldr	r1, [r3, #28]
 8005224:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005228:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800522c:	4ab2      	ldr	r2, [pc, #712]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800522e:	430b      	orrs	r3, r1
 8005230:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800523e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005240:	2300      	movs	r3, #0
 8005242:	677b      	str	r3, [r7, #116]	@ 0x74
 8005244:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005248:	460b      	mov	r3, r1
 800524a:	4313      	orrs	r3, r2
 800524c:	d055      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800524e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005252:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005256:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800525a:	d031      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 800525c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005260:	d82a      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005266:	d02d      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8005268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800526c:	d824      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800526e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005272:	d029      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8005274:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005278:	d81e      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800527a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800527e:	d011      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005284:	d818      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005286:	2b00      	cmp	r3, #0
 8005288:	d020      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 800528a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800528e:	d113      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005294:	3308      	adds	r3, #8
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fd02 	bl	8005ca0 <RCCEx_PLL2_Config>
 800529c:	4603      	mov	r3, r0
 800529e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80052a2:	e014      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052a8:	3330      	adds	r3, #48	@ 0x30
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fd90 	bl	8005dd0 <RCCEx_PLL3_Config>
 80052b0:	4603      	mov	r3, r0
 80052b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80052b6:	e00a      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80052be:	e006      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80052c0:	bf00      	nop
 80052c2:	e004      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80052c4:	bf00      	nop
 80052c6:	e002      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80052c8:	bf00      	nop
 80052ca:	e000      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80052cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10d      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80052d6:	4b88      	ldr	r3, [pc, #544]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80052d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80052dc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80052e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052e8:	4a83      	ldr	r2, [pc, #524]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80052ea:	430b      	orrs	r3, r1
 80052ec:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80052f0:	e003      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052f6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005306:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005308:	2300      	movs	r3, #0
 800530a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800530c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005310:	460b      	mov	r3, r1
 8005312:	4313      	orrs	r3, r2
 8005314:	d055      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800531a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005322:	d031      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8005324:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005328:	d82a      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800532a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800532e:	d02d      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8005330:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005334:	d824      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005336:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800533a:	d029      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800533c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005340:	d81e      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005342:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005346:	d011      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800534c:	d818      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800534e:	2b00      	cmp	r3, #0
 8005350:	d020      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005356:	d113      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005358:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800535c:	3308      	adds	r3, #8
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fc9e 	bl	8005ca0 <RCCEx_PLL2_Config>
 8005364:	4603      	mov	r3, r0
 8005366:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800536a:	e014      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800536c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005370:	3330      	adds	r3, #48	@ 0x30
 8005372:	4618      	mov	r0, r3
 8005374:	f000 fd2c 	bl	8005dd0 <RCCEx_PLL3_Config>
 8005378:	4603      	mov	r3, r0
 800537a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800537e:	e00a      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005386:	e006      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005388:	bf00      	nop
 800538a:	e004      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800538c:	bf00      	nop
 800538e:	e002      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005390:	bf00      	nop
 8005392:	e000      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005396:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10d      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800539e:	4b56      	ldr	r3, [pc, #344]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80053a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80053a4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80053a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053b0:	4a51      	ldr	r2, [pc, #324]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80053b2:	430b      	orrs	r3, r1
 80053b4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80053b8:	e003      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053be:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80053c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80053ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80053d0:	2300      	movs	r3, #0
 80053d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80053d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80053d8:	460b      	mov	r3, r1
 80053da:	4313      	orrs	r3, r2
 80053dc:	d032      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80053de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80053e6:	2b05      	cmp	r3, #5
 80053e8:	d80f      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d211      	bcs.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d911      	bls.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d109      	bne.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053fa:	3308      	adds	r3, #8
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fc4f 	bl	8005ca0 <RCCEx_PLL2_Config>
 8005402:	4603      	mov	r3, r0
 8005404:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005408:	e006      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005410:	e002      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8005412:	bf00      	nop
 8005414:	e000      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8005416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005418:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10d      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005420:	4b35      	ldr	r3, [pc, #212]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005422:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005426:	f023 0107 	bic.w	r1, r3, #7
 800542a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800542e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005432:	4a31      	ldr	r2, [pc, #196]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005434:	430b      	orrs	r3, r1
 8005436:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800543a:	e003      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005440:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005444:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	2100      	movs	r1, #0
 800544e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005450:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005454:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005456:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800545a:	460b      	mov	r3, r1
 800545c:	4313      	orrs	r3, r2
 800545e:	d024      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005460:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005464:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 800546c:	2b08      	cmp	r3, #8
 800546e:	d005      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005476:	e002      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8005478:	bf00      	nop
 800547a:	e000      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 800547c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800547e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10d      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005486:	4b1c      	ldr	r3, [pc, #112]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005488:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800548c:	f023 0108 	bic.w	r1, r3, #8
 8005490:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005494:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005498:	4a17      	ldr	r2, [pc, #92]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800549a:	430b      	orrs	r3, r1
 800549c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80054a0:	e003      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054a6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80054b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80054b8:	2300      	movs	r3, #0
 80054ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80054bc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80054c0:	460b      	mov	r3, r1
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f000 80b9 	beq.w	800563a <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80054c8:	4b0c      	ldr	r3, [pc, #48]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80054ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054cc:	4a0b      	ldr	r2, [pc, #44]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80054ce:	f043 0301 	orr.w	r3, r3, #1
 80054d2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054d4:	f7fb fae6 	bl	8000aa4 <HAL_GetTick>
 80054d8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80054dc:	e010      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054de:	f7fb fae1 	bl	8000aa4 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d908      	bls.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80054f4:	e00a      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 80054f6:	bf00      	nop
 80054f8:	44020c00 	.word	0x44020c00
 80054fc:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005500:	4bba      	ldr	r3, [pc, #744]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8005502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0e8      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 800550c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005510:	2b00      	cmp	r3, #0
 8005512:	f040 808e 	bne.w	8005632 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005516:	4bb6      	ldr	r3, [pc, #728]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800551c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005520:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d023      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800552c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005530:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005538:	4293      	cmp	r3, r2
 800553a:	d01b      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800553c:	4bac      	ldr	r3, [pc, #688]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800553e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005546:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800554a:	4ba9      	ldr	r3, [pc, #676]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800554c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005550:	4aa7      	ldr	r2, [pc, #668]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005556:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800555a:	4ba5      	ldr	r3, [pc, #660]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800555c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005560:	4aa3      	ldr	r2, [pc, #652]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005566:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800556a:	4aa1      	ldr	r2, [pc, #644]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800556c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005570:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d019      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005580:	f7fb fa90 	bl	8000aa4 <HAL_GetTick>
 8005584:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005588:	e00d      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558a:	f7fb fa8b 	bl	8000aa4 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005594:	1ad2      	subs	r2, r2, r3
 8005596:	f241 3388 	movw	r3, #5000	@ 0x1388
 800559a:	429a      	cmp	r2, r3
 800559c:	d903      	bls.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 80055a4:	e006      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055a6:	4b92      	ldr	r3, [pc, #584]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0ea      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 80055b4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d135      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80055bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80055c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055cc:	d110      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 80055ce:	4b88      	ldr	r3, [pc, #544]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80055d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80055de:	091b      	lsrs	r3, r3, #4
 80055e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80055e4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80055e8:	4a81      	ldr	r2, [pc, #516]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055ea:	430b      	orrs	r3, r1
 80055ec:	61d3      	str	r3, [r2, #28]
 80055ee:	e005      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80055f0:	4b7f      	ldr	r3, [pc, #508]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	4a7e      	ldr	r2, [pc, #504]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055f6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80055fa:	61d3      	str	r3, [r2, #28]
 80055fc:	4b7c      	ldr	r3, [pc, #496]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005602:	4a7b      	ldr	r2, [pc, #492]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005608:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800560c:	4b78      	ldr	r3, [pc, #480]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800560e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005616:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800561a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800561e:	4a74      	ldr	r2, [pc, #464]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005620:	430b      	orrs	r3, r1
 8005622:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005626:	e008      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005628:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800562c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8005630:	e003      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005632:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005636:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800563a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005646:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005648:	2300      	movs	r3, #0
 800564a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800564c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005650:	460b      	mov	r3, r1
 8005652:	4313      	orrs	r3, r2
 8005654:	d035      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800565a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800565e:	2b30      	cmp	r3, #48	@ 0x30
 8005660:	d014      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8005662:	2b30      	cmp	r3, #48	@ 0x30
 8005664:	d80e      	bhi.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8005666:	2b20      	cmp	r3, #32
 8005668:	d012      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 800566a:	2b20      	cmp	r3, #32
 800566c:	d80a      	bhi.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d010      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8005672:	2b10      	cmp	r3, #16
 8005674:	d106      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005676:	4b5e      	ldr	r3, [pc, #376]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567a:	4a5d      	ldr	r2, [pc, #372]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800567c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005680:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005682:	e008      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800568a:	e004      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 800568c:	bf00      	nop
 800568e:	e002      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005690:	bf00      	nop
 8005692:	e000      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005696:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10d      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800569e:	4b54      	ldr	r3, [pc, #336]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80056a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80056a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056b0:	4a4f      	ldr	r2, [pc, #316]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80056b2:	430b      	orrs	r3, r1
 80056b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80056b8:	e003      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056be:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80056c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80056ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80056d0:	2300      	movs	r3, #0
 80056d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80056d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80056d8:	460b      	mov	r3, r1
 80056da:	4313      	orrs	r3, r2
 80056dc:	d033      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80056de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 80056ea:	2b40      	cmp	r3, #64	@ 0x40
 80056ec:	d007      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80056ee:	e010      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056f0:	4b3f      	ldr	r3, [pc, #252]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	4a3e      	ldr	r2, [pc, #248]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80056f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056fa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80056fc:	e00d      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005702:	3308      	adds	r3, #8
 8005704:	4618      	mov	r0, r3
 8005706:	f000 facb 	bl	8005ca0 <RCCEx_PLL2_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005710:	e003      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800571a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10d      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005722:	4b33      	ldr	r3, [pc, #204]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005724:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005728:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800572c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005730:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005734:	4a2e      	ldr	r2, [pc, #184]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005736:	430b      	orrs	r3, r1
 8005738:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800573c:	e003      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005742:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005752:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005754:	2300      	movs	r3, #0
 8005756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005758:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800575c:	460b      	mov	r3, r1
 800575e:	4313      	orrs	r3, r2
 8005760:	d04c      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005766:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800576a:	2b04      	cmp	r3, #4
 800576c:	d827      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800576e:	a201      	add	r2, pc, #4	@ (adr r2, 8005774 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	08005789 	.word	0x08005789
 8005778:	08005797 	.word	0x08005797
 800577c:	080057ab 	.word	0x080057ab
 8005780:	080057c7 	.word	0x080057c7
 8005784:	080057c7 	.word	0x080057c7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005788:	4b19      	ldr	r3, [pc, #100]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800578a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578c:	4a18      	ldr	r2, [pc, #96]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800578e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005792:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005794:	e018      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800579a:	3308      	adds	r3, #8
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fa7f 	bl	8005ca0 <RCCEx_PLL2_Config>
 80057a2:	4603      	mov	r3, r0
 80057a4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80057a8:	e00e      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057ae:	3330      	adds	r3, #48	@ 0x30
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fb0d 	bl	8005dd0 <RCCEx_PLL3_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80057bc:	e004      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80057c4:	e000      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 80057c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d111      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80057d0:	4b07      	ldr	r3, [pc, #28]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80057d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057d6:	f023 0107 	bic.w	r1, r3, #7
 80057da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057e2:	4a03      	ldr	r2, [pc, #12]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80057e4:	430b      	orrs	r3, r1
 80057e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80057ea:	e007      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xedc>
 80057ec:	44020800 	.word	0x44020800
 80057f0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80057f8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80057fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005808:	633b      	str	r3, [r7, #48]	@ 0x30
 800580a:	2300      	movs	r3, #0
 800580c:	637b      	str	r3, [r7, #52]	@ 0x34
 800580e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005812:	460b      	mov	r3, r1
 8005814:	4313      	orrs	r3, r2
 8005816:	f000 8081 	beq.w	800591c <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800581a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800581e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005822:	2b20      	cmp	r3, #32
 8005824:	d85f      	bhi.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8005826:	a201      	add	r2, pc, #4	@ (adr r2, 800582c <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	080058b1 	.word	0x080058b1
 8005830:	080058e7 	.word	0x080058e7
 8005834:	080058e7 	.word	0x080058e7
 8005838:	080058e7 	.word	0x080058e7
 800583c:	080058e7 	.word	0x080058e7
 8005840:	080058e7 	.word	0x080058e7
 8005844:	080058e7 	.word	0x080058e7
 8005848:	080058e7 	.word	0x080058e7
 800584c:	080058bf 	.word	0x080058bf
 8005850:	080058e7 	.word	0x080058e7
 8005854:	080058e7 	.word	0x080058e7
 8005858:	080058e7 	.word	0x080058e7
 800585c:	080058e7 	.word	0x080058e7
 8005860:	080058e7 	.word	0x080058e7
 8005864:	080058e7 	.word	0x080058e7
 8005868:	080058e7 	.word	0x080058e7
 800586c:	080058d3 	.word	0x080058d3
 8005870:	080058e7 	.word	0x080058e7
 8005874:	080058e7 	.word	0x080058e7
 8005878:	080058e7 	.word	0x080058e7
 800587c:	080058e7 	.word	0x080058e7
 8005880:	080058e7 	.word	0x080058e7
 8005884:	080058e7 	.word	0x080058e7
 8005888:	080058e7 	.word	0x080058e7
 800588c:	080058ef 	.word	0x080058ef
 8005890:	080058e7 	.word	0x080058e7
 8005894:	080058e7 	.word	0x080058e7
 8005898:	080058e7 	.word	0x080058e7
 800589c:	080058e7 	.word	0x080058e7
 80058a0:	080058e7 	.word	0x080058e7
 80058a4:	080058e7 	.word	0x080058e7
 80058a8:	080058e7 	.word	0x080058e7
 80058ac:	080058ef 	.word	0x080058ef
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b0:	4bb9      	ldr	r3, [pc, #740]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80058b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b4:	4ab8      	ldr	r2, [pc, #736]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80058b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80058bc:	e018      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058c2:	3308      	adds	r3, #8
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 f9eb 	bl	8005ca0 <RCCEx_PLL2_Config>
 80058ca:	4603      	mov	r3, r0
 80058cc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80058d0:	e00e      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058d6:	3330      	adds	r3, #48	@ 0x30
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 fa79 	bl	8005dd0 <RCCEx_PLL3_Config>
 80058de:	4603      	mov	r3, r0
 80058e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80058e4:	e004      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80058ec:	e000      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 80058ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10d      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80058f8:	4ba7      	ldr	r3, [pc, #668]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80058fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058fe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005906:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800590a:	4aa3      	ldr	r2, [pc, #652]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800590c:	430b      	orrs	r3, r1
 800590e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005912:	e003      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005914:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005918:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800591c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800592a:	2300      	movs	r3, #0
 800592c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800592e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005932:	460b      	mov	r3, r1
 8005934:	4313      	orrs	r3, r2
 8005936:	d04e      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005938:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800593c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005940:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005944:	d02e      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005946:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800594a:	d827      	bhi.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800594c:	2bc0      	cmp	r3, #192	@ 0xc0
 800594e:	d02b      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8005950:	2bc0      	cmp	r3, #192	@ 0xc0
 8005952:	d823      	bhi.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005954:	2b80      	cmp	r3, #128	@ 0x80
 8005956:	d017      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8005958:	2b80      	cmp	r3, #128	@ 0x80
 800595a:	d81f      	bhi.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8005960:	2b40      	cmp	r3, #64	@ 0x40
 8005962:	d007      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8005964:	e01a      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005966:	4b8c      	ldr	r3, [pc, #560]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596a:	4a8b      	ldr	r2, [pc, #556]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800596c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005970:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005972:	e01a      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005974:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005978:	3308      	adds	r3, #8
 800597a:	4618      	mov	r0, r3
 800597c:	f000 f990 	bl	8005ca0 <RCCEx_PLL2_Config>
 8005980:	4603      	mov	r3, r0
 8005982:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005986:	e010      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005988:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800598c:	3330      	adds	r3, #48	@ 0x30
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fa1e 	bl	8005dd0 <RCCEx_PLL3_Config>
 8005994:	4603      	mov	r3, r0
 8005996:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800599a:	e006      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80059a2:	e002      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80059a4:	bf00      	nop
 80059a6:	e000      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80059a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10d      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80059b2:	4b79      	ldr	r3, [pc, #484]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80059b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059b8:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80059bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80059c4:	4974      	ldr	r1, [pc, #464]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80059cc:	e003      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059d2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80059d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059de:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80059e2:	623b      	str	r3, [r7, #32]
 80059e4:	2300      	movs	r3, #0
 80059e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80059ec:	460b      	mov	r3, r1
 80059ee:	4313      	orrs	r3, r2
 80059f0:	d055      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80059f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80059fa:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80059fe:	d031      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8005a00:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005a04:	d82a      	bhi.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005a06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a0a:	d02d      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8005a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a10:	d824      	bhi.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005a12:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005a16:	d029      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8005a18:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005a1c:	d81e      	bhi.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a22:	d011      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8005a24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a28:	d818      	bhi.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d020      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8005a2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a32:	d113      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a38:	3308      	adds	r3, #8
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 f930 	bl	8005ca0 <RCCEx_PLL2_Config>
 8005a40:	4603      	mov	r3, r0
 8005a42:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005a46:	e014      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a4c:	3330      	adds	r3, #48	@ 0x30
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 f9be 	bl	8005dd0 <RCCEx_PLL3_Config>
 8005a54:	4603      	mov	r3, r0
 8005a56:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005a5a:	e00a      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a62:	e006      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005a64:	bf00      	nop
 8005a66:	e004      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005a68:	bf00      	nop
 8005a6a:	e002      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005a6c:	bf00      	nop
 8005a6e:	e000      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a72:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10d      	bne.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005a7a:	4b47      	ldr	r3, [pc, #284]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a80:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8005a84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a8c:	4942      	ldr	r1, [pc, #264]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005a94:	e003      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a96:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a9a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	61b9      	str	r1, [r7, #24]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	d03c      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005abe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d81b      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8005ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8005acc <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005b07 	.word	0x08005b07
 8005ad0:	08005add 	.word	0x08005add
 8005ad4:	08005aeb 	.word	0x08005aeb
 8005ad8:	08005b07 	.word	0x08005b07
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005adc:	4b2e      	ldr	r3, [pc, #184]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ae6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005ae8:	e00e      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aee:	3308      	adds	r3, #8
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 f8d5 	bl	8005ca0 <RCCEx_PLL2_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005afc:	e004      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b04:	e000      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8005b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b08:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10d      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005b10:	4b21      	ldr	r3, [pc, #132]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005b12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b16:	f023 0203 	bic.w	r2, r3, #3
 8005b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b22:	491d      	ldr	r1, [pc, #116]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005b2a:	e003      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b30:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	6139      	str	r1, [r7, #16]
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	d03c      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005b50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b5c:	d00e      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005b5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b62:	d815      	bhi.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d019      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8005b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b6c:	d110      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b72:	4a09      	ldr	r2, [pc, #36]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b78:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005b7a:	e010      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b80:	3308      	adds	r3, #8
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 f88c 	bl	8005ca0 <RCCEx_PLL2_Config>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005b8e:	e006      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b96:	e002      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8005b98:	44020c00 	.word	0x44020c00
        break;
 8005b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10d      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bb8:	4938      	ldr	r1, [pc, #224]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005bc0:	e003      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005bc6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	f003 0310 	and.w	r3, r3, #16
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005be0:	460b      	mov	r3, r1
 8005be2:	4313      	orrs	r3, r2
 8005be4:	d038      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005bee:	2b30      	cmp	r3, #48	@ 0x30
 8005bf0:	d01b      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8005bf2:	2b30      	cmp	r3, #48	@ 0x30
 8005bf4:	d815      	bhi.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8005bf6:	2b10      	cmp	r3, #16
 8005bf8:	d002      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8005bfa:	2b20      	cmp	r3, #32
 8005bfc:	d007      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8005bfe:	e010      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c00:	4b26      	ldr	r3, [pc, #152]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c04:	4a25      	ldr	r2, [pc, #148]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c0a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005c0c:	e00e      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c12:	3330      	adds	r3, #48	@ 0x30
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 f8db 	bl	8005dd0 <RCCEx_PLL3_Config>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005c20:	e004      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c28:	e000      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8005c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10d      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005c34:	4b19      	ldr	r3, [pc, #100]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c3a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c42:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005c46:	4915      	ldr	r1, [pc, #84]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005c4e:	e003      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c50:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c54:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	2100      	movs	r1, #0
 8005c62:	6039      	str	r1, [r7, #0]
 8005c64:	f003 0308 	and.w	r3, r3, #8
 8005c68:	607b      	str	r3, [r7, #4]
 8005c6a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4313      	orrs	r3, r2
 8005c72:	d00c      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005c74:	4b09      	ldr	r3, [pc, #36]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c82:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005c86:	4905      	ldr	r1, [pc, #20]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005c8e:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	37e8      	adds	r7, #232	@ 0xe8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c9c:	44020c00 	.word	0x44020c00

08005ca0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005ca8:	4b48      	ldr	r3, [pc, #288]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a47      	ldr	r2, [pc, #284]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005cae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005cb2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005cb4:	f7fa fef6 	bl	8000aa4 <HAL_GetTick>
 8005cb8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005cba:	e008      	b.n	8005cce <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005cbc:	f7fa fef2 	bl	8000aa4 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e07a      	b.n	8005dc4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005cce:	4b3f      	ldr	r3, [pc, #252]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1f0      	bne.n	8005cbc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005cda:	4b3c      	ldr	r3, [pc, #240]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cde:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005ce2:	f023 0303 	bic.w	r3, r3, #3
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6811      	ldr	r1, [r2, #0]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6852      	ldr	r2, [r2, #4]
 8005cee:	0212      	lsls	r2, r2, #8
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	4936      	ldr	r1, [pc, #216]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	025b      	lsls	r3, r3, #9
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	041b      	lsls	r3, r3, #16
 8005d16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	061b      	lsls	r3, r3, #24
 8005d24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005d28:	4928      	ldr	r1, [pc, #160]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005d2e:	4b27      	ldr	r3, [pc, #156]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d32:	f023 020c 	bic.w	r2, r3, #12
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	4924      	ldr	r1, [pc, #144]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005d40:	4b22      	ldr	r3, [pc, #136]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d44:	f023 0220 	bic.w	r2, r3, #32
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	491f      	ldr	r1, [pc, #124]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005d52:	4b1e      	ldr	r3, [pc, #120]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5a:	491c      	ldr	r1, [pc, #112]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005d60:	4b1a      	ldr	r3, [pc, #104]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d64:	4a19      	ldr	r2, [pc, #100]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005d66:	f023 0310 	bic.w	r3, r3, #16
 8005d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005d6c:	4b17      	ldr	r3, [pc, #92]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d70:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d74:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6a12      	ldr	r2, [r2, #32]
 8005d7c:	00d2      	lsls	r2, r2, #3
 8005d7e:	4913      	ldr	r1, [pc, #76]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005d84:	4b11      	ldr	r3, [pc, #68]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d88:	4a10      	ldr	r2, [pc, #64]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005d8a:	f043 0310 	orr.w	r3, r3, #16
 8005d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005d90:	4b0e      	ldr	r3, [pc, #56]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a0d      	ldr	r2, [pc, #52]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005d96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d9a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d9c:	f7fa fe82 	bl	8000aa4 <HAL_GetTick>
 8005da0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005da2:	e008      	b.n	8005db6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005da4:	f7fa fe7e 	bl	8000aa4 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e006      	b.n	8005dc4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005db6:	4b05      	ldr	r3, [pc, #20]	@ (8005dcc <RCCEx_PLL2_Config+0x12c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0f0      	beq.n	8005da4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0

}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	44020c00 	.word	0x44020c00

08005dd0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8005dd8:	4b48      	ldr	r3, [pc, #288]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a47      	ldr	r2, [pc, #284]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005dde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005de2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005de4:	f7fa fe5e 	bl	8000aa4 <HAL_GetTick>
 8005de8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005dea:	e008      	b.n	8005dfe <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005dec:	f7fa fe5a 	bl	8000aa4 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d901      	bls.n	8005dfe <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e07a      	b.n	8005ef4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1f0      	bne.n	8005dec <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005e12:	f023 0303 	bic.w	r3, r3, #3
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6811      	ldr	r1, [r2, #0]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6852      	ldr	r2, [r2, #4]
 8005e1e:	0212      	lsls	r2, r2, #8
 8005e20:	430a      	orrs	r2, r1
 8005e22:	4936      	ldr	r1, [pc, #216]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	630b      	str	r3, [r1, #48]	@ 0x30
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	025b      	lsls	r3, r3, #9
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	041b      	lsls	r3, r3, #16
 8005e46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	3b01      	subs	r3, #1
 8005e52:	061b      	lsls	r3, r3, #24
 8005e54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005e58:	4928      	ldr	r1, [pc, #160]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e5e:	4b27      	ldr	r3, [pc, #156]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e62:	f023 020c 	bic.w	r2, r3, #12
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	4924      	ldr	r1, [pc, #144]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005e70:	4b22      	ldr	r3, [pc, #136]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e74:	f023 0220 	bic.w	r2, r3, #32
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	491f      	ldr	r1, [pc, #124]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005e82:	4b1e      	ldr	r3, [pc, #120]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005e84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8a:	491c      	ldr	r1, [pc, #112]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005e90:	4b1a      	ldr	r3, [pc, #104]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e94:	4a19      	ldr	r2, [pc, #100]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005e96:	f023 0310 	bic.w	r3, r3, #16
 8005e9a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005e9c:	4b17      	ldr	r3, [pc, #92]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ea0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ea4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6a12      	ldr	r2, [r2, #32]
 8005eac:	00d2      	lsls	r2, r2, #3
 8005eae:	4913      	ldr	r1, [pc, #76]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005eb4:	4b11      	ldr	r3, [pc, #68]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb8:	4a10      	ldr	r2, [pc, #64]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005eba:	f043 0310 	orr.w	r3, r3, #16
 8005ebe:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8005ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ecc:	f7fa fdea 	bl	8000aa4 <HAL_GetTick>
 8005ed0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ed2:	e008      	b.n	8005ee6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ed4:	f7fa fde6 	bl	8000aa4 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d901      	bls.n	8005ee6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e006      	b.n	8005ef4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ee6:	4b05      	ldr	r3, [pc, #20]	@ (8005efc <RCCEx_PLL3_Config+0x12c>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0f0      	beq.n	8005ed4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	44020c00 	.word	0x44020c00

08005f00 <memset>:
 8005f00:	4402      	add	r2, r0
 8005f02:	4603      	mov	r3, r0
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d100      	bne.n	8005f0a <memset+0xa>
 8005f08:	4770      	bx	lr
 8005f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f0e:	e7f9      	b.n	8005f04 <memset+0x4>

08005f10 <__libc_init_array>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	4d0d      	ldr	r5, [pc, #52]	@ (8005f48 <__libc_init_array+0x38>)
 8005f14:	2600      	movs	r6, #0
 8005f16:	4c0d      	ldr	r4, [pc, #52]	@ (8005f4c <__libc_init_array+0x3c>)
 8005f18:	1b64      	subs	r4, r4, r5
 8005f1a:	10a4      	asrs	r4, r4, #2
 8005f1c:	42a6      	cmp	r6, r4
 8005f1e:	d109      	bne.n	8005f34 <__libc_init_array+0x24>
 8005f20:	4d0b      	ldr	r5, [pc, #44]	@ (8005f50 <__libc_init_array+0x40>)
 8005f22:	2600      	movs	r6, #0
 8005f24:	4c0b      	ldr	r4, [pc, #44]	@ (8005f54 <__libc_init_array+0x44>)
 8005f26:	f000 f817 	bl	8005f58 <_init>
 8005f2a:	1b64      	subs	r4, r4, r5
 8005f2c:	10a4      	asrs	r4, r4, #2
 8005f2e:	42a6      	cmp	r6, r4
 8005f30:	d105      	bne.n	8005f3e <__libc_init_array+0x2e>
 8005f32:	bd70      	pop	{r4, r5, r6, pc}
 8005f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f38:	3601      	adds	r6, #1
 8005f3a:	4798      	blx	r3
 8005f3c:	e7ee      	b.n	8005f1c <__libc_init_array+0xc>
 8005f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f42:	3601      	adds	r6, #1
 8005f44:	4798      	blx	r3
 8005f46:	e7f2      	b.n	8005f2e <__libc_init_array+0x1e>
 8005f48:	08005f80 	.word	0x08005f80
 8005f4c:	08005f80 	.word	0x08005f80
 8005f50:	08005f80 	.word	0x08005f80
 8005f54:	08005f84 	.word	0x08005f84

08005f58 <_init>:
 8005f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5a:	bf00      	nop
 8005f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5e:	bc08      	pop	{r3}
 8005f60:	469e      	mov	lr, r3
 8005f62:	4770      	bx	lr

08005f64 <_fini>:
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	bf00      	nop
 8005f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6a:	bc08      	pop	{r3}
 8005f6c:	469e      	mov	lr, r3
 8005f6e:	4770      	bx	lr
