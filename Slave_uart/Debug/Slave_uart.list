
Slave_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000829c  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080084f0  080084f0  000094f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008674  08008674  0000a05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008674  08008674  00009674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800867c  0800867c  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800867c  0800867c  0000967c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008680  08008680  00009680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008684  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000005c  080086e0  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  080086e0  0000a300  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2ac  00000000  00000000  0000a092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cb9  00000000  00000000  0001933e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0001aff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e7  00000000  00000000  0001ba38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a3cb  00000000  00000000  0001c21f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df0f  00000000  00000000  000465ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001096ac  00000000  00000000  000544f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015dba5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fd4  00000000  00000000  0015dbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00160bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000005c 	.word	0x2000005c
 8000270:	00000000 	.word	0x00000000
 8000274:	080084d8 	.word	0x080084d8

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000060 	.word	0x20000060
 8000290:	080084d8 	.word	0x080084d8

08000294 <strlen>:
 8000294:	4603      	mov	r3, r0
 8000296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029a:	2a00      	cmp	r2, #0
 800029c:	d1fb      	bne.n	8000296 <strlen+0x2>
 800029e:	1a18      	subs	r0, r3, r0
 80002a0:	3801      	subs	r0, #1
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b8:	f000 b9b0 	b.w	800061c <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002da:	4688      	mov	r8, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	468e      	mov	lr, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d95f      	bls.n	80003aa <__udivmoddi4+0xd6>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	b14e      	cbz	r6, 8000304 <__udivmoddi4+0x30>
 80002f0:	f1c6 0320 	rsb	r3, r6, #32
 80002f4:	fa01 fe06 	lsl.w	lr, r1, r6
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	40b4      	lsls	r4, r6
 80002fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000300:	ea43 0e0e 	orr.w	lr, r3, lr
 8000304:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fbbe f1f8 	udiv	r1, lr, r8
 8000312:	fb08 ee11 	mls	lr, r8, r1, lr
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800031e:	429a      	cmp	r2, r3
 8000320:	d907      	bls.n	8000332 <__udivmoddi4+0x5e>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000328:	d202      	bcs.n	8000330 <__udivmoddi4+0x5c>
 800032a:	429a      	cmp	r2, r3
 800032c:	f200 8154 	bhi.w	80005d8 <__udivmoddi4+0x304>
 8000330:	4601      	mov	r1, r0
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	b2a2      	uxth	r2, r4
 8000336:	fbb3 f0f8 	udiv	r0, r3, r8
 800033a:	fb08 3310 	mls	r3, r8, r0, r3
 800033e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000342:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000346:	4594      	cmp	ip, r2
 8000348:	d90b      	bls.n	8000362 <__udivmoddi4+0x8e>
 800034a:	18ba      	adds	r2, r7, r2
 800034c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000350:	bf2c      	ite	cs
 8000352:	2401      	movcs	r4, #1
 8000354:	2400      	movcc	r4, #0
 8000356:	4594      	cmp	ip, r2
 8000358:	d902      	bls.n	8000360 <__udivmoddi4+0x8c>
 800035a:	2c00      	cmp	r4, #0
 800035c:	f000 813f 	beq.w	80005de <__udivmoddi4+0x30a>
 8000360:	4618      	mov	r0, r3
 8000362:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000366:	eba2 020c 	sub.w	r2, r2, ip
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa2>
 800036e:	40f2      	lsrs	r2, r6
 8000370:	2300      	movs	r3, #0
 8000372:	e9c5 2300 	strd	r2, r3, [r5]
 8000376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xb6>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb0>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa2>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d14e      	bne.n	8000430 <__udivmoddi4+0x15c>
 8000392:	4543      	cmp	r3, r8
 8000394:	f0c0 8112 	bcc.w	80005bc <__udivmoddi4+0x2e8>
 8000398:	4282      	cmp	r2, r0
 800039a:	f240 810f 	bls.w	80005bc <__udivmoddi4+0x2e8>
 800039e:	4608      	mov	r0, r1
 80003a0:	2d00      	cmp	r5, #0
 80003a2:	d0e8      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003a4:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a8:	e7e5      	b.n	8000376 <__udivmoddi4+0xa2>
 80003aa:	2a00      	cmp	r2, #0
 80003ac:	f000 80ac 	beq.w	8000508 <__udivmoddi4+0x234>
 80003b0:	fab2 f682 	clz	r6, r2
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	f040 80bb 	bne.w	8000530 <__udivmoddi4+0x25c>
 80003ba:	1a8b      	subs	r3, r1, r2
 80003bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003c0:	b2bc      	uxth	r4, r7
 80003c2:	2101      	movs	r1, #1
 80003c4:	0c02      	lsrs	r2, r0, #16
 80003c6:	b280      	uxth	r0, r0
 80003c8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003d4:	fb04 f20c 	mul.w	r2, r4, ip
 80003d8:	429a      	cmp	r2, r3
 80003da:	d90e      	bls.n	80003fa <__udivmoddi4+0x126>
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e2:	bf2c      	ite	cs
 80003e4:	f04f 0901 	movcs.w	r9, #1
 80003e8:	f04f 0900 	movcc.w	r9, #0
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d903      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003f0:	f1b9 0f00 	cmp.w	r9, #0
 80003f4:	f000 80ec 	beq.w	80005d0 <__udivmoddi4+0x2fc>
 80003f8:	46c4      	mov	ip, r8
 80003fa:	1a9b      	subs	r3, r3, r2
 80003fc:	fbb3 f8fe 	udiv	r8, r3, lr
 8000400:	fb0e 3318 	mls	r3, lr, r8, r3
 8000404:	fb04 f408 	mul.w	r4, r4, r8
 8000408:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800040c:	4294      	cmp	r4, r2
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x154>
 8000410:	18ba      	adds	r2, r7, r2
 8000412:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000416:	bf2c      	ite	cs
 8000418:	2001      	movcs	r0, #1
 800041a:	2000      	movcc	r0, #0
 800041c:	4294      	cmp	r4, r2
 800041e:	d902      	bls.n	8000426 <__udivmoddi4+0x152>
 8000420:	2800      	cmp	r0, #0
 8000422:	f000 80d1 	beq.w	80005c8 <__udivmoddi4+0x2f4>
 8000426:	4698      	mov	r8, r3
 8000428:	1b12      	subs	r2, r2, r4
 800042a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800042e:	e79d      	b.n	800036c <__udivmoddi4+0x98>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa08 f401 	lsl.w	r4, r8, r1
 800043a:	fa00 f901 	lsl.w	r9, r0, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	fa28 f806 	lsr.w	r8, r8, r6
 8000446:	408a      	lsls	r2, r1
 8000448:	431f      	orrs	r7, r3
 800044a:	fa20 f306 	lsr.w	r3, r0, r6
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	4323      	orrs	r3, r4
 8000452:	fa1f fc87 	uxth.w	ip, r7
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fbb8 fef0 	udiv	lr, r8, r0
 800045c:	fb00 881e 	mls	r8, r0, lr, r8
 8000460:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000464:	fb0e f80c 	mul.w	r8, lr, ip
 8000468:	45a0      	cmp	r8, r4
 800046a:	d90e      	bls.n	800048a <__udivmoddi4+0x1b6>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000472:	bf2c      	ite	cs
 8000474:	f04f 0b01 	movcs.w	fp, #1
 8000478:	f04f 0b00 	movcc.w	fp, #0
 800047c:	45a0      	cmp	r8, r4
 800047e:	d903      	bls.n	8000488 <__udivmoddi4+0x1b4>
 8000480:	f1bb 0f00 	cmp.w	fp, #0
 8000484:	f000 80b8 	beq.w	80005f8 <__udivmoddi4+0x324>
 8000488:	46d6      	mov	lr, sl
 800048a:	eba4 0408 	sub.w	r4, r4, r8
 800048e:	fa1f f883 	uxth.w	r8, r3
 8000492:	fbb4 f3f0 	udiv	r3, r4, r0
 8000496:	fb00 4413 	mls	r4, r0, r3, r4
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004a2:	45a4      	cmp	ip, r4
 80004a4:	d90e      	bls.n	80004c4 <__udivmoddi4+0x1f0>
 80004a6:	193c      	adds	r4, r7, r4
 80004a8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004ac:	bf2c      	ite	cs
 80004ae:	f04f 0801 	movcs.w	r8, #1
 80004b2:	f04f 0800 	movcc.w	r8, #0
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d903      	bls.n	80004c2 <__udivmoddi4+0x1ee>
 80004ba:	f1b8 0f00 	cmp.w	r8, #0
 80004be:	f000 809f 	beq.w	8000600 <__udivmoddi4+0x32c>
 80004c2:	4603      	mov	r3, r0
 80004c4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c8:	eba4 040c 	sub.w	r4, r4, ip
 80004cc:	fba0 ec02 	umull	lr, ip, r0, r2
 80004d0:	4564      	cmp	r4, ip
 80004d2:	4673      	mov	r3, lr
 80004d4:	46e0      	mov	r8, ip
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0x20a>
 80004d8:	d107      	bne.n	80004ea <__udivmoddi4+0x216>
 80004da:	45f1      	cmp	r9, lr
 80004dc:	d205      	bcs.n	80004ea <__udivmoddi4+0x216>
 80004de:	ebbe 0302 	subs.w	r3, lr, r2
 80004e2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e6:	3801      	subs	r0, #1
 80004e8:	46e0      	mov	r8, ip
 80004ea:	b15d      	cbz	r5, 8000504 <__udivmoddi4+0x230>
 80004ec:	ebb9 0203 	subs.w	r2, r9, r3
 80004f0:	eb64 0408 	sbc.w	r4, r4, r8
 80004f4:	fa04 f606 	lsl.w	r6, r4, r6
 80004f8:	fa22 f301 	lsr.w	r3, r2, r1
 80004fc:	40cc      	lsrs	r4, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e736      	b.n	8000376 <__udivmoddi4+0xa2>
 8000508:	fbb1 fcf2 	udiv	ip, r1, r2
 800050c:	0c01      	lsrs	r1, r0, #16
 800050e:	4614      	mov	r4, r2
 8000510:	b280      	uxth	r0, r0
 8000512:	4696      	mov	lr, r2
 8000514:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000518:	2620      	movs	r6, #32
 800051a:	4690      	mov	r8, r2
 800051c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000520:	4610      	mov	r0, r2
 8000522:	fbb1 f1f2 	udiv	r1, r1, r2
 8000526:	eba3 0308 	sub.w	r3, r3, r8
 800052a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052e:	e74b      	b.n	80003c8 <__udivmoddi4+0xf4>
 8000530:	40b7      	lsls	r7, r6
 8000532:	f1c6 0320 	rsb	r3, r6, #32
 8000536:	fa01 f206 	lsl.w	r2, r1, r6
 800053a:	fa21 f803 	lsr.w	r8, r1, r3
 800053e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000542:	fa20 f303 	lsr.w	r3, r0, r3
 8000546:	b2bc      	uxth	r4, r7
 8000548:	40b0      	lsls	r0, r6
 800054a:	4313      	orrs	r3, r2
 800054c:	0c02      	lsrs	r2, r0, #16
 800054e:	0c19      	lsrs	r1, r3, #16
 8000550:	b280      	uxth	r0, r0
 8000552:	fbb8 f9fe 	udiv	r9, r8, lr
 8000556:	fb0e 8819 	mls	r8, lr, r9, r8
 800055a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	4588      	cmp	r8, r1
 8000564:	d951      	bls.n	800060a <__udivmoddi4+0x336>
 8000566:	1879      	adds	r1, r7, r1
 8000568:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 800056c:	bf2c      	ite	cs
 800056e:	f04f 0a01 	movcs.w	sl, #1
 8000572:	f04f 0a00 	movcc.w	sl, #0
 8000576:	4588      	cmp	r8, r1
 8000578:	d902      	bls.n	8000580 <__udivmoddi4+0x2ac>
 800057a:	f1ba 0f00 	cmp.w	sl, #0
 800057e:	d031      	beq.n	80005e4 <__udivmoddi4+0x310>
 8000580:	eba1 0108 	sub.w	r1, r1, r8
 8000584:	fbb1 f9fe 	udiv	r9, r1, lr
 8000588:	fb09 f804 	mul.w	r8, r9, r4
 800058c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000590:	b29b      	uxth	r3, r3
 8000592:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000596:	4543      	cmp	r3, r8
 8000598:	d235      	bcs.n	8000606 <__udivmoddi4+0x332>
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005a0:	bf2c      	ite	cs
 80005a2:	f04f 0a01 	movcs.w	sl, #1
 80005a6:	f04f 0a00 	movcc.w	sl, #0
 80005aa:	4543      	cmp	r3, r8
 80005ac:	d2bb      	bcs.n	8000526 <__udivmoddi4+0x252>
 80005ae:	f1ba 0f00 	cmp.w	sl, #0
 80005b2:	d1b8      	bne.n	8000526 <__udivmoddi4+0x252>
 80005b4:	f1a9 0102 	sub.w	r1, r9, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	e7b4      	b.n	8000526 <__udivmoddi4+0x252>
 80005bc:	1a84      	subs	r4, r0, r2
 80005be:	eb68 0203 	sbc.w	r2, r8, r3
 80005c2:	2001      	movs	r0, #1
 80005c4:	4696      	mov	lr, r2
 80005c6:	e6eb      	b.n	80003a0 <__udivmoddi4+0xcc>
 80005c8:	443a      	add	r2, r7
 80005ca:	f1a8 0802 	sub.w	r8, r8, #2
 80005ce:	e72b      	b.n	8000428 <__udivmoddi4+0x154>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	443b      	add	r3, r7
 80005d6:	e710      	b.n	80003fa <__udivmoddi4+0x126>
 80005d8:	3902      	subs	r1, #2
 80005da:	443b      	add	r3, r7
 80005dc:	e6a9      	b.n	8000332 <__udivmoddi4+0x5e>
 80005de:	443a      	add	r2, r7
 80005e0:	3802      	subs	r0, #2
 80005e2:	e6be      	b.n	8000362 <__udivmoddi4+0x8e>
 80005e4:	eba7 0808 	sub.w	r8, r7, r8
 80005e8:	f1a9 0c02 	sub.w	ip, r9, #2
 80005ec:	4441      	add	r1, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c9      	b.n	800058c <__udivmoddi4+0x2b8>
 80005f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005fc:	443c      	add	r4, r7
 80005fe:	e744      	b.n	800048a <__udivmoddi4+0x1b6>
 8000600:	3b02      	subs	r3, #2
 8000602:	443c      	add	r4, r7
 8000604:	e75e      	b.n	80004c4 <__udivmoddi4+0x1f0>
 8000606:	4649      	mov	r1, r9
 8000608:	e78d      	b.n	8000526 <__udivmoddi4+0x252>
 800060a:	eba1 0108 	sub.w	r1, r1, r8
 800060e:	46cc      	mov	ip, r9
 8000610:	fbb1 f9fe 	udiv	r9, r1, lr
 8000614:	fb09 f804 	mul.w	r8, r9, r4
 8000618:	e7b8      	b.n	800058c <__udivmoddi4+0x2b8>
 800061a:	bf00      	nop

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  if (huart == &huart1) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a1c      	ldr	r2, [pc, #112]	@ (800069c <HAL_UART_RxCpltCallback+0x7c>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d132      	bne.n	8000696 <HAL_UART_RxCpltCallback+0x76>
    // Check for terminator
    if (rx_buffer[rx_index] == '\n') {
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <HAL_UART_RxCpltCallback+0x80>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	4b1b      	ldr	r3, [pc, #108]	@ (80006a4 <HAL_UART_RxCpltCallback+0x84>)
 8000638:	5c9b      	ldrb	r3, [r3, r2]
 800063a:	2b0a      	cmp	r3, #10
 800063c:	d113      	bne.n	8000666 <HAL_UART_RxCpltCallback+0x46>
      rx_buffer[rx_index] = '\0'; // Null-terminate
 800063e:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <HAL_UART_RxCpltCallback+0x80>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	461a      	mov	r2, r3
 8000644:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <HAL_UART_RxCpltCallback+0x84>)
 8000646:	2100      	movs	r1, #0
 8000648:	5499      	strb	r1, [r3, r2]
      received_adc = (uint16_t)atoi((char*)rx_buffer);
 800064a:	4816      	ldr	r0, [pc, #88]	@ (80006a4 <HAL_UART_RxCpltCallback+0x84>)
 800064c:	f007 fa0a 	bl	8007a64 <atoi>
 8000650:	4603      	mov	r3, r0
 8000652:	b29a      	uxth	r2, r3
 8000654:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <HAL_UART_RxCpltCallback+0x88>)
 8000656:	801a      	strh	r2, [r3, #0]
      DataFlag = 1;
 8000658:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <HAL_UART_RxCpltCallback+0x8c>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
      rx_index = 0; // Reset index after processing
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <HAL_UART_RxCpltCallback+0x80>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
      return;
 8000664:	e017      	b.n	8000696 <HAL_UART_RxCpltCallback+0x76>
    } else {
      // Prevent buffer overflow
      if (rx_index < sizeof(rx_buffer) - 1) {
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <HAL_UART_RxCpltCallback+0x80>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b08      	cmp	r3, #8
 800066c:	d806      	bhi.n	800067c <HAL_UART_RxCpltCallback+0x5c>
        rx_index++; // Only increment if space remains
 800066e:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <HAL_UART_RxCpltCallback+0x80>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	3301      	adds	r3, #1
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <HAL_UART_RxCpltCallback+0x80>)
 8000678:	701a      	strb	r2, [r3, #0]
 800067a:	e002      	b.n	8000682 <HAL_UART_RxCpltCallback+0x62>
      } else {
        rx_index = 0; // Reset on overflow
 800067c:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <HAL_UART_RxCpltCallback+0x80>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
      }
    }
    // Restart reception
    HAL_UART_Receive_IT(&huart1, &rx_buffer[rx_index], 1);
 8000682:	4b07      	ldr	r3, [pc, #28]	@ (80006a0 <HAL_UART_RxCpltCallback+0x80>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <HAL_UART_RxCpltCallback+0x84>)
 800068a:	4413      	add	r3, r2
 800068c:	2201      	movs	r2, #1
 800068e:	4619      	mov	r1, r3
 8000690:	4802      	ldr	r0, [pc, #8]	@ (800069c <HAL_UART_RxCpltCallback+0x7c>)
 8000692:	f005 faef 	bl	8005c74 <HAL_UART_Receive_IT>
  }
}
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000088 	.word	0x20000088
 80006a0:	20000086 	.word	0x20000086
 80006a4:	2000007c 	.word	0x2000007c
 80006a8:	2000007a 	.word	0x2000007a
 80006ac:	20000078 	.word	0x20000078

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f000 fb87 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f839 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f000 f92f 	bl	8000920 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006c2:	f000 f895 	bl	80007f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006c6:	f000 f8df 	bl	8000888 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rx_buffer[0], 1);
 80006ca:	2201      	movs	r2, #1
 80006cc:	4912      	ldr	r1, [pc, #72]	@ (8000718 <main+0x68>)
 80006ce:	4813      	ldr	r0, [pc, #76]	@ (800071c <main+0x6c>)
 80006d0:	f005 fad0 	bl	8005c74 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (DataFlag) {  // New ADC value received
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <main+0x70>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d0fa      	beq.n	80006d4 <main+0x24>
	  DataFlag = 0;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <main+0x70>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]

	  // Example: Print received ADC value via USART2
	  char debug_msg[20];
	  sprintf(debug_msg, "Received: %hu\r\n", received_adc);
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <main+0x74>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	490e      	ldr	r1, [pc, #56]	@ (8000728 <main+0x78>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f007 f9bc 	bl	8007a6c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fdcc 	bl	8000294 <strlen>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	1d39      	adds	r1, r7, #4
 8000702:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000706:	4809      	ldr	r0, [pc, #36]	@ (800072c <main+0x7c>)
 8000708:	f005 fa16 	bl	8005b38 <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart1, &rx_buffer[0], 1);
 800070c:	2201      	movs	r2, #1
 800070e:	4902      	ldr	r1, [pc, #8]	@ (8000718 <main+0x68>)
 8000710:	4802      	ldr	r0, [pc, #8]	@ (800071c <main+0x6c>)
 8000712:	f005 faaf 	bl	8005c74 <HAL_UART_Receive_IT>
	if (DataFlag) {  // New ADC value received
 8000716:	e7dd      	b.n	80006d4 <main+0x24>
 8000718:	2000007c 	.word	0x2000007c
 800071c:	20000088 	.word	0x20000088
 8000720:	20000078 	.word	0x20000078
 8000724:	2000007a 	.word	0x2000007a
 8000728:	080084f0 	.word	0x080084f0
 800072c:	2000011c 	.word	0x2000011c

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b09c      	sub	sp, #112	@ 0x70
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2250      	movs	r2, #80	@ 0x50
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f007 fa3a 	bl	8007bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
 8000754:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000756:	4b24      	ldr	r3, [pc, #144]	@ (80007e8 <SystemClock_Config+0xb8>)
 8000758:	691b      	ldr	r3, [r3, #16]
 800075a:	4a23      	ldr	r2, [pc, #140]	@ (80007e8 <SystemClock_Config+0xb8>)
 800075c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000760:	6113      	str	r3, [r2, #16]
 8000762:	4b21      	ldr	r3, [pc, #132]	@ (80007e8 <SystemClock_Config+0xb8>)
 8000764:	691b      	ldr	r3, [r3, #16]
 8000766:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800076e:	bf00      	nop
 8000770:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <SystemClock_Config+0xb8>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	f003 0308 	and.w	r3, r3, #8
 8000778:	2b08      	cmp	r3, #8
 800077a:	d1f9      	bne.n	8000770 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000784:	2308      	movs	r3, #8
 8000786:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000788:	2340      	movs	r3, #64	@ 0x40
 800078a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800078c:	2300      	movs	r3, #0
 800078e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	4618      	mov	r0, r3
 8000796:	f000 ff81 	bl	800169c <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80007a0:	f000 f92e 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	231f      	movs	r3, #31
 80007a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2101      	movs	r1, #1
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fba2 	bl	8001f0c <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007ce:	f000 f917 	bl	8000a00 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <SystemClock_Config+0xbc>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a05      	ldr	r2, [pc, #20]	@ (80007ec <SystemClock_Config+0xbc>)
 80007d8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80007dc:	6013      	str	r3, [r2, #0]
}
 80007de:	bf00      	nop
 80007e0:	3770      	adds	r7, #112	@ 0x70
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	44020800 	.word	0x44020800
 80007ec:	40022000 	.word	0x40022000

080007f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <MX_USART1_UART_Init+0x90>)
 80007f6:	4a23      	ldr	r2, [pc, #140]	@ (8000884 <MX_USART1_UART_Init+0x94>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007fa:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_USART1_UART_Init+0x90>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_USART1_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b1d      	ldr	r3, [pc, #116]	@ (8000880 <MX_USART1_UART_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_USART1_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_USART1_UART_Init+0x90>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_USART1_UART_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_USART1_UART_Init+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <MX_USART1_UART_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_USART1_UART_Init+0x90>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000832:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_USART1_UART_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000838:	4811      	ldr	r0, [pc, #68]	@ (8000880 <MX_USART1_UART_Init+0x90>)
 800083a:	f005 f92d 	bl	8005a98 <HAL_UART_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000844:	f000 f8dc 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	480d      	ldr	r0, [pc, #52]	@ (8000880 <MX_USART1_UART_Init+0x90>)
 800084c:	f007 f83f 	bl	80078ce <HAL_UARTEx_SetTxFifoThreshold>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000856:	f000 f8d3 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	4808      	ldr	r0, [pc, #32]	@ (8000880 <MX_USART1_UART_Init+0x90>)
 800085e:	f007 f874 	bl	800794a <HAL_UARTEx_SetRxFifoThreshold>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000868:	f000 f8ca 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	@ (8000880 <MX_USART1_UART_Init+0x90>)
 800086e:	f006 fff5 	bl	800785c <HAL_UARTEx_DisableFifoMode>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000878:	f000 f8c2 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000088 	.word	0x20000088
 8000884:	40013800 	.word	0x40013800

08000888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800088c:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 800088e:	4a23      	ldr	r2, [pc, #140]	@ (800091c <MX_USART2_UART_Init+0x94>)
 8000890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000892:	4b21      	ldr	r3, [pc, #132]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d0:	4811      	ldr	r0, [pc, #68]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008d2:	f005 f8e1 	bl	8005a98 <HAL_UART_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008dc:	f000 f890 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	480d      	ldr	r0, [pc, #52]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008e4:	f006 fff3 	bl	80078ce <HAL_UARTEx_SetTxFifoThreshold>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ee:	f000 f887 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4808      	ldr	r0, [pc, #32]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008f6:	f007 f828 	bl	800794a <HAL_UARTEx_SetRxFifoThreshold>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000900:	f000 f87e 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 8000906:	f006 ffa9 	bl	800785c <HAL_UARTEx_DisableFifoMode>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 f876 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000011c 	.word	0x2000011c
 800091c:	40004400 	.word	0x40004400

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b2e      	ldr	r3, [pc, #184]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800093c:	4a2c      	ldr	r2, [pc, #176]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 800093e:	f043 0304 	orr.w	r3, r3, #4
 8000942:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000946:	4b2a      	ldr	r3, [pc, #168]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800094c:	f003 0304 	and.w	r3, r3, #4
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b26      	ldr	r3, [pc, #152]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000956:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800095a:	4a25      	ldr	r2, [pc, #148]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000964:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000966:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000974:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000978:	4a1d      	ldr	r2, [pc, #116]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 800097a:	f043 0302 	orr.w	r3, r3, #2
 800097e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000982:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000984:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000988:	f003 0302 	and.w	r3, r3, #2
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2120      	movs	r1, #32
 8000994:	4817      	ldr	r0, [pc, #92]	@ (80009f4 <MX_GPIO_Init+0xd4>)
 8000996:	f000 fe69 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800099a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800099e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <MX_GPIO_Init+0xd8>)
 80009a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	4813      	ldr	r0, [pc, #76]	@ (80009fc <MX_GPIO_Init+0xdc>)
 80009b0:	f000 fcfe 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009b4:	2320      	movs	r3, #32
 80009b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	4619      	mov	r1, r3
 80009ca:	480a      	ldr	r0, [pc, #40]	@ (80009f4 <MX_GPIO_Init+0xd4>)
 80009cc:	f000 fcf0 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009d0:	2310      	movs	r3, #16
 80009d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	@ (80009fc <MX_GPIO_Init+0xdc>)
 80009e4:	f000 fce4 	bl	80013b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	44020c00 	.word	0x44020c00
 80009f4:	42020000 	.word	0x42020000
 80009f8:	10110000 	.word	0x10110000
 80009fc:	42020800 	.word	0x42020800

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <Error_Handler+0x8>

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b0c0      	sub	sp, #256	@ 0x100
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a34:	f107 0318 	add.w	r3, r7, #24
 8000a38:	22d0      	movs	r2, #208	@ 0xd0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f007 f8bb 	bl	8007bb8 <memset>
  if(huart->Instance==USART1)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a50      	ldr	r2, [pc, #320]	@ (8000b88 <HAL_UART_MspInit+0x16c>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d14e      	bne.n	8000aea <HAL_UART_MspInit+0xce>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a4c:	f04f 0201 	mov.w	r2, #1
 8000a50:	f04f 0300 	mov.w	r3, #0
 8000a54:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a5c:	f107 0318 	add.w	r3, r7, #24
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 fd95 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000a6c:	f7ff ffc8 	bl	8000a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a70:	4b46      	ldr	r3, [pc, #280]	@ (8000b8c <HAL_UART_MspInit+0x170>)
 8000a72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000a76:	4a45      	ldr	r2, [pc, #276]	@ (8000b8c <HAL_UART_MspInit+0x170>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a7c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000a80:	4b42      	ldr	r3, [pc, #264]	@ (8000b8c <HAL_UART_MspInit+0x170>)
 8000a82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	4b3f      	ldr	r3, [pc, #252]	@ (8000b8c <HAL_UART_MspInit+0x170>)
 8000a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a94:	4a3d      	ldr	r2, [pc, #244]	@ (8000b8c <HAL_UART_MspInit+0x170>)
 8000a96:	f043 0302 	orr.w	r3, r3, #2
 8000a9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b8c <HAL_UART_MspInit+0x170>)
 8000aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000aac:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ab0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	482f      	ldr	r0, [pc, #188]	@ (8000b90 <HAL_UART_MspInit+0x174>)
 8000ad4:	f000 fc6c 	bl	80013b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	203a      	movs	r0, #58	@ 0x3a
 8000ade:	f000 fae9 	bl	80010b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ae2:	203a      	movs	r0, #58	@ 0x3a
 8000ae4:	f000 fb00 	bl	80010e8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae8:	e049      	b.n	8000b7e <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART2)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a29      	ldr	r2, [pc, #164]	@ (8000b94 <HAL_UART_MspInit+0x178>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d144      	bne.n	8000b7e <HAL_UART_MspInit+0x162>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000af4:	f04f 0202 	mov.w	r2, #2
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b04:	f107 0318 	add.w	r3, r7, #24
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 fd41 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8000b14:	f7ff ff74 	bl	8000a00 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b18:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <HAL_UART_MspInit+0x170>)
 8000b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000b8c <HAL_UART_MspInit+0x170>)
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b24:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000b28:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <HAL_UART_MspInit+0x170>)
 8000b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <HAL_UART_MspInit+0x170>)
 8000b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b3c:	4a13      	ldr	r2, [pc, #76]	@ (8000b8c <HAL_UART_MspInit+0x170>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <HAL_UART_MspInit+0x170>)
 8000b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b54:	230c      	movs	r3, #12
 8000b56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000b76:	4619      	mov	r1, r3
 8000b78:	4807      	ldr	r0, [pc, #28]	@ (8000b98 <HAL_UART_MspInit+0x17c>)
 8000b7a:	f000 fc19 	bl	80013b0 <HAL_GPIO_Init>
}
 8000b7e:	bf00      	nop
 8000b80:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40013800 	.word	0x40013800
 8000b8c:	44020c00 	.word	0x44020c00
 8000b90:	42020400 	.word	0x42020400
 8000b94:	40004400 	.word	0x40004400
 8000b98:	42020000 	.word	0x42020000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf2:	f000 f987 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c00:	4802      	ldr	r0, [pc, #8]	@ (8000c0c <USART1_IRQHandler+0x10>)
 8000c02:	f005 f899 	bl	8005d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000088 	.word	0x20000088

08000c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c18:	4a14      	ldr	r2, [pc, #80]	@ (8000c6c <_sbrk+0x5c>)
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <_sbrk+0x60>)
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c24:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <_sbrk+0x64>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	@ (8000c78 <_sbrk+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d207      	bcs.n	8000c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c40:	f006 ffc2 	bl	8007bc8 <__errno>
 8000c44:	4603      	mov	r3, r0
 8000c46:	220c      	movs	r2, #12
 8000c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c4e:	e009      	b.n	8000c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c50:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c56:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a05      	ldr	r2, [pc, #20]	@ (8000c74 <_sbrk+0x64>)
 8000c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20044000 	.word	0x20044000
 8000c70:	00000400 	.word	0x00000400
 8000c74:	200001b0 	.word	0x200001b0
 8000c78:	20000300 	.word	0x20000300

08000c7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c82:	4b35      	ldr	r3, [pc, #212]	@ (8000d58 <SystemInit+0xdc>)
 8000c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c88:	4a33      	ldr	r2, [pc, #204]	@ (8000d58 <SystemInit+0xdc>)
 8000c8a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c8e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000c92:	4b32      	ldr	r3, [pc, #200]	@ (8000d5c <SystemInit+0xe0>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000c98:	4b30      	ldr	r3, [pc, #192]	@ (8000d5c <SystemInit+0xe0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d5c <SystemInit+0xe0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d5c <SystemInit+0xe0>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	492c      	ldr	r1, [pc, #176]	@ (8000d5c <SystemInit+0xe0>)
 8000caa:	4b2d      	ldr	r3, [pc, #180]	@ (8000d60 <SystemInit+0xe4>)
 8000cac:	4013      	ands	r3, r2
 8000cae:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d5c <SystemInit+0xe0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000cb6:	4b29      	ldr	r3, [pc, #164]	@ (8000d5c <SystemInit+0xe0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000cbc:	4b27      	ldr	r3, [pc, #156]	@ (8000d5c <SystemInit+0xe0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000cc2:	4b26      	ldr	r3, [pc, #152]	@ (8000d5c <SystemInit+0xe0>)
 8000cc4:	4a27      	ldr	r2, [pc, #156]	@ (8000d64 <SystemInit+0xe8>)
 8000cc6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000cc8:	4b24      	ldr	r3, [pc, #144]	@ (8000d5c <SystemInit+0xe0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000cce:	4b23      	ldr	r3, [pc, #140]	@ (8000d5c <SystemInit+0xe0>)
 8000cd0:	4a24      	ldr	r2, [pc, #144]	@ (8000d64 <SystemInit+0xe8>)
 8000cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000cd4:	4b21      	ldr	r3, [pc, #132]	@ (8000d5c <SystemInit+0xe0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000cda:	4b20      	ldr	r3, [pc, #128]	@ (8000d5c <SystemInit+0xe0>)
 8000cdc:	4a21      	ldr	r2, [pc, #132]	@ (8000d64 <SystemInit+0xe8>)
 8000cde:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d5c <SystemInit+0xe0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d5c <SystemInit+0xe0>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a1c      	ldr	r2, [pc, #112]	@ (8000d5c <SystemInit+0xe0>)
 8000cec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cf0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <SystemInit+0xe0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cf8:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <SystemInit+0xdc>)
 8000cfa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cfe:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000d00:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <SystemInit+0xec>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000d08:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000d10:	d003      	beq.n	8000d1a <SystemInit+0x9e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000d18:	d117      	bne.n	8000d4a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000d1a:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <SystemInit+0xec>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000d26:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <SystemInit+0xec>)
 8000d28:	4a10      	ldr	r2, [pc, #64]	@ (8000d6c <SystemInit+0xf0>)
 8000d2a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <SystemInit+0xec>)
 8000d2e:	4a10      	ldr	r2, [pc, #64]	@ (8000d70 <SystemInit+0xf4>)
 8000d30:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000d32:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <SystemInit+0xec>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a0c      	ldr	r2, [pc, #48]	@ (8000d68 <SystemInit+0xec>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <SystemInit+0xec>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	4a09      	ldr	r2, [pc, #36]	@ (8000d68 <SystemInit+0xec>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	61d3      	str	r3, [r2, #28]
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00
 8000d5c:	44020c00 	.word	0x44020c00
 8000d60:	eae2eae3 	.word	0xeae2eae3
 8000d64:	01010280 	.word	0x01010280
 8000d68:	40022000 	.word	0x40022000
 8000d6c:	08192a3b 	.word	0x08192a3b
 8000d70:	4c5d6e7f 	.word	0x4c5d6e7f

08000d74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d74:	480d      	ldr	r0, [pc, #52]	@ (8000dac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d78:	f7ff ff80 	bl	8000c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d7c:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7e:	490d      	ldr	r1, [pc, #52]	@ (8000db4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d80:	4a0d      	ldr	r2, [pc, #52]	@ (8000db8 <LoopForever+0xe>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d94:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc0 <LoopForever+0x16>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000da2:	f006 ff17 	bl	8007bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000da6:	f7ff fc83 	bl	80006b0 <main>

08000daa <LoopForever>:

LoopForever:
    b LoopForever
 8000daa:	e7fe      	b.n	8000daa <LoopForever>
  ldr   r0, =_estack
 8000dac:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000db8:	08008684 	.word	0x08008684
  ldr r2, =_sbss
 8000dbc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000dc0:	20000300 	.word	0x20000300

08000dc4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC1_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f000 f966 	bl	800109e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000dd2:	f001 fa53 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <HAL_Init+0x44>)
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	f003 030f 	and.w	r3, r3, #15
 8000de0:	490b      	ldr	r1, [pc, #44]	@ (8000e10 <HAL_Init+0x48>)
 8000de2:	5ccb      	ldrb	r3, [r1, r3]
 8000de4:	fa22 f303 	lsr.w	r3, r2, r3
 8000de8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <HAL_Init+0x4c>)
 8000dea:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000dec:	2004      	movs	r0, #4
 8000dee:	f000 f9ab 	bl	8001148 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df2:	200f      	movs	r0, #15
 8000df4:	f000 f810 	bl	8000e18 <HAL_InitTick>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e002      	b.n	8000e08 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e02:	f7ff fe03 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	44020c00 	.word	0x44020c00
 8000e10:	08008500 	.word	0x08008500
 8000e14:	20000000 	.word	0x20000000

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000e24:	4b33      	ldr	r3, [pc, #204]	@ (8000ef4 <HAL_InitTick+0xdc>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d101      	bne.n	8000e30 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e05c      	b.n	8000eea <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000e30:	4b31      	ldr	r3, [pc, #196]	@ (8000ef8 <HAL_InitTick+0xe0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d10c      	bne.n	8000e56 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000efc <HAL_InitTick+0xe4>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef4 <HAL_InitTick+0xdc>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	e037      	b.n	8000ec6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000e56:	f000 f9cf 	bl	80011f8 <HAL_SYSTICK_GetCLKSourceConfig>
 8000e5a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d023      	beq.n	8000eaa <HAL_InitTick+0x92>
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d82d      	bhi.n	8000ec4 <HAL_InitTick+0xac>
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_InitTick+0x5e>
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d00d      	beq.n	8000e90 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000e74:	e026      	b.n	8000ec4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000e76:	4b21      	ldr	r3, [pc, #132]	@ (8000efc <HAL_InitTick+0xe4>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef4 <HAL_InitTick+0xdc>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000e84:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8c:	60fb      	str	r3, [r7, #12]
        break;
 8000e8e:	e01a      	b.n	8000ec6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <HAL_InitTick+0xdc>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e9e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	60fb      	str	r3, [r7, #12]
        break;
 8000ea8:	e00d      	b.n	8000ec6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000eaa:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_InitTick+0xdc>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000eb8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec0:	60fb      	str	r3, [r7, #12]
        break;
 8000ec2:	e000      	b.n	8000ec6 <HAL_InitTick+0xae>
        break;
 8000ec4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f000 f91c 	bl	8001104 <HAL_SYSTICK_Config>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e009      	b.n	8000eea <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ede:	f000 f8e9 	bl	80010b4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000ee2:	4a07      	ldr	r2, [pc, #28]	@ (8000f00 <HAL_InitTick+0xe8>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	e000e010 	.word	0xe000e010
 8000efc:	20000000 	.word	0x20000000
 8000f00:	20000004 	.word	0x20000004

08000f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <HAL_IncTick+0x20>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_IncTick+0x24>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a04      	ldr	r2, [pc, #16]	@ (8000f28 <HAL_IncTick+0x24>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008
 8000f28:	200001b4 	.word	0x200001b4

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	200001b4 	.word	0x200001b4

08000f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0b      	blt.n	8000fd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	f003 021f 	and.w	r2, r3, #31
 8000fc0:	4907      	ldr	r1, [pc, #28]	@ (8000fe0 <__NVIC_EnableIRQ+0x38>)
 8000fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	2001      	movs	r0, #1
 8000fca:	fa00 f202 	lsl.w	r2, r0, r2
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000e100 	.word	0xe000e100

08000fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	@ (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	@ (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	@ 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
         );
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	@ 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff4c 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
 80010c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c2:	f7ff ff63 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 80010c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	68b9      	ldr	r1, [r7, #8]
 80010cc:	6978      	ldr	r0, [r7, #20]
 80010ce:	f7ff ffb3 	bl	8001038 <NVIC_EncodePriority>
 80010d2:	4602      	mov	r2, r0
 80010d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff82 	bl	8000fe4 <__NVIC_SetPriority>
}
 80010e0:	bf00      	nop
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff56 	bl	8000fa8 <__NVIC_EnableIRQ>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001114:	d301      	bcc.n	800111a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001116:	2301      	movs	r3, #1
 8001118:	e00d      	b.n	8001136 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800111a:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <HAL_SYSTICK_Config+0x40>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001122:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <HAL_SYSTICK_Config+0x40>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HAL_SYSTICK_Config+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a05      	ldr	r2, [pc, #20]	@ (8001144 <HAL_SYSTICK_Config+0x40>)
 800112e:	f043 0303 	orr.w	r3, r3, #3
 8001132:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e010 	.word	0xe000e010

08001148 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b04      	cmp	r3, #4
 8001154:	d844      	bhi.n	80011e0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001156:	a201      	add	r2, pc, #4	@ (adr r2, 800115c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115c:	0800117f 	.word	0x0800117f
 8001160:	0800119d 	.word	0x0800119d
 8001164:	080011bf 	.word	0x080011bf
 8001168:	080011e1 	.word	0x080011e1
 800116c:	08001171 	.word	0x08001171
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001170:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a1e      	ldr	r2, [pc, #120]	@ (80011f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6013      	str	r3, [r2, #0]
      break;
 800117c:	e031      	b.n	80011e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800117e:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a1b      	ldr	r2, [pc, #108]	@ (80011f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001184:	f023 0304 	bic.w	r3, r3, #4
 8001188:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800118a:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800118c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001190:	4a18      	ldr	r2, [pc, #96]	@ (80011f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001192:	f023 030c 	bic.w	r3, r3, #12
 8001196:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800119a:	e022      	b.n	80011e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800119c:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a13      	ldr	r2, [pc, #76]	@ (80011f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011a2:	f023 0304 	bic.w	r3, r3, #4
 80011a6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011ae:	f023 030c 	bic.w	r3, r3, #12
 80011b2:	4a10      	ldr	r2, [pc, #64]	@ (80011f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80011bc:	e011      	b.n	80011e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80011be:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a0b      	ldr	r2, [pc, #44]	@ (80011f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011c4:	f023 0304 	bic.w	r3, r3, #4
 80011c8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011d0:	f023 030c 	bic.w	r3, r3, #12
 80011d4:	4a07      	ldr	r2, [pc, #28]	@ (80011f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80011de:	e000      	b.n	80011e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80011e0:	bf00      	nop
  }
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010
 80011f4:	44020c00 	.word	0x44020c00

080011f8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80011fe:	4b17      	ldr	r3, [pc, #92]	@ (800125c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800120a:	2304      	movs	r3, #4
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	e01e      	b.n	800124e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001210:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001212:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2b08      	cmp	r3, #8
 8001220:	d00f      	beq.n	8001242 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	2b08      	cmp	r3, #8
 8001226:	d80f      	bhi.n	8001248 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2b04      	cmp	r3, #4
 8001232:	d003      	beq.n	800123c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001234:	e008      	b.n	8001248 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
        break;
 800123a:	e008      	b.n	800124e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800123c:	2301      	movs	r3, #1
 800123e:	607b      	str	r3, [r7, #4]
        break;
 8001240:	e005      	b.n	800124e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001242:	2302      	movs	r3, #2
 8001244:	607b      	str	r3, [r7, #4]
        break;
 8001246:	e002      	b.n	800124e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
        break;
 800124c:	bf00      	nop
    }
  }
  return systick_source;
 800124e:	687b      	ldr	r3, [r7, #4]
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000e010 	.word	0xe000e010
 8001260:	44020c00 	.word	0x44020c00

08001264 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800126c:	f7ff fe5e 	bl	8000f2c <HAL_GetTick>
 8001270:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e06b      	b.n	8001354 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d008      	beq.n	800129a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2220      	movs	r2, #32
 800128c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e05c      	b.n	8001354 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	695a      	ldr	r2, [r3, #20]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f042 0204 	orr.w	r2, r2, #4
 80012a8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2205      	movs	r2, #5
 80012ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80012b2:	e020      	b.n	80012f6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80012b4:	f7ff fe3a 	bl	8000f2c <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b05      	cmp	r3, #5
 80012c0:	d919      	bls.n	80012f6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c6:	f043 0210 	orr.w	r2, r3, #16
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2203      	movs	r2, #3
 80012d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012e6:	2201      	movs	r2, #1
 80012e8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e02e      	b.n	8001354 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0d7      	beq.n	80012b4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	695a      	ldr	r2, [r3, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0202 	orr.w	r2, r2, #2
 8001312:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2204      	movs	r2, #4
 8001318:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001324:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001336:	2b00      	cmp	r3, #0
 8001338:	d007      	beq.n	800134a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800133e:	2201      	movs	r2, #1
 8001340:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2200      	movs	r2, #0
 8001348:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e019      	b.n	80013a2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d004      	beq.n	8001384 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2220      	movs	r2, #32
 800137e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e00e      	b.n	80013a2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2204      	movs	r2, #4
 8001388:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6812      	ldr	r2, [r2, #0]
 8001396:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80013be:	e142      	b.n	8001646 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2101      	movs	r1, #1
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	4013      	ands	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 8134 	beq.w	8001640 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x38>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b12      	cmp	r3, #18
 80013e6:	d125      	bne.n	8001434 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	08da      	lsrs	r2, r3, #3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3208      	adds	r2, #8
 80013f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	4013      	ands	r3, r2
 800140a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	f003 020f 	and.w	r2, r3, #15
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	4313      	orrs	r3, r2
 8001424:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	08da      	lsrs	r2, r3, #3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3208      	adds	r2, #8
 800142e:	6979      	ldr	r1, [r7, #20]
 8001430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	4013      	ands	r3, r2
 800144a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0203 	and.w	r2, r3, #3
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	4313      	orrs	r3, r2
 8001460:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d00b      	beq.n	8001488 <HAL_GPIO_Init+0xd8>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d007      	beq.n	8001488 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800147c:	2b11      	cmp	r3, #17
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b12      	cmp	r3, #18
 8001486:	d130      	bne.n	80014ea <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	4013      	ands	r3, r2
 800149e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014be:	2201      	movs	r2, #1
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	4013      	ands	r3, r2
 80014cc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	091b      	lsrs	r3, r3, #4
 80014d4:	f003 0201 	and.w	r2, r3, #1
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d109      	bne.n	800150a <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d11b      	bne.n	800153a <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d017      	beq.n	800153a <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	4013      	ands	r3, r2
 8001520:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	4313      	orrs	r3, r2
 8001532:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d07c      	beq.n	8001640 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001546:	4a47      	ldr	r2, [pc, #284]	@ (8001664 <HAL_GPIO_Init+0x2b4>)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	3318      	adds	r3, #24
 800154e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001552:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	220f      	movs	r2, #15
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	4013      	ands	r3, r2
 8001568:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	0a9a      	lsrs	r2, r3, #10
 800156e:	4b3e      	ldr	r3, [pc, #248]	@ (8001668 <HAL_GPIO_Init+0x2b8>)
 8001570:	4013      	ands	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	f002 0203 	and.w	r2, r2, #3
 8001578:	00d2      	lsls	r2, r2, #3
 800157a:	4093      	lsls	r3, r2
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	4313      	orrs	r3, r2
 8001580:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001582:	4938      	ldr	r1, [pc, #224]	@ (8001664 <HAL_GPIO_Init+0x2b4>)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	3318      	adds	r3, #24
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001590:	4b34      	ldr	r3, [pc, #208]	@ (8001664 <HAL_GPIO_Init+0x2b4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43db      	mvns	r3, r3
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	4013      	ands	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80015b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001664 <HAL_GPIO_Init+0x2b4>)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80015ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001664 <HAL_GPIO_Init+0x2b4>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	4013      	ands	r3, r2
 80015c8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80015de:	4a21      	ldr	r2, [pc, #132]	@ (8001664 <HAL_GPIO_Init+0x2b4>)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80015e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <HAL_GPIO_Init+0x2b4>)
 80015e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015ea:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	4013      	ands	r3, r2
 80015f4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800160a:	4a16      	ldr	r2, [pc, #88]	@ (8001664 <HAL_GPIO_Init+0x2b4>)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001612:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <HAL_GPIO_Init+0x2b4>)
 8001614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001618:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	43db      	mvns	r3, r3
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	4013      	ands	r3, r2
 8001622:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4313      	orrs	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001638:	4a0a      	ldr	r2, [pc, #40]	@ (8001664 <HAL_GPIO_Init+0x2b4>)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	3301      	adds	r3, #1
 8001644:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	f47f aeb5 	bne.w	80013c0 <HAL_GPIO_Init+0x10>
  }
}
 8001656:	bf00      	nop
 8001658:	bf00      	nop
 800165a:	371c      	adds	r7, #28
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	44022000 	.word	0x44022000
 8001668:	002f7f7f 	.word	0x002f7f7f

0800166c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
 8001678:	4613      	mov	r3, r2
 800167a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001688:	e002      	b.n	8001690 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d102      	bne.n	80016b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	f000 bc28 	b.w	8001f00 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b0:	4b94      	ldr	r3, [pc, #592]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	f003 0318 	and.w	r3, r3, #24
 80016b8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80016ba:	4b92      	ldr	r3, [pc, #584]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 80016bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d05b      	beq.n	8001788 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d005      	beq.n	80016e2 <HAL_RCC_OscConfig+0x46>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	2b18      	cmp	r3, #24
 80016da:	d114      	bne.n	8001706 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d111      	bne.n	8001706 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	f000 bc08 	b.w	8001f00 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80016f0:	4b84      	ldr	r3, [pc, #528]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	041b      	lsls	r3, r3, #16
 80016fe:	4981      	ldr	r1, [pc, #516]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001700:	4313      	orrs	r3, r2
 8001702:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001704:	e040      	b.n	8001788 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d023      	beq.n	8001756 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800170e:	4b7d      	ldr	r3, [pc, #500]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a7c      	ldr	r2, [pc, #496]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fc07 	bl	8000f2c <HAL_GetTick>
 800171e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001722:	f7ff fc03 	bl	8000f2c <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e3e5      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001734:	4b73      	ldr	r3, [pc, #460]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001740:	4b70      	ldr	r3, [pc, #448]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	041b      	lsls	r3, r3, #16
 800174e:	496d      	ldr	r1, [pc, #436]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001750:	4313      	orrs	r3, r2
 8001752:	618b      	str	r3, [r1, #24]
 8001754:	e018      	b.n	8001788 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001756:	4b6b      	ldr	r3, [pc, #428]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a6a      	ldr	r2, [pc, #424]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 800175c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7ff fbe3 	bl	8000f2c <HAL_GetTick>
 8001766:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800176a:	f7ff fbdf 	bl	8000f2c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e3c1      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800177c:	4b61      	ldr	r3, [pc, #388]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f0      	bne.n	800176a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80a0 	beq.w	80018d6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	2b10      	cmp	r3, #16
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_OscConfig+0x10c>
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	2b18      	cmp	r3, #24
 80017a0:	d109      	bne.n	80017b6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f040 8092 	bne.w	80018d6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e3a4      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017be:	d106      	bne.n	80017ce <HAL_RCC_OscConfig+0x132>
 80017c0:	4b50      	ldr	r3, [pc, #320]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 80017c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	e058      	b.n	8001880 <HAL_RCC_OscConfig+0x1e4>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d112      	bne.n	80017fc <HAL_RCC_OscConfig+0x160>
 80017d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a4a      	ldr	r2, [pc, #296]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 80017dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b48      	ldr	r3, [pc, #288]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a47      	ldr	r2, [pc, #284]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 80017e8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b45      	ldr	r3, [pc, #276]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a44      	ldr	r2, [pc, #272]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 80017f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e041      	b.n	8001880 <HAL_RCC_OscConfig+0x1e4>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001804:	d112      	bne.n	800182c <HAL_RCC_OscConfig+0x190>
 8001806:	4b3f      	ldr	r3, [pc, #252]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a3e      	ldr	r2, [pc, #248]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b3c      	ldr	r3, [pc, #240]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a3b      	ldr	r2, [pc, #236]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001818:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b39      	ldr	r3, [pc, #228]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a38      	ldr	r2, [pc, #224]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e029      	b.n	8001880 <HAL_RCC_OscConfig+0x1e4>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001834:	d112      	bne.n	800185c <HAL_RCC_OscConfig+0x1c0>
 8001836:	4b33      	ldr	r3, [pc, #204]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a32      	ldr	r2, [pc, #200]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 800183c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4b30      	ldr	r3, [pc, #192]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a2f      	ldr	r2, [pc, #188]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001848:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b2d      	ldr	r3, [pc, #180]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a2c      	ldr	r2, [pc, #176]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e011      	b.n	8001880 <HAL_RCC_OscConfig+0x1e4>
 800185c:	4b29      	ldr	r3, [pc, #164]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a28      	ldr	r2, [pc, #160]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b26      	ldr	r3, [pc, #152]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a25      	ldr	r2, [pc, #148]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 800186e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b23      	ldr	r3, [pc, #140]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a22      	ldr	r2, [pc, #136]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 800187a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800187e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d013      	beq.n	80018b0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff fb50 	bl	8000f2c <HAL_GetTick>
 800188c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001890:	f7ff fb4c 	bl	8000f2c <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	@ 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e32e      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018a2:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x1f4>
 80018ae:	e012      	b.n	80018d6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fb3c 	bl	8000f2c <HAL_GetTick>
 80018b4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80018b8:	f7ff fb38 	bl	8000f2c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	@ 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e31a      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <HAL_RCC_OscConfig+0x268>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 809a 	beq.w	8001a18 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <HAL_RCC_OscConfig+0x25a>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	2b18      	cmp	r3, #24
 80018ee:	d149      	bne.n	8001984 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d146      	bne.n	8001984 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d104      	bne.n	8001908 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e2fe      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
 8001902:	bf00      	nop
 8001904:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d11c      	bne.n	8001948 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800190e:	4b9a      	ldr	r3, [pc, #616]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0218 	and.w	r2, r3, #24
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	429a      	cmp	r2, r3
 800191c:	d014      	beq.n	8001948 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800191e:	4b96      	ldr	r3, [pc, #600]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 0218 	bic.w	r2, r3, #24
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	4993      	ldr	r1, [pc, #588]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001930:	f000 fdd0 	bl	80024d4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001934:	4b91      	ldr	r3, [pc, #580]	@ (8001b7c <HAL_RCC_OscConfig+0x4e0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fa6d 	bl	8000e18 <HAL_InitTick>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e2db      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff faf0 	bl	8000f2c <HAL_GetTick>
 800194c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001950:	f7ff faec 	bl	8000f2c <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e2ce      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001962:	4b85      	ldr	r3, [pc, #532]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800196e:	4b82      	ldr	r3, [pc, #520]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	497e      	ldr	r1, [pc, #504]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 800197e:	4313      	orrs	r3, r2
 8001980:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001982:	e049      	b.n	8001a18 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d02c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800198c:	4b7a      	ldr	r3, [pc, #488]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f023 0218 	bic.w	r2, r3, #24
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	4977      	ldr	r1, [pc, #476]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800199e:	4b76      	ldr	r3, [pc, #472]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a75      	ldr	r2, [pc, #468]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff fabf 	bl	8000f2c <HAL_GetTick>
 80019ae:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80019b2:	f7ff fabb 	bl	8000f2c <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e29d      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80019d0:	4b69      	ldr	r3, [pc, #420]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	041b      	lsls	r3, r3, #16
 80019de:	4966      	ldr	r1, [pc, #408]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	610b      	str	r3, [r1, #16]
 80019e4:	e018      	b.n	8001a18 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e6:	4b64      	ldr	r3, [pc, #400]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a63      	ldr	r2, [pc, #396]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7ff fa9b 	bl	8000f2c <HAL_GetTick>
 80019f6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80019fa:	f7ff fa97 	bl	8000f2c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e279      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a0c:	4b5a      	ldr	r3, [pc, #360]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d03c      	beq.n	8001a9e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d01c      	beq.n	8001a66 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2c:	4b52      	ldr	r3, [pc, #328]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001a2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a32:	4a51      	ldr	r2, [pc, #324]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001a34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3c:	f7ff fa76 	bl	8000f2c <HAL_GetTick>
 8001a40:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001a44:	f7ff fa72 	bl	8000f2c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e254      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001a56:	4b48      	ldr	r3, [pc, #288]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001a58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0ef      	beq.n	8001a44 <HAL_RCC_OscConfig+0x3a8>
 8001a64:	e01b      	b.n	8001a9e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a66:	4b44      	ldr	r3, [pc, #272]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001a68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a6c:	4a42      	ldr	r2, [pc, #264]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001a6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001a72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a76:	f7ff fa59 	bl	8000f2c <HAL_GetTick>
 8001a7a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fa55 	bl	8000f2c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e237      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001a90:	4b39      	ldr	r3, [pc, #228]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1ef      	bne.n	8001a7e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 80d2 	beq.w	8001c50 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001aac:	4b34      	ldr	r3, [pc, #208]	@ (8001b80 <HAL_RCC_OscConfig+0x4e4>)
 8001aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d118      	bne.n	8001aea <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001ab8:	4b31      	ldr	r3, [pc, #196]	@ (8001b80 <HAL_RCC_OscConfig+0x4e4>)
 8001aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abc:	4a30      	ldr	r2, [pc, #192]	@ (8001b80 <HAL_RCC_OscConfig+0x4e4>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fa32 	bl	8000f2c <HAL_GetTick>
 8001ac8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001acc:	f7ff fa2e 	bl	8000f2c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e210      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001ade:	4b28      	ldr	r3, [pc, #160]	@ (8001b80 <HAL_RCC_OscConfig+0x4e4>)
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d108      	bne.n	8001b04 <HAL_RCC_OscConfig+0x468>
 8001af2:	4b21      	ldr	r3, [pc, #132]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001af8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b02:	e074      	b.n	8001bee <HAL_RCC_OscConfig+0x552>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d118      	bne.n	8001b3e <HAL_RCC_OscConfig+0x4a2>
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b12:	4a19      	ldr	r2, [pc, #100]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b1c:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001b1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b22:	4a15      	ldr	r2, [pc, #84]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001b24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b2c:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b32:	4a11      	ldr	r2, [pc, #68]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001b34:	f023 0304 	bic.w	r3, r3, #4
 8001b38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b3c:	e057      	b.n	8001bee <HAL_RCC_OscConfig+0x552>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b05      	cmp	r3, #5
 8001b44:	d11e      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4e8>
 8001b46:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001b48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b56:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b5c:	4a06      	ldr	r2, [pc, #24]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001b5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b66:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b6c:	4a02      	ldr	r2, [pc, #8]	@ (8001b78 <HAL_RCC_OscConfig+0x4dc>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b76:	e03a      	b.n	8001bee <HAL_RCC_OscConfig+0x552>
 8001b78:	44020c00 	.word	0x44020c00
 8001b7c:	20000004 	.word	0x20000004
 8001b80:	44020800 	.word	0x44020800
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b85      	cmp	r3, #133	@ 0x85
 8001b8a:	d118      	bne.n	8001bbe <HAL_RCC_OscConfig+0x522>
 8001b8c:	4ba2      	ldr	r3, [pc, #648]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b92:	4aa1      	ldr	r2, [pc, #644]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b9c:	4b9e      	ldr	r3, [pc, #632]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001b9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ba2:	4a9d      	ldr	r2, [pc, #628]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ba8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bac:	4b9a      	ldr	r3, [pc, #616]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bb2:	4a99      	ldr	r2, [pc, #612]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bbc:	e017      	b.n	8001bee <HAL_RCC_OscConfig+0x552>
 8001bbe:	4b96      	ldr	r3, [pc, #600]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bc4:	4a94      	ldr	r2, [pc, #592]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bce:	4b92      	ldr	r3, [pc, #584]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bd4:	4a90      	ldr	r2, [pc, #576]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001bd6:	f023 0304 	bic.w	r3, r3, #4
 8001bda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bde:	4b8e      	ldr	r3, [pc, #568]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001be4:	4a8c      	ldr	r2, [pc, #560]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001be6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d016      	beq.n	8001c24 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf6:	f7ff f999 	bl	8000f2c <HAL_GetTick>
 8001bfa:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f7ff f995 	bl	8000f2c <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e175      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c14:	4b80      	ldr	r3, [pc, #512]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0ed      	beq.n	8001bfe <HAL_RCC_OscConfig+0x562>
 8001c22:	e015      	b.n	8001c50 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7ff f982 	bl	8000f2c <HAL_GetTick>
 8001c28:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2c:	f7ff f97e 	bl	8000f2c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e15e      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c42:	4b75      	ldr	r3, [pc, #468]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1ed      	bne.n	8001c2c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0320 	and.w	r3, r3, #32
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d036      	beq.n	8001cca <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d019      	beq.n	8001c98 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c64:	4b6c      	ldr	r3, [pc, #432]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a6b      	ldr	r2, [pc, #428]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001c6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7ff f95c 	bl	8000f2c <HAL_GetTick>
 8001c74:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001c78:	f7ff f958 	bl	8000f2c <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e13a      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001c8a:	4b63      	ldr	r3, [pc, #396]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x5dc>
 8001c96:	e018      	b.n	8001cca <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c98:	4b5f      	ldr	r3, [pc, #380]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a5e      	ldr	r2, [pc, #376]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001c9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ca2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f942 	bl	8000f2c <HAL_GetTick>
 8001ca8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001cac:	f7ff f93e 	bl	8000f2c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e120      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001cbe:	4b56      	ldr	r3, [pc, #344]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 8115 	beq.w	8001efe <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	2b18      	cmp	r3, #24
 8001cd8:	f000 80af 	beq.w	8001e3a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	f040 8086 	bne.w	8001df2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001ce6:	4b4c      	ldr	r3, [pc, #304]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a4b      	ldr	r2, [pc, #300]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001cec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7ff f91b 	bl	8000f2c <HAL_GetTick>
 8001cf6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001cfa:	f7ff f917 	bl	8000f2c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e0f9      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d0c:	4b42      	ldr	r3, [pc, #264]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f0      	bne.n	8001cfa <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001d18:	4b3f      	ldr	r3, [pc, #252]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d20:	f023 0303 	bic.w	r3, r3, #3
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d2c:	0212      	lsls	r2, r2, #8
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	4939      	ldr	r1, [pc, #228]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	628b      	str	r3, [r1, #40]	@ 0x28
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d44:	3b01      	subs	r3, #1
 8001d46:	025b      	lsls	r3, r3, #9
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d50:	3b01      	subs	r3, #1
 8001d52:	041b      	lsls	r3, r3, #16
 8001d54:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	061b      	lsls	r3, r3, #24
 8001d62:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001d66:	492c      	ldr	r1, [pc, #176]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d70:	4a29      	ldr	r2, [pc, #164]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001d72:	f023 0310 	bic.w	r3, r3, #16
 8001d76:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7c:	4a26      	ldr	r2, [pc, #152]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001d82:	4b25      	ldr	r3, [pc, #148]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d86:	4a24      	ldr	r2, [pc, #144]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001d88:	f043 0310 	orr.w	r3, r3, #16
 8001d8c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001d8e:	4b22      	ldr	r3, [pc, #136]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d92:	f023 020c 	bic.w	r2, r3, #12
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	491f      	ldr	r1, [pc, #124]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001da0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da4:	f023 0220 	bic.w	r2, r3, #32
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dac:	491a      	ldr	r1, [pc, #104]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001db2:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db6:	4a18      	ldr	r2, [pc, #96]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dbc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001dbe:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a15      	ldr	r2, [pc, #84]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001dc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7ff f8af 	bl	8000f2c <HAL_GetTick>
 8001dce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001dd2:	f7ff f8ab 	bl	8000f2c <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e08d      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x736>
 8001df0:	e085      	b.n	8001efe <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001df2:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a08      	ldr	r2, [pc, #32]	@ (8001e18 <HAL_RCC_OscConfig+0x77c>)
 8001df8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7ff f895 	bl	8000f2c <HAL_GetTick>
 8001e02:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001e06:	f7ff f891 	bl	8000f2c <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d903      	bls.n	8001e1c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e073      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
 8001e18:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f08 <HAL_RCC_OscConfig+0x86c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1ee      	bne.n	8001e06 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001e28:	4b37      	ldr	r3, [pc, #220]	@ (8001f08 <HAL_RCC_OscConfig+0x86c>)
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2c:	4a36      	ldr	r2, [pc, #216]	@ (8001f08 <HAL_RCC_OscConfig+0x86c>)
 8001e2e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001e32:	f023 0303 	bic.w	r3, r3, #3
 8001e36:	6293      	str	r3, [r2, #40]	@ 0x28
 8001e38:	e061      	b.n	8001efe <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001e3a:	4b33      	ldr	r3, [pc, #204]	@ (8001f08 <HAL_RCC_OscConfig+0x86c>)
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e40:	4b31      	ldr	r3, [pc, #196]	@ (8001f08 <HAL_RCC_OscConfig+0x86c>)
 8001e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e44:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d031      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d12a      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d122      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e76:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d11a      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	0a5b      	lsrs	r3, r3, #9
 8001e80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e88:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d111      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e9a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d108      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	0e1b      	lsrs	r3, r3, #24
 8001ea4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e024      	b.n	8001f00 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001eb6:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <HAL_RCC_OscConfig+0x86c>)
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eba:	08db      	lsrs	r3, r3, #3
 8001ebc:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d01a      	beq.n	8001efe <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_RCC_OscConfig+0x86c>)
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	4a0e      	ldr	r2, [pc, #56]	@ (8001f08 <HAL_RCC_OscConfig+0x86c>)
 8001ece:	f023 0310 	bic.w	r3, r3, #16
 8001ed2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f82a 	bl	8000f2c <HAL_GetTick>
 8001ed8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001eda:	bf00      	nop
 8001edc:	f7ff f826 	bl	8000f2c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d0f9      	beq.n	8001edc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eec:	4a06      	ldr	r2, [pc, #24]	@ (8001f08 <HAL_RCC_OscConfig+0x86c>)
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001ef2:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <HAL_RCC_OscConfig+0x86c>)
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef6:	4a04      	ldr	r2, [pc, #16]	@ (8001f08 <HAL_RCC_OscConfig+0x86c>)
 8001ef8:	f043 0310 	orr.w	r3, r3, #16
 8001efc:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3720      	adds	r7, #32
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	44020c00 	.word	0x44020c00

08001f0c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e19e      	b.n	800225e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b83      	ldr	r3, [pc, #524]	@ (8002130 <HAL_RCC_ClockConfig+0x224>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b80      	ldr	r3, [pc, #512]	@ (8002130 <HAL_RCC_ClockConfig+0x224>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 020f 	bic.w	r2, r3, #15
 8001f36:	497e      	ldr	r1, [pc, #504]	@ (8002130 <HAL_RCC_ClockConfig+0x224>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b7c      	ldr	r3, [pc, #496]	@ (8002130 <HAL_RCC_ClockConfig+0x224>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e186      	b.n	800225e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d012      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	4b74      	ldr	r3, [pc, #464]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d909      	bls.n	8001f82 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001f6e:	4b71      	ldr	r3, [pc, #452]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	021b      	lsls	r3, r3, #8
 8001f7c:	496d      	ldr	r1, [pc, #436]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d012      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	4b68      	ldr	r3, [pc, #416]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d909      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001fa0:	4b64      	ldr	r3, [pc, #400]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	4961      	ldr	r1, [pc, #388]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d010      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	4b5b      	ldr	r3, [pc, #364]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d908      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001fd0:	4b58      	ldr	r3, [pc, #352]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4955      	ldr	r1, [pc, #340]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	4b50      	ldr	r3, [pc, #320]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d908      	bls.n	8002010 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001ffe:	4b4d      	ldr	r3, [pc, #308]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	f023 020f 	bic.w	r2, r3, #15
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	494a      	ldr	r1, [pc, #296]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 800200c:	4313      	orrs	r3, r2
 800200e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 8093 	beq.w	8002144 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b03      	cmp	r3, #3
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002026:	4b43      	ldr	r3, [pc, #268]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d121      	bne.n	8002076 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e113      	b.n	800225e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800203e:	4b3d      	ldr	r3, [pc, #244]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d115      	bne.n	8002076 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e107      	b.n	800225e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002056:	4b37      	ldr	r3, [pc, #220]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0fb      	b.n	800225e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002066:	4b33      	ldr	r3, [pc, #204]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0f3      	b.n	800225e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002076:	4b2f      	ldr	r3, [pc, #188]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	492c      	ldr	r1, [pc, #176]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 8002084:	4313      	orrs	r3, r2
 8002086:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ff50 	bl	8000f2c <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b03      	cmp	r3, #3
 8002094:	d112      	bne.n	80020bc <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002096:	e00a      	b.n	80020ae <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002098:	f7fe ff48 	bl	8000f2c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e0d7      	b.n	800225e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ae:	4b21      	ldr	r3, [pc, #132]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 0318 	and.w	r3, r3, #24
 80020b6:	2b18      	cmp	r3, #24
 80020b8:	d1ee      	bne.n	8002098 <HAL_RCC_ClockConfig+0x18c>
 80020ba:	e043      	b.n	8002144 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d112      	bne.n	80020ea <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80020c6:	f7fe ff31 	bl	8000f2c <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e0c0      	b.n	800225e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020dc:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	f003 0318 	and.w	r3, r3, #24
 80020e4:	2b10      	cmp	r3, #16
 80020e6:	d1ee      	bne.n	80020c6 <HAL_RCC_ClockConfig+0x1ba>
 80020e8:	e02c      	b.n	8002144 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d122      	bne.n	8002138 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80020f2:	e00a      	b.n	800210a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80020f4:	f7fe ff1a 	bl	8000f2c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002102:	4293      	cmp	r3, r2
 8002104:	d901      	bls.n	800210a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e0a9      	b.n	800225e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800210a:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <HAL_RCC_ClockConfig+0x228>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 0318 	and.w	r3, r3, #24
 8002112:	2b08      	cmp	r3, #8
 8002114:	d1ee      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
 8002116:	e015      	b.n	8002144 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002118:	f7fe ff08 	bl	8000f2c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d906      	bls.n	8002138 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e097      	b.n	800225e <HAL_RCC_ClockConfig+0x352>
 800212e:	bf00      	nop
 8002130:	40022000 	.word	0x40022000
 8002134:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002138:	4b4b      	ldr	r3, [pc, #300]	@ (8002268 <HAL_RCC_ClockConfig+0x35c>)
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	f003 0318 	and.w	r3, r3, #24
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1e9      	bne.n	8002118 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d010      	beq.n	8002172 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	4b44      	ldr	r3, [pc, #272]	@ (8002268 <HAL_RCC_ClockConfig+0x35c>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	429a      	cmp	r2, r3
 800215e:	d208      	bcs.n	8002172 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002160:	4b41      	ldr	r3, [pc, #260]	@ (8002268 <HAL_RCC_ClockConfig+0x35c>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f023 020f 	bic.w	r2, r3, #15
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	493e      	ldr	r1, [pc, #248]	@ (8002268 <HAL_RCC_ClockConfig+0x35c>)
 800216e:	4313      	orrs	r3, r2
 8002170:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002172:	4b3e      	ldr	r3, [pc, #248]	@ (800226c <HAL_RCC_ClockConfig+0x360>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d210      	bcs.n	80021a2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002180:	4b3a      	ldr	r3, [pc, #232]	@ (800226c <HAL_RCC_ClockConfig+0x360>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f023 020f 	bic.w	r2, r3, #15
 8002188:	4938      	ldr	r1, [pc, #224]	@ (800226c <HAL_RCC_ClockConfig+0x360>)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	4313      	orrs	r3, r2
 800218e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002190:	4b36      	ldr	r3, [pc, #216]	@ (800226c <HAL_RCC_ClockConfig+0x360>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e05d      	b.n	800225e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d010      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002268 <HAL_RCC_ClockConfig+0x35c>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d208      	bcs.n	80021d0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80021be:	4b2a      	ldr	r3, [pc, #168]	@ (8002268 <HAL_RCC_ClockConfig+0x35c>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	4927      	ldr	r1, [pc, #156]	@ (8002268 <HAL_RCC_ClockConfig+0x35c>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d012      	beq.n	8002202 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	4b21      	ldr	r3, [pc, #132]	@ (8002268 <HAL_RCC_ClockConfig+0x35c>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d209      	bcs.n	8002202 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80021ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002268 <HAL_RCC_ClockConfig+0x35c>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	491a      	ldr	r1, [pc, #104]	@ (8002268 <HAL_RCC_ClockConfig+0x35c>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	2b00      	cmp	r3, #0
 800220c:	d012      	beq.n	8002234 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <HAL_RCC_ClockConfig+0x35c>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800221c:	429a      	cmp	r2, r3
 800221e:	d209      	bcs.n	8002234 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002220:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <HAL_RCC_ClockConfig+0x35c>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	490e      	ldr	r1, [pc, #56]	@ (8002268 <HAL_RCC_ClockConfig+0x35c>)
 8002230:	4313      	orrs	r3, r2
 8002232:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002234:	f000 f822 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8002238:	4602      	mov	r2, r0
 800223a:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <HAL_RCC_ClockConfig+0x35c>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	490b      	ldr	r1, [pc, #44]	@ (8002270 <HAL_RCC_ClockConfig+0x364>)
 8002244:	5ccb      	ldrb	r3, [r1, r3]
 8002246:	fa22 f303 	lsr.w	r3, r2, r3
 800224a:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <HAL_RCC_ClockConfig+0x368>)
 800224c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <HAL_RCC_ClockConfig+0x36c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fde0 	bl	8000e18 <HAL_InitTick>
 8002258:	4603      	mov	r3, r0
 800225a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800225c:	7afb      	ldrb	r3, [r7, #11]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	44020c00 	.word	0x44020c00
 800226c:	40022000 	.word	0x40022000
 8002270:	08008500 	.word	0x08008500
 8002274:	20000000 	.word	0x20000000
 8002278:	20000004 	.word	0x20000004

0800227c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	@ 0x24
 8002280:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002282:	4b8c      	ldr	r3, [pc, #560]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f003 0318 	and.w	r3, r3, #24
 800228a:	2b08      	cmp	r3, #8
 800228c:	d102      	bne.n	8002294 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800228e:	4b8a      	ldr	r3, [pc, #552]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	e107      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002294:	4b87      	ldr	r3, [pc, #540]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	f003 0318 	and.w	r3, r3, #24
 800229c:	2b00      	cmp	r3, #0
 800229e:	d112      	bne.n	80022c6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80022a0:	4b84      	ldr	r3, [pc, #528]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d009      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80022ac:	4b81      	ldr	r3, [pc, #516]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	08db      	lsrs	r3, r3, #3
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	4a81      	ldr	r2, [pc, #516]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x240>)
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	e0f1      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80022c0:	4b7e      	ldr	r3, [pc, #504]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x240>)
 80022c2:	61fb      	str	r3, [r7, #28]
 80022c4:	e0ee      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022c6:	4b7b      	ldr	r3, [pc, #492]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f003 0318 	and.w	r3, r3, #24
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d102      	bne.n	80022d8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022d2:	4b7b      	ldr	r3, [pc, #492]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x244>)
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	e0e5      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022d8:	4b76      	ldr	r3, [pc, #472]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f003 0318 	and.w	r3, r3, #24
 80022e0:	2b18      	cmp	r3, #24
 80022e2:	f040 80dd 	bne.w	80024a0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80022e6:	4b73      	ldr	r3, [pc, #460]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80022e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80022f0:	4b70      	ldr	r3, [pc, #448]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80022fc:	4b6d      	ldr	r3, [pc, #436]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80022fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002308:	4b6a      	ldr	r3, [pc, #424]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x238>)
 800230a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800230c:	08db      	lsrs	r3, r3, #3
 800230e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	ee07 3a90 	vmov	s15, r3
 800231c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002320:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80b7 	beq.w	800249a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d003      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0xbe>
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d056      	beq.n	80023e6 <HAL_RCC_GetSysClockFreq+0x16a>
 8002338:	e077      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800233a:	4b5e      	ldr	r3, [pc, #376]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x238>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b00      	cmp	r3, #0
 8002344:	d02d      	beq.n	80023a2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002346:	4b5b      	ldr	r3, [pc, #364]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	08db      	lsrs	r3, r3, #3
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	4a5a      	ldr	r2, [pc, #360]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x240>)
 8002352:	fa22 f303 	lsr.w	r3, r2, r3
 8002356:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	ee07 3a90 	vmov	s15, r3
 8002368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800236c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002370:	4b50      	ldr	r3, [pc, #320]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002378:	ee07 3a90 	vmov	s15, r3
 800237c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002380:	ed97 6a02 	vldr	s12, [r7, #8]
 8002384:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80024c4 <HAL_RCC_GetSysClockFreq+0x248>
 8002388:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800238c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002390:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002394:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80023a0:	e065      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	ee07 3a90 	vmov	s15, r3
 80023a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ac:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80024c8 <HAL_RCC_GetSysClockFreq+0x24c>
 80023b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023b4:	4b3f      	ldr	r3, [pc, #252]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80023b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023bc:	ee07 3a90 	vmov	s15, r3
 80023c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80023c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80023c8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80024c4 <HAL_RCC_GetSysClockFreq+0x248>
 80023cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80023d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80023e4:	e043      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	ee07 3a90 	vmov	s15, r3
 80023ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80024cc <HAL_RCC_GetSysClockFreq+0x250>
 80023f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023f8:	4b2e      	ldr	r3, [pc, #184]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80023fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002408:	ed97 6a02 	vldr	s12, [r7, #8]
 800240c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80024c4 <HAL_RCC_GetSysClockFreq+0x248>
 8002410:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002414:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002418:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800241c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002424:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002428:	e021      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	ee07 3a90 	vmov	s15, r3
 8002430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002434:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80024d0 <HAL_RCC_GetSysClockFreq+0x254>
 8002438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800243c:	4b1d      	ldr	r3, [pc, #116]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x238>)
 800243e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800244c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002450:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80024c4 <HAL_RCC_GetSysClockFreq+0x248>
 8002454:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002458:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800245c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002460:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002468:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800246c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800246e:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002472:	0a5b      	lsrs	r3, r3, #9
 8002474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002478:	3301      	adds	r3, #1
 800247a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002486:	edd7 6a06 	vldr	s13, [r7, #24]
 800248a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800248e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002492:	ee17 3a90 	vmov	r3, s15
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	e004      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	e001      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80024a0:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x240>)
 80024a2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80024a4:	69fb      	ldr	r3, [r7, #28]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3724      	adds	r7, #36	@ 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	44020c00 	.word	0x44020c00
 80024b8:	003d0900 	.word	0x003d0900
 80024bc:	03d09000 	.word	0x03d09000
 80024c0:	017d7840 	.word	0x017d7840
 80024c4:	46000000 	.word	0x46000000
 80024c8:	4c742400 	.word	0x4c742400
 80024cc:	4bbebc20 	.word	0x4bbebc20
 80024d0:	4a742400 	.word	0x4a742400

080024d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80024d8:	f7ff fed0 	bl	800227c <HAL_RCC_GetSysClockFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <HAL_RCC_GetHCLKFreq+0x2c>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80024e2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80024e6:	4907      	ldr	r1, [pc, #28]	@ (8002504 <HAL_RCC_GetHCLKFreq+0x30>)
 80024e8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80024ea:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80024ee:	fa22 f303 	lsr.w	r3, r2, r3
 80024f2:	4a05      	ldr	r2, [pc, #20]	@ (8002508 <HAL_RCC_GetHCLKFreq+0x34>)
 80024f4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80024f6:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <HAL_RCC_GetHCLKFreq+0x34>)
 80024f8:	681b      	ldr	r3, [r3, #0]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	44020c00 	.word	0x44020c00
 8002504:	08008500 	.word	0x08008500
 8002508:	20000000 	.word	0x20000000

0800250c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002510:	f7ff ffe0 	bl	80024d4 <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4904      	ldr	r1, [pc, #16]	@ (8002534 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	44020c00 	.word	0x44020c00
 8002534:	08008510 	.word	0x08008510

08002538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800253c:	f7ff ffca 	bl	80024d4 <HAL_RCC_GetHCLKFreq>
 8002540:	4602      	mov	r2, r0
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	0a1b      	lsrs	r3, r3, #8
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	4904      	ldr	r1, [pc, #16]	@ (8002560 <HAL_RCC_GetPCLK2Freq+0x28>)
 800254e:	5ccb      	ldrb	r3, [r1, r3]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	44020c00 	.word	0x44020c00
 8002560:	08008510 	.word	0x08008510

08002564 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002568:	f7ff ffb4 	bl	80024d4 <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	0b1b      	lsrs	r3, r3, #12
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4904      	ldr	r1, [pc, #16]	@ (800258c <HAL_RCC_GetPCLK3Freq+0x28>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	44020c00 	.word	0x44020c00
 800258c:	08008510 	.word	0x08008510

08002590 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002594:	b0ba      	sub	sp, #232	@ 0xe8
 8002596:	af00      	add	r7, sp, #0
 8002598:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800259c:	2300      	movs	r3, #0
 800259e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025a2:	2300      	movs	r3, #0
 80025a4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80025a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80025b4:	2500      	movs	r5, #0
 80025b6:	ea54 0305 	orrs.w	r3, r4, r5
 80025ba:	d00b      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80025bc:	4bcd      	ldr	r3, [pc, #820]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80025be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025c2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80025c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025cc:	4ac9      	ldr	r2, [pc, #804]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80025ce:	430b      	orrs	r3, r1
 80025d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025dc:	f002 0801 	and.w	r8, r2, #1
 80025e0:	f04f 0900 	mov.w	r9, #0
 80025e4:	ea58 0309 	orrs.w	r3, r8, r9
 80025e8:	d042      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80025ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d823      	bhi.n	800263c <HAL_RCCEx_PeriphCLKConfig+0xac>
 80025f4:	a201      	add	r2, pc, #4	@ (adr r2, 80025fc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80025f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fa:	bf00      	nop
 80025fc:	08002645 	.word	0x08002645
 8002600:	08002615 	.word	0x08002615
 8002604:	08002629 	.word	0x08002629
 8002608:	08002645 	.word	0x08002645
 800260c:	08002645 	.word	0x08002645
 8002610:	08002645 	.word	0x08002645
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002614:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002618:	3308      	adds	r3, #8
 800261a:	4618      	mov	r0, r3
 800261c:	f003 f90c 	bl	8005838 <RCCEx_PLL2_Config>
 8002620:	4603      	mov	r3, r0
 8002622:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002626:	e00e      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002628:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800262c:	3330      	adds	r3, #48	@ 0x30
 800262e:	4618      	mov	r0, r3
 8002630:	f003 f99a 	bl	8005968 <RCCEx_PLL3_Config>
 8002634:	4603      	mov	r3, r0
 8002636:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800263a:	e004      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002642:	e000      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002646:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10c      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800264e:	4ba9      	ldr	r3, [pc, #676]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002650:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002654:	f023 0107 	bic.w	r1, r3, #7
 8002658:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800265c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265e:	4aa5      	ldr	r2, [pc, #660]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002660:	430b      	orrs	r3, r1
 8002662:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002666:	e003      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002668:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800266c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002670:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002678:	f002 0a02 	and.w	sl, r2, #2
 800267c:	f04f 0b00 	mov.w	fp, #0
 8002680:	ea5a 030b 	orrs.w	r3, sl, fp
 8002684:	f000 8088 	beq.w	8002798 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002688:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800268c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800268e:	2b28      	cmp	r3, #40	@ 0x28
 8002690:	d868      	bhi.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002692:	a201      	add	r2, pc, #4	@ (adr r2, 8002698 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002698:	0800276d 	.word	0x0800276d
 800269c:	08002765 	.word	0x08002765
 80026a0:	08002765 	.word	0x08002765
 80026a4:	08002765 	.word	0x08002765
 80026a8:	08002765 	.word	0x08002765
 80026ac:	08002765 	.word	0x08002765
 80026b0:	08002765 	.word	0x08002765
 80026b4:	08002765 	.word	0x08002765
 80026b8:	0800273d 	.word	0x0800273d
 80026bc:	08002765 	.word	0x08002765
 80026c0:	08002765 	.word	0x08002765
 80026c4:	08002765 	.word	0x08002765
 80026c8:	08002765 	.word	0x08002765
 80026cc:	08002765 	.word	0x08002765
 80026d0:	08002765 	.word	0x08002765
 80026d4:	08002765 	.word	0x08002765
 80026d8:	08002751 	.word	0x08002751
 80026dc:	08002765 	.word	0x08002765
 80026e0:	08002765 	.word	0x08002765
 80026e4:	08002765 	.word	0x08002765
 80026e8:	08002765 	.word	0x08002765
 80026ec:	08002765 	.word	0x08002765
 80026f0:	08002765 	.word	0x08002765
 80026f4:	08002765 	.word	0x08002765
 80026f8:	0800276d 	.word	0x0800276d
 80026fc:	08002765 	.word	0x08002765
 8002700:	08002765 	.word	0x08002765
 8002704:	08002765 	.word	0x08002765
 8002708:	08002765 	.word	0x08002765
 800270c:	08002765 	.word	0x08002765
 8002710:	08002765 	.word	0x08002765
 8002714:	08002765 	.word	0x08002765
 8002718:	0800276d 	.word	0x0800276d
 800271c:	08002765 	.word	0x08002765
 8002720:	08002765 	.word	0x08002765
 8002724:	08002765 	.word	0x08002765
 8002728:	08002765 	.word	0x08002765
 800272c:	08002765 	.word	0x08002765
 8002730:	08002765 	.word	0x08002765
 8002734:	08002765 	.word	0x08002765
 8002738:	0800276d 	.word	0x0800276d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800273c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002740:	3308      	adds	r3, #8
 8002742:	4618      	mov	r0, r3
 8002744:	f003 f878 	bl	8005838 <RCCEx_PLL2_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 800274e:	e00e      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002750:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002754:	3330      	adds	r3, #48	@ 0x30
 8002756:	4618      	mov	r0, r3
 8002758:	f003 f906 	bl	8005968 <RCCEx_PLL3_Config>
 800275c:	4603      	mov	r3, r0
 800275e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002762:	e004      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800276a:	e000      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800276c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800276e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10c      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002776:	4b5f      	ldr	r3, [pc, #380]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002778:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800277c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002780:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002786:	4a5b      	ldr	r2, [pc, #364]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002788:	430b      	orrs	r3, r1
 800278a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800278e:	e003      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002790:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002794:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002798:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f002 0304 	and.w	r3, r2, #4
 80027a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80027ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80027b2:	460b      	mov	r3, r1
 80027b4:	4313      	orrs	r3, r2
 80027b6:	d04e      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80027b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027be:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80027c2:	d02c      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80027c4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80027c8:	d825      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80027ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027ce:	d028      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80027d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027d4:	d81f      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80027d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80027d8:	d025      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80027da:	2bc0      	cmp	r3, #192	@ 0xc0
 80027dc:	d81b      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80027de:	2b80      	cmp	r3, #128	@ 0x80
 80027e0:	d00f      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80027e2:	2b80      	cmp	r3, #128	@ 0x80
 80027e4:	d817      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d01f      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80027ea:	2b40      	cmp	r3, #64	@ 0x40
 80027ec:	d113      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80027ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027f2:	3308      	adds	r3, #8
 80027f4:	4618      	mov	r0, r3
 80027f6:	f003 f81f 	bl	8005838 <RCCEx_PLL2_Config>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002800:	e014      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002806:	3330      	adds	r3, #48	@ 0x30
 8002808:	4618      	mov	r0, r3
 800280a:	f003 f8ad 	bl	8005968 <RCCEx_PLL3_Config>
 800280e:	4603      	mov	r3, r0
 8002810:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002814:	e00a      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800281c:	e006      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800281e:	bf00      	nop
 8002820:	e004      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002822:	bf00      	nop
 8002824:	e002      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002826:	bf00      	nop
 8002828:	e000      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800282a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800282c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10c      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002834:	4b2f      	ldr	r3, [pc, #188]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002836:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800283a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800283e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002844:	4a2b      	ldr	r2, [pc, #172]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002846:	430b      	orrs	r3, r1
 8002848:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800284c:	e003      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800284e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002852:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	f002 0308 	and.w	r3, r2, #8
 8002862:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002866:	2300      	movs	r3, #0
 8002868:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800286c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002870:	460b      	mov	r3, r1
 8002872:	4313      	orrs	r3, r2
 8002874:	d056      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8002876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800287a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800287c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002880:	d031      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002882:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002886:	d82a      	bhi.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800288c:	d02d      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800288e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002892:	d824      	bhi.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002894:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002898:	d029      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800289a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800289e:	d81e      	bhi.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80028a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028a4:	d011      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80028a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028aa:	d818      	bhi.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d023      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80028b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028b4:	d113      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80028b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028ba:	3308      	adds	r3, #8
 80028bc:	4618      	mov	r0, r3
 80028be:	f002 ffbb 	bl	8005838 <RCCEx_PLL2_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80028c8:	e017      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80028ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028ce:	3330      	adds	r3, #48	@ 0x30
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 f849 	bl	8005968 <RCCEx_PLL3_Config>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80028dc:	e00d      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80028e4:	e009      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80028e6:	bf00      	nop
 80028e8:	e007      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80028ea:	bf00      	nop
 80028ec:	e005      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80028ee:	bf00      	nop
 80028f0:	e003      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80028f2:	bf00      	nop
 80028f4:	44020c00 	.word	0x44020c00
        break;
 80028f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10c      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002902:	4bb9      	ldr	r3, [pc, #740]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002904:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002908:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800290c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002910:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002912:	4ab5      	ldr	r2, [pc, #724]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002914:	430b      	orrs	r3, r1
 8002916:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800291a:	e003      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800291c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002920:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002924:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f002 0310 	and.w	r3, r2, #16
 8002930:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002934:	2300      	movs	r3, #0
 8002936:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800293a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800293e:	460b      	mov	r3, r1
 8002940:	4313      	orrs	r3, r2
 8002942:	d053      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8002944:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800294a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800294e:	d031      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002950:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002954:	d82a      	bhi.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002956:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800295a:	d02d      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800295c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002960:	d824      	bhi.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002962:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002966:	d029      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002968:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800296c:	d81e      	bhi.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800296e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002972:	d011      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002974:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002978:	d818      	bhi.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800297a:	2b00      	cmp	r3, #0
 800297c:	d020      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800297e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002982:	d113      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002984:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002988:	3308      	adds	r3, #8
 800298a:	4618      	mov	r0, r3
 800298c:	f002 ff54 	bl	8005838 <RCCEx_PLL2_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8002996:	e014      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002998:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800299c:	3330      	adds	r3, #48	@ 0x30
 800299e:	4618      	mov	r0, r3
 80029a0:	f002 ffe2 	bl	8005968 <RCCEx_PLL3_Config>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80029aa:	e00a      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80029b2:	e006      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80029b4:	bf00      	nop
 80029b6:	e004      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80029b8:	bf00      	nop
 80029ba:	e002      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80029bc:	bf00      	nop
 80029be:	e000      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80029c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80029ca:	4b87      	ldr	r3, [pc, #540]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80029cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80029d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80029d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029da:	4a83      	ldr	r2, [pc, #524]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80029dc:	430b      	orrs	r3, r1
 80029de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80029e2:	e003      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80029e8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80029ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	f002 0320 	and.w	r3, r2, #32
 80029f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029fc:	2300      	movs	r3, #0
 80029fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a02:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	d053      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002a0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a12:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8002a16:	d031      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002a18:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8002a1c:	d82a      	bhi.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002a1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a22:	d02d      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002a24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a28:	d824      	bhi.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002a2a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8002a2e:	d029      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002a30:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8002a34:	d81e      	bhi.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a3a:	d011      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a40:	d818      	bhi.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d020      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8002a46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a4a:	d113      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a50:	3308      	adds	r3, #8
 8002a52:	4618      	mov	r0, r3
 8002a54:	f002 fef0 	bl	8005838 <RCCEx_PLL2_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8002a5e:	e014      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a64:	3330      	adds	r3, #48	@ 0x30
 8002a66:	4618      	mov	r0, r3
 8002a68:	f002 ff7e 	bl	8005968 <RCCEx_PLL3_Config>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8002a72:	e00a      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002a7a:	e006      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002a7c:	bf00      	nop
 8002a7e:	e004      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002a80:	bf00      	nop
 8002a82:	e002      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002a84:	bf00      	nop
 8002a86:	e000      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10c      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002a92:	4b55      	ldr	r3, [pc, #340]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002a98:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8002a9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa2:	4a51      	ldr	r2, [pc, #324]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002aaa:	e003      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002ab0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ab4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002aca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	d053      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002ad4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ada:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002ade:	d031      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002ae0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002ae4:	d82a      	bhi.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002ae6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002aea:	d02d      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002aec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002af0:	d824      	bhi.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002af2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002af6:	d029      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002af8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002afc:	d81e      	bhi.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002afe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b02:	d011      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002b04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b08:	d818      	bhi.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d020      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002b0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b12:	d113      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b18:	3308      	adds	r3, #8
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f002 fe8c 	bl	8005838 <RCCEx_PLL2_Config>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002b26:	e014      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b2c:	3330      	adds	r3, #48	@ 0x30
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f002 ff1a 	bl	8005968 <RCCEx_PLL3_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002b42:	e006      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002b44:	bf00      	nop
 8002b46:	e004      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002b48:	bf00      	nop
 8002b4a:	e002      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002b4c:	bf00      	nop
 8002b4e:	e000      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b52:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002b5a:	4b23      	ldr	r3, [pc, #140]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b60:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002b64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b72:	e003      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b74:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002b78:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002b88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002b92:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	d03d      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8002b9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ba0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ba2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ba6:	d01b      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8002ba8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002bac:	d814      	bhi.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8002bae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002bb2:	d017      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8002bb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002bb8:	d80e      	bhi.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d016      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002bbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc2:	d109      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002bc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bc8:	3330      	adds	r3, #48	@ 0x30
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f002 fecc 	bl	8005968 <RCCEx_PLL3_Config>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002bd6:	e00a      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002bde:	e006      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8002be0:	bf00      	nop
 8002be2:	e004      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8002be4:	bf00      	nop
 8002be6:	e002      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8002be8:	44020c00 	.word	0x44020c00
        break;
 8002bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002bf6:	4b99      	ldr	r3, [pc, #612]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002bf8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002bfc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002c00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c06:	4a95      	ldr	r2, [pc, #596]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002c0e:	e003      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c10:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002c14:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002c24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c2e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002c32:	460b      	mov	r3, r1
 8002c34:	4313      	orrs	r3, r2
 8002c36:	d03b      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8002c38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c3e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c42:	d01b      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8002c44:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c48:	d814      	bhi.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8002c4a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c4e:	d017      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8002c50:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c54:	d80e      	bhi.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d014      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8002c5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c5e:	d109      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c64:	3330      	adds	r3, #48	@ 0x30
 8002c66:	4618      	mov	r0, r3
 8002c68:	f002 fe7e 	bl	8005968 <RCCEx_PLL3_Config>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8002c72:	e008      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002c7a:	e004      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8002c7c:	bf00      	nop
 8002c7e:	e002      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8002c80:	bf00      	nop
 8002c82:	e000      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8002c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c86:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002c8e:	4b73      	ldr	r3, [pc, #460]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002c90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002c94:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8002c98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c9e:	4a6f      	ldr	r2, [pc, #444]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002ca6:	e003      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002cac:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002cbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002cc6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	d03d      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8002cd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002cdc:	d01b      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x786>
 8002cde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ce2:	d814      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002ce4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ce8:	d017      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8002cea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cee:	d80e      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d014      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8002cf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cf8:	d109      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002cfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cfe:	3330      	adds	r3, #48	@ 0x30
 8002d00:	4618      	mov	r0, r3
 8002d02:	f002 fe31 	bl	8005968 <RCCEx_PLL3_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8002d0c:	e008      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002d14:	e004      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8002d16:	bf00      	nop
 8002d18:	e002      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8002d1a:	bf00      	nop
 8002d1c:	e000      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8002d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d20:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10d      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002d28:	4b4c      	ldr	r3, [pc, #304]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002d2e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d3a:	4a48      	ldr	r2, [pc, #288]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002d42:	e003      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d44:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002d48:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002d4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8002d58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002d62:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002d66:	460b      	mov	r3, r1
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	d035      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8002d6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d78:	d015      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8002d7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d7e:	d80e      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d012      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002d84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d88:	d109      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d8e:	3330      	adds	r3, #48	@ 0x30
 8002d90:	4618      	mov	r0, r3
 8002d92:	f002 fde9 	bl	8005968 <RCCEx_PLL3_Config>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8002d9c:	e006      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002da4:	e002      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8002da6:	bf00      	nop
 8002da8:	e000      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8002daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10d      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8002db4:	4b29      	ldr	r3, [pc, #164]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002db6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002dba:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8002dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dc6:	4a25      	ldr	r2, [pc, #148]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002dce:	e003      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002dd4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8002dd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de0:	2100      	movs	r1, #0
 8002de2:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8002de6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002dee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002df2:	460b      	mov	r3, r1
 8002df4:	4313      	orrs	r3, r2
 8002df6:	d037      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8002df8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e04:	d015      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8002e06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e0a:	d80e      	bhi.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d012      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8002e10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e14:	d109      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e1a:	3330      	adds	r3, #48	@ 0x30
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f002 fda3 	bl	8005968 <RCCEx_PLL3_Config>
 8002e22:	4603      	mov	r3, r0
 8002e24:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8002e28:	e006      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002e30:	e002      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8002e32:	bf00      	nop
 8002e34:	e000      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8002e36:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002e38:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10f      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8002e40:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e46:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e52:	4a02      	ldr	r2, [pc, #8]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e54:	430b      	orrs	r3, r1
 8002e56:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002e5a:	e005      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8002e5c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e60:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e64:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002e68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e70:	2100      	movs	r1, #0
 8002e72:	67b9      	str	r1, [r7, #120]	@ 0x78
 8002e74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e7a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4313      	orrs	r3, r2
 8002e82:	d00e      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8002e84:	4bb8      	ldr	r3, [pc, #736]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	4ab7      	ldr	r2, [pc, #732]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002e8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002e8e:	61d3      	str	r3, [r2, #28]
 8002e90:	4bb5      	ldr	r3, [pc, #724]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002e92:	69d9      	ldr	r1, [r3, #28]
 8002e94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e98:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002e9c:	4ab2      	ldr	r2, [pc, #712]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8002eae:	673b      	str	r3, [r7, #112]	@ 0x70
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	677b      	str	r3, [r7, #116]	@ 0x74
 8002eb4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	d055      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8002ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ec6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002eca:	d031      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8002ecc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002ed0:	d82a      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8002ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed6:	d02d      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8002ed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002edc:	d824      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8002ede:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ee2:	d029      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8002ee4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ee8:	d81e      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8002eea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eee:	d011      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ef4:	d818      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d020      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8002efa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002efe:	d113      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f04:	3308      	adds	r3, #8
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 fc96 	bl	8005838 <RCCEx_PLL2_Config>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002f12:	e014      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f18:	3330      	adds	r3, #48	@ 0x30
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f002 fd24 	bl	8005968 <RCCEx_PLL3_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002f26:	e00a      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002f2e:	e006      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8002f30:	bf00      	nop
 8002f32:	e004      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8002f34:	bf00      	nop
 8002f36:	e002      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8002f38:	bf00      	nop
 8002f3a:	e000      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8002f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10d      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002f46:	4b88      	ldr	r3, [pc, #544]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002f48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002f4c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002f50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f58:	4a83      	ldr	r2, [pc, #524]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002f5a:	430b      	orrs	r3, r1
 8002f5c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8002f60:	e003      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f62:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f66:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f72:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8002f76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f78:	2300      	movs	r3, #0
 8002f7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f7c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8002f80:	460b      	mov	r3, r1
 8002f82:	4313      	orrs	r3, r2
 8002f84:	d055      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8002f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f8e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002f92:	d031      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8002f94:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002f98:	d82a      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8002f9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f9e:	d02d      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8002fa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fa4:	d824      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8002fa6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002faa:	d029      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002fac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002fb0:	d81e      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8002fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fb6:	d011      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8002fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fbc:	d818      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d020      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fc6:	d113      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fcc:	3308      	adds	r3, #8
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f002 fc32 	bl	8005838 <RCCEx_PLL2_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8002fda:	e014      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002fdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fe0:	3330      	adds	r3, #48	@ 0x30
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f002 fcc0 	bl	8005968 <RCCEx_PLL3_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8002fee:	e00a      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002ff6:	e006      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8002ff8:	bf00      	nop
 8002ffa:	e004      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8002ffc:	bf00      	nop
 8002ffe:	e002      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8003000:	bf00      	nop
 8003002:	e000      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8003004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003006:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10d      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800300e:	4b56      	ldr	r3, [pc, #344]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003010:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003014:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003018:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003020:	4a51      	ldr	r2, [pc, #324]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003022:	430b      	orrs	r3, r1
 8003024:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003028:	e003      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800302a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800302e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800303e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003040:	2300      	movs	r3, #0
 8003042:	667b      	str	r3, [r7, #100]	@ 0x64
 8003044:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003048:	460b      	mov	r3, r1
 800304a:	4313      	orrs	r3, r2
 800304c:	d032      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800304e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003052:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003056:	2b05      	cmp	r3, #5
 8003058:	d80f      	bhi.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800305a:	2b03      	cmp	r3, #3
 800305c:	d211      	bcs.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800305e:	2b01      	cmp	r3, #1
 8003060:	d911      	bls.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8003062:	2b02      	cmp	r3, #2
 8003064:	d109      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800306a:	3308      	adds	r3, #8
 800306c:	4618      	mov	r0, r3
 800306e:	f002 fbe3 	bl	8005838 <RCCEx_PLL2_Config>
 8003072:	4603      	mov	r3, r0
 8003074:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003078:	e006      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003080:	e002      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8003082:	bf00      	nop
 8003084:	e000      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8003086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003088:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10d      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003090:	4b35      	ldr	r3, [pc, #212]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003092:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003096:	f023 0107 	bic.w	r1, r3, #7
 800309a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800309e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80030a2:	4a31      	ldr	r2, [pc, #196]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80030a4:	430b      	orrs	r3, r1
 80030a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030aa:	e003      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80030b0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80030b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	2100      	movs	r1, #0
 80030be:	65b9      	str	r1, [r7, #88]	@ 0x58
 80030c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80030ca:	460b      	mov	r3, r1
 80030cc:	4313      	orrs	r3, r2
 80030ce:	d024      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80030d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d005      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80030e6:	e002      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80030e8:	bf00      	nop
 80030ea:	e000      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80030ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10d      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80030f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80030f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030fc:	f023 0108 	bic.w	r1, r3, #8
 8003100:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003104:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003108:	4a17      	ldr	r2, [pc, #92]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800310a:	430b      	orrs	r3, r1
 800310c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003110:	e003      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003112:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003116:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800311a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800311e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003122:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003126:	653b      	str	r3, [r7, #80]	@ 0x50
 8003128:	2300      	movs	r3, #0
 800312a:	657b      	str	r3, [r7, #84]	@ 0x54
 800312c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003130:	460b      	mov	r3, r1
 8003132:	4313      	orrs	r3, r2
 8003134:	f000 80b9 	beq.w	80032aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003138:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	4a0b      	ldr	r2, [pc, #44]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003144:	f7fd fef2 	bl	8000f2c <HAL_GetTick>
 8003148:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800314c:	e010      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314e:	f7fd feed 	bl	8000f2c <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d908      	bls.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003164:	e00a      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8003166:	bf00      	nop
 8003168:	44020c00 	.word	0x44020c00
 800316c:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003170:	4bba      	ldr	r3, [pc, #744]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0e8      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 800317c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003180:	2b00      	cmp	r3, #0
 8003182:	f040 808e 	bne.w	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003186:	4bb6      	ldr	r3, [pc, #728]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800318c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003190:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d023      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800319c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031a0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80031a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d01b      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031ac:	4bac      	ldr	r3, [pc, #688]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80031ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031ba:	4ba9      	ldr	r3, [pc, #676]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80031bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031c0:	4aa7      	ldr	r2, [pc, #668]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80031c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031ca:	4ba5      	ldr	r3, [pc, #660]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80031cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031d0:	4aa3      	ldr	r2, [pc, #652]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80031d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031da:	4aa1      	ldr	r2, [pc, #644]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80031dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d019      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fd fe9c 	bl	8000f2c <HAL_GetTick>
 80031f4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f8:	e00d      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fd fe97 	bl	8000f2c <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003204:	1ad2      	subs	r2, r2, r3
 8003206:	f241 3388 	movw	r3, #5000	@ 0x1388
 800320a:	429a      	cmp	r2, r3
 800320c:	d903      	bls.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8003214:	e006      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003216:	4b92      	ldr	r3, [pc, #584]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0ea      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8003224:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d135      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800322c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003230:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003234:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003238:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800323c:	d110      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 800323e:	4b88      	ldr	r3, [pc, #544]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800324a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003254:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003258:	4a81      	ldr	r2, [pc, #516]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800325a:	430b      	orrs	r3, r1
 800325c:	61d3      	str	r3, [r2, #28]
 800325e:	e005      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8003260:	4b7f      	ldr	r3, [pc, #508]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	4a7e      	ldr	r2, [pc, #504]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003266:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800326a:	61d3      	str	r3, [r2, #28]
 800326c:	4b7c      	ldr	r3, [pc, #496]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800326e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003272:	4a7b      	ldr	r2, [pc, #492]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003278:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800327c:	4b78      	ldr	r3, [pc, #480]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800327e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003286:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800328a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328e:	4a74      	ldr	r2, [pc, #464]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003290:	430b      	orrs	r3, r1
 8003292:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003296:	e008      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003298:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800329c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80032a0:	e003      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80032a6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80032aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80032b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032b8:	2300      	movs	r3, #0
 80032ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80032c0:	460b      	mov	r3, r1
 80032c2:	4313      	orrs	r3, r2
 80032c4:	d035      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80032c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032ce:	2b30      	cmp	r3, #48	@ 0x30
 80032d0:	d014      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 80032d2:	2b30      	cmp	r3, #48	@ 0x30
 80032d4:	d80e      	bhi.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d012      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d80a      	bhi.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d010      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d106      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e6:	4b5e      	ldr	r3, [pc, #376]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80032e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ea:	4a5d      	ldr	r2, [pc, #372]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80032ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032f0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80032f2:	e008      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80032fa:	e004      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80032fc:	bf00      	nop
 80032fe:	e002      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8003300:	bf00      	nop
 8003302:	e000      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8003304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003306:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10d      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800330e:	4b54      	ldr	r3, [pc, #336]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003310:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003314:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003318:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800331c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003320:	4a4f      	ldr	r2, [pc, #316]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003322:	430b      	orrs	r3, r1
 8003324:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003328:	e003      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800332a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800332e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800333e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003340:	2300      	movs	r3, #0
 8003342:	647b      	str	r3, [r7, #68]	@ 0x44
 8003344:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003348:	460b      	mov	r3, r1
 800334a:	4313      	orrs	r3, r2
 800334c:	d033      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800334e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003352:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 800335a:	2b40      	cmp	r3, #64	@ 0x40
 800335c:	d007      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800335e:	e010      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003360:	4b3f      	ldr	r3, [pc, #252]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003364:	4a3e      	ldr	r2, [pc, #248]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800336a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800336c:	e00d      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800336e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003372:	3308      	adds	r3, #8
 8003374:	4618      	mov	r0, r3
 8003376:	f002 fa5f 	bl	8005838 <RCCEx_PLL2_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003380:	e003      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800338a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10d      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8003392:	4b33      	ldr	r3, [pc, #204]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003394:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003398:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800339c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80033a6:	430b      	orrs	r3, r1
 80033a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80033ac:	e003      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80033b2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80033b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033be:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80033c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033c4:	2300      	movs	r3, #0
 80033c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033c8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80033cc:	460b      	mov	r3, r1
 80033ce:	4313      	orrs	r3, r2
 80033d0:	d04c      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80033d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d827      	bhi.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80033de:	a201      	add	r2, pc, #4	@ (adr r2, 80033e4 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	080033f9 	.word	0x080033f9
 80033e8:	08003407 	.word	0x08003407
 80033ec:	0800341b 	.word	0x0800341b
 80033f0:	08003437 	.word	0x08003437
 80033f4:	08003437 	.word	0x08003437
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f8:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80033fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fc:	4a18      	ldr	r2, [pc, #96]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80033fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003402:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003404:	e018      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800340a:	3308      	adds	r3, #8
 800340c:	4618      	mov	r0, r3
 800340e:	f002 fa13 	bl	8005838 <RCCEx_PLL2_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003418:	e00e      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800341a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800341e:	3330      	adds	r3, #48	@ 0x30
 8003420:	4618      	mov	r0, r3
 8003422:	f002 faa1 	bl	8005968 <RCCEx_PLL3_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800342c:	e004      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003434:	e000      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8003436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003438:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d111      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003440:	4b07      	ldr	r3, [pc, #28]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003446:	f023 0107 	bic.w	r1, r3, #7
 800344a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800344e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003452:	4a03      	ldr	r2, [pc, #12]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003454:	430b      	orrs	r3, r1
 8003456:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800345a:	e007      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xedc>
 800345c:	44020800 	.word	0x44020800
 8003460:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003464:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003468:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800346c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003478:	633b      	str	r3, [r7, #48]	@ 0x30
 800347a:	2300      	movs	r3, #0
 800347c:	637b      	str	r3, [r7, #52]	@ 0x34
 800347e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003482:	460b      	mov	r3, r1
 8003484:	4313      	orrs	r3, r2
 8003486:	f000 8081 	beq.w	800358c <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800348a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800348e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003492:	2b20      	cmp	r3, #32
 8003494:	d85f      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8003496:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	08003521 	.word	0x08003521
 80034a0:	08003557 	.word	0x08003557
 80034a4:	08003557 	.word	0x08003557
 80034a8:	08003557 	.word	0x08003557
 80034ac:	08003557 	.word	0x08003557
 80034b0:	08003557 	.word	0x08003557
 80034b4:	08003557 	.word	0x08003557
 80034b8:	08003557 	.word	0x08003557
 80034bc:	0800352f 	.word	0x0800352f
 80034c0:	08003557 	.word	0x08003557
 80034c4:	08003557 	.word	0x08003557
 80034c8:	08003557 	.word	0x08003557
 80034cc:	08003557 	.word	0x08003557
 80034d0:	08003557 	.word	0x08003557
 80034d4:	08003557 	.word	0x08003557
 80034d8:	08003557 	.word	0x08003557
 80034dc:	08003543 	.word	0x08003543
 80034e0:	08003557 	.word	0x08003557
 80034e4:	08003557 	.word	0x08003557
 80034e8:	08003557 	.word	0x08003557
 80034ec:	08003557 	.word	0x08003557
 80034f0:	08003557 	.word	0x08003557
 80034f4:	08003557 	.word	0x08003557
 80034f8:	08003557 	.word	0x08003557
 80034fc:	0800355f 	.word	0x0800355f
 8003500:	08003557 	.word	0x08003557
 8003504:	08003557 	.word	0x08003557
 8003508:	08003557 	.word	0x08003557
 800350c:	08003557 	.word	0x08003557
 8003510:	08003557 	.word	0x08003557
 8003514:	08003557 	.word	0x08003557
 8003518:	08003557 	.word	0x08003557
 800351c:	0800355f 	.word	0x0800355f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003520:	4bb9      	ldr	r3, [pc, #740]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003524:	4ab8      	ldr	r2, [pc, #736]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800352a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800352c:	e018      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800352e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003532:	3308      	adds	r3, #8
 8003534:	4618      	mov	r0, r3
 8003536:	f002 f97f 	bl	8005838 <RCCEx_PLL2_Config>
 800353a:	4603      	mov	r3, r0
 800353c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003540:	e00e      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003546:	3330      	adds	r3, #48	@ 0x30
 8003548:	4618      	mov	r0, r3
 800354a:	f002 fa0d 	bl	8005968 <RCCEx_PLL3_Config>
 800354e:	4603      	mov	r3, r0
 8003550:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003554:	e004      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800355c:	e000      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 800355e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003560:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10d      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003568:	4ba7      	ldr	r3, [pc, #668]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800356a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800356e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003576:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800357a:	4aa3      	ldr	r2, [pc, #652]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800357c:	430b      	orrs	r3, r1
 800357e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003582:	e003      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003584:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003588:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800358c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003598:	62bb      	str	r3, [r7, #40]	@ 0x28
 800359a:	2300      	movs	r3, #0
 800359c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800359e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80035a2:	460b      	mov	r3, r1
 80035a4:	4313      	orrs	r3, r2
 80035a6:	d04e      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80035a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035b4:	d02e      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80035b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035ba:	d827      	bhi.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80035bc:	2bc0      	cmp	r3, #192	@ 0xc0
 80035be:	d02b      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 80035c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80035c2:	d823      	bhi.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80035c4:	2b80      	cmp	r3, #128	@ 0x80
 80035c6:	d017      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 80035c8:	2b80      	cmp	r3, #128	@ 0x80
 80035ca:	d81f      	bhi.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80035d0:	2b40      	cmp	r3, #64	@ 0x40
 80035d2:	d007      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 80035d4:	e01a      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d6:	4b8c      	ldr	r3, [pc, #560]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	4a8b      	ldr	r2, [pc, #556]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80035dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035e0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80035e2:	e01a      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035e8:	3308      	adds	r3, #8
 80035ea:	4618      	mov	r0, r3
 80035ec:	f002 f924 	bl	8005838 <RCCEx_PLL2_Config>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80035f6:	e010      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035fc:	3330      	adds	r3, #48	@ 0x30
 80035fe:	4618      	mov	r0, r3
 8003600:	f002 f9b2 	bl	8005968 <RCCEx_PLL3_Config>
 8003604:	4603      	mov	r3, r0
 8003606:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800360a:	e006      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003612:	e002      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8003614:	bf00      	nop
 8003616:	e000      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8003618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800361a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10d      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003622:	4b79      	ldr	r3, [pc, #484]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003628:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800362c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003630:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003634:	4974      	ldr	r1, [pc, #464]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800363c:	e003      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003642:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8003646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003652:	623b      	str	r3, [r7, #32]
 8003654:	2300      	movs	r3, #0
 8003656:	627b      	str	r3, [r7, #36]	@ 0x24
 8003658:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800365c:	460b      	mov	r3, r1
 800365e:	4313      	orrs	r3, r2
 8003660:	d055      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8003662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003666:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800366a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800366e:	d031      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8003670:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003674:	d82a      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003676:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800367a:	d02d      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 800367c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003680:	d824      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003682:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003686:	d029      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8003688:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800368c:	d81e      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800368e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003692:	d011      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8003694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003698:	d818      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d020      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 800369e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036a2:	d113      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036a8:	3308      	adds	r3, #8
 80036aa:	4618      	mov	r0, r3
 80036ac:	f002 f8c4 	bl	8005838 <RCCEx_PLL2_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80036b6:	e014      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036bc:	3330      	adds	r3, #48	@ 0x30
 80036be:	4618      	mov	r0, r3
 80036c0:	f002 f952 	bl	8005968 <RCCEx_PLL3_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80036ca:	e00a      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80036d2:	e006      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80036d4:	bf00      	nop
 80036d6:	e004      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80036d8:	bf00      	nop
 80036da:	e002      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80036dc:	bf00      	nop
 80036de:	e000      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80036e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10d      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80036ea:	4b47      	ldr	r3, [pc, #284]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80036ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036f0:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 80036f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80036fc:	4942      	ldr	r1, [pc, #264]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003704:	e003      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003706:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800370a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800370e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003716:	2100      	movs	r1, #0
 8003718:	61b9      	str	r1, [r7, #24]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	61fb      	str	r3, [r7, #28]
 8003720:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003724:	460b      	mov	r3, r1
 8003726:	4313      	orrs	r3, r2
 8003728:	d03c      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800372a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800372e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003732:	2b03      	cmp	r3, #3
 8003734:	d81b      	bhi.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8003736:	a201      	add	r2, pc, #4	@ (adr r2, 800373c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8003738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373c:	08003777 	.word	0x08003777
 8003740:	0800374d 	.word	0x0800374d
 8003744:	0800375b 	.word	0x0800375b
 8003748:	08003777 	.word	0x08003777
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800374c:	4b2e      	ldr	r3, [pc, #184]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800374e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003750:	4a2d      	ldr	r2, [pc, #180]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003756:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003758:	e00e      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800375a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800375e:	3308      	adds	r3, #8
 8003760:	4618      	mov	r0, r3
 8003762:	f002 f869 	bl	8005838 <RCCEx_PLL2_Config>
 8003766:	4603      	mov	r3, r0
 8003768:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800376c:	e004      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003774:	e000      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8003776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003778:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10d      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003780:	4b21      	ldr	r3, [pc, #132]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003782:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003786:	f023 0203 	bic.w	r2, r3, #3
 800378a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800378e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003792:	491d      	ldr	r1, [pc, #116]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800379a:	e003      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80037a0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	2100      	movs	r1, #0
 80037ae:	6139      	str	r1, [r7, #16]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80037ba:	460b      	mov	r3, r1
 80037bc:	4313      	orrs	r3, r2
 80037be:	d03c      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80037c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037cc:	d00e      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80037ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037d2:	d815      	bhi.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d019      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x127c>
 80037d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037dc:	d110      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037de:	4b0a      	ldr	r3, [pc, #40]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80037e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e2:	4a09      	ldr	r2, [pc, #36]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80037e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037e8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80037ea:	e010      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037f0:	3308      	adds	r3, #8
 80037f2:	4618      	mov	r0, r3
 80037f4:	f002 f820 	bl	8005838 <RCCEx_PLL2_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80037fe:	e006      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003806:	e002      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8003808:	44020c00 	.word	0x44020c00
        break;
 800380c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800380e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10d      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003816:	4b3d      	ldr	r3, [pc, #244]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800381c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003820:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003828:	4938      	ldr	r1, [pc, #224]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003830:	e003      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003832:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003836:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800383a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003842:	2100      	movs	r1, #0
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003850:	460b      	mov	r3, r1
 8003852:	4313      	orrs	r3, r2
 8003854:	d038      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800385a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800385e:	2b30      	cmp	r3, #48	@ 0x30
 8003860:	d01b      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8003862:	2b30      	cmp	r3, #48	@ 0x30
 8003864:	d815      	bhi.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8003866:	2b10      	cmp	r3, #16
 8003868:	d002      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800386a:	2b20      	cmp	r3, #32
 800386c:	d007      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 800386e:	e010      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003870:	4b26      	ldr	r3, [pc, #152]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	4a25      	ldr	r2, [pc, #148]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800387a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800387c:	e00e      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800387e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003882:	3330      	adds	r3, #48	@ 0x30
 8003884:	4618      	mov	r0, r3
 8003886:	f002 f86f 	bl	8005968 <RCCEx_PLL3_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003890:	e004      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003898:	e000      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 800389a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800389c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10d      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80038a4:	4b19      	ldr	r3, [pc, #100]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80038a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80038aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80038b6:	4915      	ldr	r1, [pc, #84]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80038be:	e003      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80038c4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	2100      	movs	r1, #0
 80038d2:	6039      	str	r1, [r7, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80038de:	460b      	mov	r3, r1
 80038e0:	4313      	orrs	r3, r2
 80038e2:	d00c      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80038e4:	4b09      	ldr	r3, [pc, #36]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80038e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80038f6:	4905      	ldr	r1, [pc, #20]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80038fe:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8003902:	4618      	mov	r0, r3
 8003904:	37e8      	adds	r7, #232	@ 0xe8
 8003906:	46bd      	mov	sp, r7
 8003908:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800390c:	44020c00 	.word	0x44020c00

08003910 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003910:	b480      	push	{r7}
 8003912:	b08b      	sub	sp, #44	@ 0x2c
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003918:	4bae      	ldr	r3, [pc, #696]	@ (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800391a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003920:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003922:	4bac      	ldr	r3, [pc, #688]	@ (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800392c:	4ba9      	ldr	r3, [pc, #676]	@ (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800392e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003936:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003938:	4ba6      	ldr	r3, [pc, #664]	@ (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800393a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003944:	4ba3      	ldr	r3, [pc, #652]	@ (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003948:	08db      	lsrs	r3, r3, #3
 800394a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	fb02 f303 	mul.w	r3, r2, r3
 8003954:	ee07 3a90 	vmov	s15, r3
 8003958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800395c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8126 	beq.w	8003bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d053      	beq.n	8003a16 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d86f      	bhi.n	8003a54 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d003      	beq.n	8003982 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d02b      	beq.n	80039d8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003980:	e068      	b.n	8003a54 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003982:	4b94      	ldr	r3, [pc, #592]	@ (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	08db      	lsrs	r3, r3, #3
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	4a92      	ldr	r2, [pc, #584]	@ (8003bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800398e:	fa22 f303 	lsr.w	r3, r2, r3
 8003992:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	ee07 3a90 	vmov	s15, r3
 80039a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80039ba:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003bdc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80039be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80039d6:	e068      	b.n	8003aaa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003be0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80039e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	ee07 3a90 	vmov	s15, r3
 80039f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039f4:	ed97 6a04 	vldr	s12, [r7, #16]
 80039f8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003bdc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80039fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a10:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003a14:	e049      	b.n	8003aaa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	ee07 3a90 	vmov	s15, r3
 8003a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a20:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8003a24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a32:	ed97 6a04 	vldr	s12, [r7, #16]
 8003a36:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003bdc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a4e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003a52:	e02a      	b.n	8003aaa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003a54:	4b5f      	ldr	r3, [pc, #380]	@ (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	08db      	lsrs	r3, r3, #3
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	4a5e      	ldr	r2, [pc, #376]	@ (8003bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
 8003a64:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	ee07 3a90 	vmov	s15, r3
 8003a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	ee07 3a90 	vmov	s15, r3
 8003a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a88:	ed97 6a04 	vldr	s12, [r7, #16]
 8003a8c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003bdc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003a90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003aa8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ab6:	d121      	bne.n	8003afc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003ab8:	4b46      	ldr	r3, [pc, #280]	@ (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d017      	beq.n	8003af4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003ac4:	4b43      	ldr	r3, [pc, #268]	@ (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac8:	0a5b      	lsrs	r3, r3, #9
 8003aca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003ad6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ada:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003ade:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aea:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	e006      	b.n	8003b02 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	e002      	b.n	8003b02 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003b02:	4b34      	ldr	r3, [pc, #208]	@ (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b0e:	d121      	bne.n	8003b54 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003b10:	4b30      	ldr	r3, [pc, #192]	@ (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d017      	beq.n	8003b4c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003b2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b32:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003b36:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b42:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	e006      	b.n	8003b5a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	e002      	b.n	8003b5a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b66:	d121      	bne.n	8003bac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003b68:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d017      	beq.n	8003ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b74:	4b17      	ldr	r3, [pc, #92]	@ (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b78:	0e1b      	lsrs	r3, r3, #24
 8003b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8003b86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003b8e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b9a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003ba2:	e010      	b.n	8003bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	609a      	str	r2, [r3, #8]
}
 8003baa:	e00c      	b.n	8003bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	609a      	str	r2, [r3, #8]
}
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	609a      	str	r2, [r3, #8]
}
 8003bc6:	bf00      	nop
 8003bc8:	372c      	adds	r7, #44	@ 0x2c
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	44020c00 	.word	0x44020c00
 8003bd8:	03d09000 	.word	0x03d09000
 8003bdc:	46000000 	.word	0x46000000
 8003be0:	4a742400 	.word	0x4a742400
 8003be4:	4bbebc20 	.word	0x4bbebc20

08003be8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b08b      	sub	sp, #44	@ 0x2c
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003bf0:	4bae      	ldr	r3, [pc, #696]	@ (8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003bfa:	4bac      	ldr	r3, [pc, #688]	@ (8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8003c04:	4ba9      	ldr	r3, [pc, #676]	@ (8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c0e:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003c10:	4ba6      	ldr	r3, [pc, #664]	@ (8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003c1c:	4ba3      	ldr	r3, [pc, #652]	@ (8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c20:	08db      	lsrs	r3, r3, #3
 8003c22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	fb02 f303 	mul.w	r3, r2, r3
 8003c2c:	ee07 3a90 	vmov	s15, r3
 8003c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c34:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 8126 	beq.w	8003e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d053      	beq.n	8003cee <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d86f      	bhi.n	8003d2c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d003      	beq.n	8003c5a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d02b      	beq.n	8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003c58:	e068      	b.n	8003d2c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c5a:	4b94      	ldr	r3, [pc, #592]	@ (8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	08db      	lsrs	r3, r3, #3
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	4a92      	ldr	r2, [pc, #584]	@ (8003eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003c66:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	ee07 3a90 	vmov	s15, r3
 8003c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	ee07 3a90 	vmov	s15, r3
 8003c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c8e:	ed97 6a04 	vldr	s12, [r7, #16]
 8003c92:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003caa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003cae:	e068      	b.n	8003d82 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cba:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8003cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	ee07 3a90 	vmov	s15, r3
 8003cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ccc:	ed97 6a04 	vldr	s12, [r7, #16]
 8003cd0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003cd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003cec:	e049      	b.n	8003d82 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	ee07 3a90 	vmov	s15, r3
 8003cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8003cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	ee07 3a90 	vmov	s15, r3
 8003d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d0a:	ed97 6a04 	vldr	s12, [r7, #16]
 8003d0e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d26:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003d2a:	e02a      	b.n	8003d82 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d2c:	4b5f      	ldr	r3, [pc, #380]	@ (8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	08db      	lsrs	r3, r3, #3
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	4a5e      	ldr	r2, [pc, #376]	@ (8003eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	ee07 3a90 	vmov	s15, r3
 8003d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	ee07 3a90 	vmov	s15, r3
 8003d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d60:	ed97 6a04 	vldr	s12, [r7, #16]
 8003d64:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003d68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003d80:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003d82:	4b4a      	ldr	r3, [pc, #296]	@ (8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d8e:	d121      	bne.n	8003dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003d90:	4b46      	ldr	r3, [pc, #280]	@ (8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d017      	beq.n	8003dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003d9c:	4b43      	ldr	r3, [pc, #268]	@ (8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da0:	0a5b      	lsrs	r3, r3, #9
 8003da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8003dae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003db2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003db6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dc2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	e006      	b.n	8003dda <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e002      	b.n	8003dda <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003dda:	4b34      	ldr	r3, [pc, #208]	@ (8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003de2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003de6:	d121      	bne.n	8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003de8:	4b30      	ldr	r3, [pc, #192]	@ (8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d017      	beq.n	8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003df4:	4b2d      	ldr	r3, [pc, #180]	@ (8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df8:	0c1b      	lsrs	r3, r3, #16
 8003dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003e06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e0a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003e0e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e1a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	605a      	str	r2, [r3, #4]
 8003e22:	e006      	b.n	8003e32 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	e002      	b.n	8003e32 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003e32:	4b1e      	ldr	r3, [pc, #120]	@ (8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e3e:	d121      	bne.n	8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003e40:	4b1a      	ldr	r3, [pc, #104]	@ (8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d017      	beq.n	8003e7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e4c:	4b17      	ldr	r3, [pc, #92]	@ (8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e50:	0e1b      	lsrs	r3, r3, #24
 8003e52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8003e5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e62:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003e66:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e72:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e7a:	e010      	b.n	8003e9e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	609a      	str	r2, [r3, #8]
}
 8003e82:	e00c      	b.n	8003e9e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	609a      	str	r2, [r3, #8]
}
 8003e8a:	e008      	b.n	8003e9e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	609a      	str	r2, [r3, #8]
}
 8003e9e:	bf00      	nop
 8003ea0:	372c      	adds	r7, #44	@ 0x2c
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	44020c00 	.word	0x44020c00
 8003eb0:	03d09000 	.word	0x03d09000
 8003eb4:	46000000 	.word	0x46000000
 8003eb8:	4a742400 	.word	0x4a742400
 8003ebc:	4bbebc20 	.word	0x4bbebc20

08003ec0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b08b      	sub	sp, #44	@ 0x2c
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003ec8:	4bae      	ldr	r3, [pc, #696]	@ (8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed0:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003ed2:	4bac      	ldr	r3, [pc, #688]	@ (8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8003edc:	4ba9      	ldr	r3, [pc, #676]	@ (8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee0:	0a1b      	lsrs	r3, r3, #8
 8003ee2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ee6:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003ee8:	4ba6      	ldr	r3, [pc, #664]	@ (8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eec:	091b      	lsrs	r3, r3, #4
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003ef4:	4ba3      	ldr	r3, [pc, #652]	@ (8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef8:	08db      	lsrs	r3, r3, #3
 8003efa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	fb02 f303 	mul.w	r3, r2, r3
 8003f04:	ee07 3a90 	vmov	s15, r3
 8003f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 8126 	beq.w	8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d053      	beq.n	8003fc6 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d86f      	bhi.n	8004004 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d003      	beq.n	8003f32 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d02b      	beq.n	8003f88 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8003f30:	e068      	b.n	8004004 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f32:	4b94      	ldr	r3, [pc, #592]	@ (8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	08db      	lsrs	r3, r3, #3
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	4a92      	ldr	r2, [pc, #584]	@ (8004188 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8003f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f42:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	ee07 3a90 	vmov	s15, r3
 8003f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f66:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f6a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800418c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8003f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f82:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003f86:	e068      	b.n	800405a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f92:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8003f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	ee07 3a90 	vmov	s15, r3
 8003fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa4:	ed97 6a04 	vldr	s12, [r7, #16]
 8003fa8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800418c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8003fac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003fc4:	e049      	b.n	800405a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	ee07 3a90 	vmov	s15, r3
 8003fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004194 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8003fd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fe2:	ed97 6a04 	vldr	s12, [r7, #16]
 8003fe6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800418c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8003fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004002:	e02a      	b.n	800405a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004004:	4b5f      	ldr	r3, [pc, #380]	@ (8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	08db      	lsrs	r3, r3, #3
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	4a5e      	ldr	r2, [pc, #376]	@ (8004188 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
 8004014:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	ee07 3a90 	vmov	s15, r3
 800401c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	ee07 3a90 	vmov	s15, r3
 8004034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004038:	ed97 6a04 	vldr	s12, [r7, #16]
 800403c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800418c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8004040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004048:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800404c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004054:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004058:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800405a:	4b4a      	ldr	r3, [pc, #296]	@ (8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004062:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004066:	d121      	bne.n	80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004068:	4b46      	ldr	r3, [pc, #280]	@ (8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800406a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d017      	beq.n	80040a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004074:	4b43      	ldr	r3, [pc, #268]	@ (8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004078:	0a5b      	lsrs	r3, r3, #9
 800407a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8004086:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800408a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800408e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800409a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e006      	b.n	80040b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	e002      	b.n	80040b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80040b2:	4b34      	ldr	r3, [pc, #208]	@ (8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040be:	d121      	bne.n	8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80040c0:	4b30      	ldr	r3, [pc, #192]	@ (8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80040c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d017      	beq.n	80040fc <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80040cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80040ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80040de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040e2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80040e6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80040ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	e006      	b.n	800410a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	e002      	b.n	800410a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800410a:	4b1e      	ldr	r3, [pc, #120]	@ (8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004112:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004116:	d121      	bne.n	800415c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004118:	4b1a      	ldr	r3, [pc, #104]	@ (8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800411a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d017      	beq.n	8004154 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004124:	4b17      	ldr	r3, [pc, #92]	@ (8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004128:	0e1b      	lsrs	r3, r3, #24
 800412a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800412e:	ee07 3a90 	vmov	s15, r3
 8004132:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8004136:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800413a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800413e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800414a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004152:	e010      	b.n	8004176 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	609a      	str	r2, [r3, #8]
}
 800415a:	e00c      	b.n	8004176 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	609a      	str	r2, [r3, #8]
}
 8004162:	e008      	b.n	8004176 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	609a      	str	r2, [r3, #8]
}
 8004176:	bf00      	nop
 8004178:	372c      	adds	r7, #44	@ 0x2c
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	44020c00 	.word	0x44020c00
 8004188:	03d09000 	.word	0x03d09000
 800418c:	46000000 	.word	0x46000000
 8004190:	4a742400 	.word	0x4a742400
 8004194:	4bbebc20 	.word	0x4bbebc20

08004198 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004198:	b590      	push	{r4, r7, lr}
 800419a:	b08f      	sub	sp, #60	@ 0x3c
 800419c:	af00      	add	r7, sp, #0
 800419e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80041a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041a6:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80041aa:	4321      	orrs	r1, r4
 80041ac:	d150      	bne.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80041ae:	4b26      	ldr	r3, [pc, #152]	@ (8004248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041b8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80041ba:	4b23      	ldr	r3, [pc, #140]	@ (8004248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d108      	bne.n	80041da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80041c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ce:	d104      	bne.n	80041da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80041d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80041d6:	f001 bb20 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80041da:	4b1b      	ldr	r3, [pc, #108]	@ (8004248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041e8:	d108      	bne.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80041ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041f0:	d104      	bne.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80041f2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80041f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041f8:	f001 bb0f 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80041fc:	4b12      	ldr	r3, [pc, #72]	@ (8004248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004204:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004208:	d119      	bne.n	800423e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800420a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004210:	d115      	bne.n	800423e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004212:	4b0d      	ldr	r3, [pc, #52]	@ (8004248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800421a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800421e:	d30a      	bcc.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004220:	4b09      	ldr	r3, [pc, #36]	@ (8004248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	0a1b      	lsrs	r3, r3, #8
 8004226:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800422a:	4a08      	ldr	r2, [pc, #32]	@ (800424c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004230:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004232:	f001 baf2 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800423a:	f001 baee 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	637b      	str	r3, [r7, #52]	@ 0x34
 8004242:	f001 baea 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004246:	bf00      	nop
 8004248:	44020c00 	.word	0x44020c00
 800424c:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8004250:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004254:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8004258:	ea50 0104 	orrs.w	r1, r0, r4
 800425c:	f000 8615 	beq.w	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8004260:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004264:	2801      	cmp	r0, #1
 8004266:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 800426a:	f081 82d3 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800426e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004272:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8004276:	ea50 0104 	orrs.w	r1, r0, r4
 800427a:	f000 84d8 	beq.w	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800427e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004282:	2801      	cmp	r0, #1
 8004284:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8004288:	f081 82c4 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800428c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004290:	f1a1 0410 	sub.w	r4, r1, #16
 8004294:	ea50 0104 	orrs.w	r1, r0, r4
 8004298:	f001 8288 	beq.w	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 800429c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042a0:	2801      	cmp	r0, #1
 80042a2:	f171 0110 	sbcs.w	r1, r1, #16
 80042a6:	f081 82b5 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80042aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042ae:	f1a1 0408 	sub.w	r4, r1, #8
 80042b2:	ea50 0104 	orrs.w	r1, r0, r4
 80042b6:	f001 81fe 	beq.w	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80042ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042be:	2801      	cmp	r0, #1
 80042c0:	f171 0108 	sbcs.w	r1, r1, #8
 80042c4:	f081 82a6 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80042c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042cc:	1f0c      	subs	r4, r1, #4
 80042ce:	ea50 0104 	orrs.w	r1, r0, r4
 80042d2:	f000 8753 	beq.w	800517c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 80042d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042da:	2801      	cmp	r0, #1
 80042dc:	f171 0104 	sbcs.w	r1, r1, #4
 80042e0:	f081 8298 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80042e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042e8:	1e8c      	subs	r4, r1, #2
 80042ea:	ea50 0104 	orrs.w	r1, r0, r4
 80042ee:	f001 8173 	beq.w	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 80042f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042f6:	2801      	cmp	r0, #1
 80042f8:	f171 0102 	sbcs.w	r1, r1, #2
 80042fc:	f081 828a 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004300:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004304:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8004308:	4321      	orrs	r1, r4
 800430a:	f001 80fe 	beq.w	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800430e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004312:	4ccb      	ldr	r4, [pc, #812]	@ (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004314:	42a0      	cmp	r0, r4
 8004316:	f171 0100 	sbcs.w	r1, r1, #0
 800431a:	f081 827b 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800431e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004322:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8004326:	4321      	orrs	r1, r4
 8004328:	f001 8076 	beq.w	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 800432c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004330:	4cc4      	ldr	r4, [pc, #784]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8004332:	42a0      	cmp	r0, r4
 8004334:	f171 0100 	sbcs.w	r1, r1, #0
 8004338:	f081 826c 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800433c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004340:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8004344:	4321      	orrs	r1, r4
 8004346:	f000 87b5 	beq.w	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 800434a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800434e:	4cbe      	ldr	r4, [pc, #760]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8004350:	42a0      	cmp	r0, r4
 8004352:	f171 0100 	sbcs.w	r1, r1, #0
 8004356:	f081 825d 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800435a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800435e:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8004362:	4321      	orrs	r1, r4
 8004364:	f000 8738 	beq.w	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8004368:	e9d7 0100 	ldrd	r0, r1, [r7]
 800436c:	4cb7      	ldr	r4, [pc, #732]	@ (800464c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 800436e:	42a0      	cmp	r0, r4
 8004370:	f171 0100 	sbcs.w	r1, r1, #0
 8004374:	f081 824e 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004378:	e9d7 0100 	ldrd	r0, r1, [r7]
 800437c:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8004380:	4321      	orrs	r1, r4
 8004382:	f001 81cd 	beq.w	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8004386:	e9d7 0100 	ldrd	r0, r1, [r7]
 800438a:	4cb1      	ldr	r4, [pc, #708]	@ (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 800438c:	42a0      	cmp	r0, r4
 800438e:	f171 0100 	sbcs.w	r1, r1, #0
 8004392:	f081 823f 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004396:	e9d7 0100 	ldrd	r0, r1, [r7]
 800439a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800439e:	4321      	orrs	r1, r4
 80043a0:	f000 80d9 	beq.w	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80043a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043a8:	4caa      	ldr	r4, [pc, #680]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 80043aa:	42a0      	cmp	r0, r4
 80043ac:	f171 0100 	sbcs.w	r1, r1, #0
 80043b0:	f081 8230 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80043b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043b8:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80043bc:	4321      	orrs	r1, r4
 80043be:	f000 83da 	beq.w	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80043c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043c6:	4ca4      	ldr	r4, [pc, #656]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 80043c8:	42a0      	cmp	r0, r4
 80043ca:	f171 0100 	sbcs.w	r1, r1, #0
 80043ce:	f081 8221 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80043d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043d6:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80043da:	4321      	orrs	r1, r4
 80043dc:	f000 8627 	beq.w	800502e <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 80043e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043e4:	4c9d      	ldr	r4, [pc, #628]	@ (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 80043e6:	42a0      	cmp	r0, r4
 80043e8:	f171 0100 	sbcs.w	r1, r1, #0
 80043ec:	f081 8212 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80043f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043f4:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80043f8:	4321      	orrs	r1, r4
 80043fa:	f000 857a 	beq.w	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80043fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004402:	4c97      	ldr	r4, [pc, #604]	@ (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8004404:	42a0      	cmp	r0, r4
 8004406:	f171 0100 	sbcs.w	r1, r1, #0
 800440a:	f081 8203 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800440e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004412:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8004416:	4321      	orrs	r1, r4
 8004418:	f000 84fb 	beq.w	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800441c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004420:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8004424:	f171 0100 	sbcs.w	r1, r1, #0
 8004428:	f081 81f4 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800442c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004430:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8004434:	4321      	orrs	r1, r4
 8004436:	f000 84a9 	beq.w	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800443a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800443e:	f248 0401 	movw	r4, #32769	@ 0x8001
 8004442:	42a0      	cmp	r0, r4
 8004444:	f171 0100 	sbcs.w	r1, r1, #0
 8004448:	f081 81e4 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800444c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004450:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8004454:	4321      	orrs	r1, r4
 8004456:	f000 8456 	beq.w	8004d06 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 800445a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800445e:	f244 0401 	movw	r4, #16385	@ 0x4001
 8004462:	42a0      	cmp	r0, r4
 8004464:	f171 0100 	sbcs.w	r1, r1, #0
 8004468:	f081 81d4 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800446c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004470:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8004474:	4321      	orrs	r1, r4
 8004476:	f000 8403 	beq.w	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800447a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800447e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8004482:	42a0      	cmp	r0, r4
 8004484:	f171 0100 	sbcs.w	r1, r1, #0
 8004488:	f081 81c4 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800448c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004490:	2821      	cmp	r0, #33	@ 0x21
 8004492:	f171 0100 	sbcs.w	r1, r1, #0
 8004496:	d255      	bcs.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8004498:	e9d7 0100 	ldrd	r0, r1, [r7]
 800449c:	4301      	orrs	r1, r0
 800449e:	f001 81b9 	beq.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80044a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044a6:	1e42      	subs	r2, r0, #1
 80044a8:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 80044ac:	2a20      	cmp	r2, #32
 80044ae:	f173 0100 	sbcs.w	r1, r3, #0
 80044b2:	f081 81af 	bcs.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80044b6:	2a1f      	cmp	r2, #31
 80044b8:	f201 81ac 	bhi.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80044bc:	a101      	add	r1, pc, #4	@ (adr r1, 80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80044be:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	0800459b 	.word	0x0800459b
 80044c8:	08004699 	.word	0x08004699
 80044cc:	08005815 	.word	0x08005815
 80044d0:	08004759 	.word	0x08004759
 80044d4:	08005815 	.word	0x08005815
 80044d8:	08005815 	.word	0x08005815
 80044dc:	08005815 	.word	0x08005815
 80044e0:	08004829 	.word	0x08004829
 80044e4:	08005815 	.word	0x08005815
 80044e8:	08005815 	.word	0x08005815
 80044ec:	08005815 	.word	0x08005815
 80044f0:	08005815 	.word	0x08005815
 80044f4:	08005815 	.word	0x08005815
 80044f8:	08005815 	.word	0x08005815
 80044fc:	08005815 	.word	0x08005815
 8004500:	0800490d 	.word	0x0800490d
 8004504:	08005815 	.word	0x08005815
 8004508:	08005815 	.word	0x08005815
 800450c:	08005815 	.word	0x08005815
 8004510:	08005815 	.word	0x08005815
 8004514:	08005815 	.word	0x08005815
 8004518:	08005815 	.word	0x08005815
 800451c:	08005815 	.word	0x08005815
 8004520:	08005815 	.word	0x08005815
 8004524:	08005815 	.word	0x08005815
 8004528:	08005815 	.word	0x08005815
 800452c:	08005815 	.word	0x08005815
 8004530:	08005815 	.word	0x08005815
 8004534:	08005815 	.word	0x08005815
 8004538:	08005815 	.word	0x08005815
 800453c:	08005815 	.word	0x08005815
 8004540:	080049e3 	.word	0x080049e3
 8004544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004548:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800454c:	430b      	orrs	r3, r1
 800454e:	f000 82b3 	beq.w	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8004552:	f001 b95f 	b.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8004556:	4b43      	ldr	r3, [pc, #268]	@ (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004558:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800455c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004560:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8004562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004564:	2b00      	cmp	r3, #0
 8004566:	d108      	bne.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004568:	f107 0320 	add.w	r3, r7, #32
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff f9cf 	bl	8003910 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004576:	f001 b950 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800457a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457c:	2b40      	cmp	r3, #64	@ 0x40
 800457e:	d108      	bne.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004580:	f107 0314 	add.w	r3, r7, #20
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff fb2f 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800458e:	f001 b944 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004596:	f001 b940 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800459a:	4b32      	ldr	r3, [pc, #200]	@ (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800459c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80045a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80045ac:	f7fd ffc4 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 80045b0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80045b2:	f001 b932 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80045b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045c2:	d10a      	bne.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80045c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d107      	bne.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045ca:	f107 0314 	add.w	r3, r7, #20
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff fb0a 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80045d8:	e05c      	b.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80045da:	4b22      	ldr	r3, [pc, #136]	@ (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045e6:	d10a      	bne.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80045e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d107      	bne.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045ee:	f107 0308 	add.w	r3, r7, #8
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fc64 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80045fc:	e04a      	b.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80045fe:	4b19      	ldr	r3, [pc, #100]	@ (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b02      	cmp	r3, #2
 8004608:	d10c      	bne.n	8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 800460a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460c:	2b03      	cmp	r3, #3
 800460e:	d109      	bne.n	8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004610:	4b14      	ldr	r3, [pc, #80]	@ (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	08db      	lsrs	r3, r3, #3
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	4a13      	ldr	r2, [pc, #76]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
 8004620:	637b      	str	r3, [r7, #52]	@ 0x34
 8004622:	e037      	b.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8004624:	4b0f      	ldr	r3, [pc, #60]	@ (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800462c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004630:	d11e      	bne.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8004632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004634:	2b04      	cmp	r3, #4
 8004636:	d11b      	bne.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8004638:	4b0c      	ldr	r3, [pc, #48]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 800463a:	637b      	str	r3, [r7, #52]	@ 0x34
 800463c:	e02a      	b.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 800463e:	bf00      	nop
 8004640:	40000001 	.word	0x40000001
 8004644:	20000001 	.word	0x20000001
 8004648:	10000001 	.word	0x10000001
 800464c:	08000001 	.word	0x08000001
 8004650:	04000001 	.word	0x04000001
 8004654:	00400001 	.word	0x00400001
 8004658:	00200001 	.word	0x00200001
 800465c:	00040001 	.word	0x00040001
 8004660:	00020001 	.word	0x00020001
 8004664:	44020c00 	.word	0x44020c00
 8004668:	03d09000 	.word	0x03d09000
 800466c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004670:	4ba3      	ldr	r3, [pc, #652]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b02      	cmp	r3, #2
 800467c:	d106      	bne.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	2b05      	cmp	r3, #5
 8004682:	d103      	bne.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8004684:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004688:	637b      	str	r3, [r7, #52]	@ 0x34
 800468a:	e003      	b.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004690:	f001 b8c3 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004694:	f001 b8c1 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004698:	4b99      	ldr	r3, [pc, #612]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800469a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800469e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046a2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80046a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d104      	bne.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80046aa:	f7fd ff2f 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 80046ae:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80046b0:	f001 b8b3 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80046b4:	4b92      	ldr	r3, [pc, #584]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046c0:	d10a      	bne.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 80046c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d107      	bne.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046c8:	f107 0314 	add.w	r3, r7, #20
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fa8b 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80046d6:	e03d      	b.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80046d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046da:	2b10      	cmp	r3, #16
 80046dc:	d108      	bne.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046de:	f107 0308 	add.w	r3, r7, #8
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fbec 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046ec:	f001 b895 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80046f0:	4b83      	ldr	r3, [pc, #524]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d10c      	bne.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80046fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fe:	2b18      	cmp	r3, #24
 8004700:	d109      	bne.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004702:	4b7f      	ldr	r3, [pc, #508]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	08db      	lsrs	r3, r3, #3
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	4a7d      	ldr	r2, [pc, #500]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800470e:	fa22 f303 	lsr.w	r3, r2, r3
 8004712:	637b      	str	r3, [r7, #52]	@ 0x34
 8004714:	e01e      	b.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8004716:	4b7a      	ldr	r3, [pc, #488]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800471e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004722:	d105      	bne.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8004724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004726:	2b20      	cmp	r3, #32
 8004728:	d102      	bne.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 800472a:	4b77      	ldr	r3, [pc, #476]	@ (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 800472c:	637b      	str	r3, [r7, #52]	@ 0x34
 800472e:	e011      	b.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004730:	4b73      	ldr	r3, [pc, #460]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004732:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b02      	cmp	r3, #2
 800473c:	d106      	bne.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800473e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004740:	2b28      	cmp	r3, #40	@ 0x28
 8004742:	d103      	bne.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8004744:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004748:	637b      	str	r3, [r7, #52]	@ 0x34
 800474a:	e003      	b.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004750:	f001 b863 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004754:	f001 b861 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004758:	4b69      	ldr	r3, [pc, #420]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800475a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800475e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004762:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004766:	2b00      	cmp	r3, #0
 8004768:	d104      	bne.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800476a:	f7fd fecf 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 800476e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004770:	f001 b853 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8004774:	4b62      	ldr	r3, [pc, #392]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800477c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004780:	d10a      	bne.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8004782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004784:	2b40      	cmp	r3, #64	@ 0x40
 8004786:	d107      	bne.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004788:	f107 0314 	add.w	r3, r7, #20
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fa2b 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	637b      	str	r3, [r7, #52]	@ 0x34
 8004796:	e045      	b.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8004798:	4b59      	ldr	r3, [pc, #356]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047a4:	d10a      	bne.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	2b80      	cmp	r3, #128	@ 0x80
 80047aa:	d107      	bne.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047ac:	f107 0308 	add.w	r3, r7, #8
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff fb85 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ba:	e033      	b.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80047bc:	4b50      	ldr	r3, [pc, #320]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d10c      	bne.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80047c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80047cc:	d109      	bne.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80047ce:	4b4c      	ldr	r3, [pc, #304]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	08db      	lsrs	r3, r3, #3
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	4a4a      	ldr	r2, [pc, #296]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80047da:	fa22 f303 	lsr.w	r3, r2, r3
 80047de:	637b      	str	r3, [r7, #52]	@ 0x34
 80047e0:	e020      	b.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80047e2:	4b47      	ldr	r3, [pc, #284]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047ee:	d106      	bne.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 80047f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047f6:	d102      	bne.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 80047f8:	4b43      	ldr	r3, [pc, #268]	@ (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80047fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80047fc:	e012      	b.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80047fe:	4b40      	ldr	r3, [pc, #256]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b02      	cmp	r3, #2
 800480a:	d107      	bne.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800480c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004812:	d103      	bne.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8004814:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004818:	637b      	str	r3, [r7, #52]	@ 0x34
 800481a:	e003      	b.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004820:	f000 bffb 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004824:	f000 bff9 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004828:	4b35      	ldr	r3, [pc, #212]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800482a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800482e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8004832:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800483a:	f7fd fe67 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 800483e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8004840:	f000 bfeb 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8004844:	4b2e      	ldr	r3, [pc, #184]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800484c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004850:	d10b      	bne.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8004852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004858:	d107      	bne.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800485a:	f107 0314 	add.w	r3, r7, #20
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff f9c2 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	637b      	str	r3, [r7, #52]	@ 0x34
 8004868:	e047      	b.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800486a:	4b25      	ldr	r3, [pc, #148]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004876:	d10b      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8004878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800487e:	d107      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004880:	f107 0308 	add.w	r3, r7, #8
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff fb1b 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	637b      	str	r3, [r7, #52]	@ 0x34
 800488e:	e034      	b.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004890:	4b1b      	ldr	r3, [pc, #108]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b02      	cmp	r3, #2
 800489a:	d10d      	bne.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800489c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048a2:	d109      	bne.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80048a4:	4b16      	ldr	r3, [pc, #88]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	08db      	lsrs	r3, r3, #3
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	4a15      	ldr	r2, [pc, #84]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
 80048b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80048b6:	e020      	b.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80048b8:	4b11      	ldr	r3, [pc, #68]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048c4:	d106      	bne.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80048c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048cc:	d102      	bne.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 80048ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80048d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048d2:	e012      	b.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80048d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80048d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d107      	bne.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80048e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80048e8:	d103      	bne.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 80048ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80048f0:	e003      	b.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048f6:	f000 bf90 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80048fa:	f000 bf8e 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80048fe:	bf00      	nop
 8004900:	44020c00 	.word	0x44020c00
 8004904:	03d09000 	.word	0x03d09000
 8004908:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800490c:	4ba5      	ldr	r3, [pc, #660]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800490e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004912:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004916:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491a:	2b00      	cmp	r3, #0
 800491c:	d104      	bne.n	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800491e:	f7fd fdf5 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8004922:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8004924:	f000 bf79 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8004928:	4b9e      	ldr	r3, [pc, #632]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004930:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004934:	d10b      	bne.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8004936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004938:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800493c:	d107      	bne.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800493e:	f107 0314 	add.w	r3, r7, #20
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff f950 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	637b      	str	r3, [r7, #52]	@ 0x34
 800494c:	e047      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800494e:	4b95      	ldr	r3, [pc, #596]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800495a:	d10b      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800495c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004962:	d107      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004964:	f107 0308 	add.w	r3, r7, #8
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff faa9 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	637b      	str	r3, [r7, #52]	@ 0x34
 8004972:	e034      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004974:	4b8b      	ldr	r3, [pc, #556]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b02      	cmp	r3, #2
 800497e:	d10d      	bne.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8004980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004982:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004986:	d109      	bne.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004988:	4b86      	ldr	r3, [pc, #536]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	08db      	lsrs	r3, r3, #3
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	4a85      	ldr	r2, [pc, #532]	@ (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004994:	fa22 f303 	lsr.w	r3, r2, r3
 8004998:	637b      	str	r3, [r7, #52]	@ 0x34
 800499a:	e020      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800499c:	4b81      	ldr	r3, [pc, #516]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049a8:	d106      	bne.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80049aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049b0:	d102      	bne.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 80049b2:	4b7e      	ldr	r3, [pc, #504]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80049b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049b6:	e012      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80049b8:	4b7a      	ldr	r3, [pc, #488]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80049ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d107      	bne.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 80049c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80049cc:	d103      	bne.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 80049ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d4:	e003      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80049da:	f000 bf1e 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80049de:	f000 bf1c 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80049e2:	4b70      	ldr	r3, [pc, #448]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80049e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80049e8:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80049ec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80049ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d104      	bne.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80049f4:	f7fd fd8a 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 80049f8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80049fa:	f000 bf0e 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80049fe:	4b69      	ldr	r3, [pc, #420]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a0a:	d10b      	bne.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a12:	d107      	bne.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a14:	f107 0314 	add.w	r3, r7, #20
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff f8e5 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a22:	e047      	b.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8004a24:	4b5f      	ldr	r3, [pc, #380]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a30:	d10b      	bne.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a38:	d107      	bne.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a3a:	f107 0308 	add.w	r3, r7, #8
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fa3e 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a48:	e034      	b.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8004a4a:	4b56      	ldr	r3, [pc, #344]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d10d      	bne.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8004a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a58:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004a5c:	d109      	bne.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a5e:	4b51      	ldr	r3, [pc, #324]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	08db      	lsrs	r3, r3, #3
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	4a4f      	ldr	r2, [pc, #316]	@ (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a70:	e020      	b.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8004a72:	4b4c      	ldr	r3, [pc, #304]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a7e:	d106      	bne.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8004a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a86:	d102      	bne.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8004a88:	4b48      	ldr	r3, [pc, #288]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a8c:	e012      	b.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8004a8e:	4b45      	ldr	r3, [pc, #276]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d107      	bne.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004aa2:	d103      	bne.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8004aa4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aaa:	e003      	b.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ab0:	f000 beb3 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004ab4:	f000 beb1 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004ab8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004abe:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004ac2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d104      	bne.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004aca:	f7fd fd4b 	bl	8002564 <HAL_RCC_GetPCLK3Freq>
 8004ace:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004ad0:	f000 bea3 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ada:	d108      	bne.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004adc:	f107 0314 	add.w	r3, r7, #20
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff f881 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004aea:	f000 be96 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8004aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004af4:	d108      	bne.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004af6:	f107 0308 	add.w	r3, r7, #8
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff f9e0 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b04:	f000 be89 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004b08:	4b26      	ldr	r3, [pc, #152]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d10d      	bne.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b1a:	d109      	bne.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b1c:	4b21      	ldr	r3, [pc, #132]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	08db      	lsrs	r3, r3, #3
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	4a20      	ldr	r2, [pc, #128]	@ (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b2e:	e020      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004b30:	4b1c      	ldr	r3, [pc, #112]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b3c:	d106      	bne.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b44:	d102      	bne.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8004b46:	4b19      	ldr	r3, [pc, #100]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b4a:	e012      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004b4c:	4b15      	ldr	r3, [pc, #84]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d107      	bne.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004b60:	d103      	bne.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8004b62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b68:	e003      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b6e:	f000 be54 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004b72:	f000 be52 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004b76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d104      	bne.n	8004b92 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004b88:	f7fd fca4 	bl	80024d4 <HAL_RCC_GetHCLKFreq>
 8004b8c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004b8e:	f000 be44 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d10b      	bne.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b98:	f7fd fb70 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8004b9c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004b9e:	f000 be3c 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004ba2:	bf00      	nop
 8004ba4:	44020c00 	.word	0x44020c00
 8004ba8:	03d09000 	.word	0x03d09000
 8004bac:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d108      	bne.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bb6:	f107 0314 	add.w	r3, r7, #20
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff f814 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bc4:	f000 be29 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004bc8:	4b9f      	ldr	r3, [pc, #636]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bd4:	d105      	bne.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d102      	bne.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8004bdc:	4b9b      	ldr	r3, [pc, #620]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8004bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8004be0:	e023      	b.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004be2:	4b99      	ldr	r3, [pc, #612]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d109      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004bf4:	4b94      	ldr	r3, [pc, #592]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	08db      	lsrs	r3, r3, #3
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	4a94      	ldr	r2, [pc, #592]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
 8004c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c06:	e010      	b.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004c08:	4b8f      	ldr	r3, [pc, #572]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c14:	d105      	bne.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8004c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c18:	2b05      	cmp	r3, #5
 8004c1a:	d102      	bne.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8004c1c:	4b8d      	ldr	r3, [pc, #564]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c20:	e003      	b.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c26:	f000 bdf8 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004c2a:	f000 bdf6 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004c2e:	4b86      	ldr	r3, [pc, #536]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004c3a:	4b83      	ldr	r3, [pc, #524]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004c3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d106      	bne.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d103      	bne.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8004c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c52:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c54:	e012      	b.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8004c56:	4b7c      	ldr	r3, [pc, #496]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c64:	d106      	bne.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8004c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d103      	bne.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8004c6c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c72:	e003      	b.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8004c78:	f000 bdcf 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004c7c:	f000 bdcd 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004c80:	4b71      	ldr	r3, [pc, #452]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004c82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c8a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d104      	bne.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c92:	f7fd fc3b 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8004c96:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004c98:	f000 bdbf 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca2:	d108      	bne.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ca4:	f107 0308 	add.w	r3, r7, #8
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff f909 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cb2:	f000 bdb2 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004cb6:	4b64      	ldr	r3, [pc, #400]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d10d      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cc8:	d109      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004cca:	4b5f      	ldr	r3, [pc, #380]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	08db      	lsrs	r3, r3, #3
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	4a5e      	ldr	r2, [pc, #376]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cdc:	e011      	b.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004cde:	4b5a      	ldr	r3, [pc, #360]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ce6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cea:	d106      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8004cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cf2:	d102      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8004cf4:	4b57      	ldr	r3, [pc, #348]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cf8:	e003      	b.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cfe:	f000 bd8c 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004d02:	f000 bd8a 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004d06:	4b50      	ldr	r3, [pc, #320]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004d08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d0c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004d10:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d104      	bne.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d18:	f7fd fbf8 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8004d1c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004d1e:	f000 bd7c 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8004d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d28:	d108      	bne.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d2a:	f107 0308 	add.w	r3, r7, #8
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff f8c6 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d38:	f000 bd6f 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004d3c:	4b42      	ldr	r3, [pc, #264]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d10d      	bne.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8004d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d4e:	d109      	bne.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d50:	4b3d      	ldr	r3, [pc, #244]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	08db      	lsrs	r3, r3, #3
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	4a3d      	ldr	r2, [pc, #244]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d60:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d62:	e011      	b.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004d64:	4b38      	ldr	r3, [pc, #224]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d70:	d106      	bne.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8004d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d74:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004d78:	d102      	bne.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8004d7a:	4b36      	ldr	r3, [pc, #216]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d7e:	e003      	b.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d84:	f000 bd49 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004d88:	f000 bd47 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004d8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d92:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004d96:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8004d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d104      	bne.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004d9e:	f7fd fbe1 	bl	8002564 <HAL_RCC_GetPCLK3Freq>
 8004da2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004da4:	f000 bd39 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8004da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004daa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dae:	d108      	bne.n	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004db0:	f107 0308 	add.w	r3, r7, #8
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff f883 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dbe:	f000 bd2c 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8004dc2:	4b21      	ldr	r3, [pc, #132]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d10d      	bne.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8004dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dd4:	d109      	bne.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	08db      	lsrs	r3, r3, #3
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004de2:	fa22 f303 	lsr.w	r3, r2, r3
 8004de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004de8:	e011      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8004dea:	4b17      	ldr	r3, [pc, #92]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004df2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004df6:	d106      	bne.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8004df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004dfe:	d102      	bne.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8004e00:	4b14      	ldr	r3, [pc, #80]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e04:	e003      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e0a:	f000 bd06 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004e0e:	f000 bd04 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004e12:	4b0d      	ldr	r3, [pc, #52]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e18:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004e1c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d104      	bne.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7fd fb72 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8004e28:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004e2a:	f000 bcf6 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e34:	d110      	bne.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e36:	f107 0308 	add.w	r3, r7, #8
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff f840 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e44:	f000 bce9 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004e48:	44020c00 	.word	0x44020c00
 8004e4c:	017d7840 	.word	0x017d7840
 8004e50:	03d09000 	.word	0x03d09000
 8004e54:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004e58:	4ba4      	ldr	r3, [pc, #656]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d10e      	bne.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8004e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e6a:	d10a      	bne.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e6c:	4b9f      	ldr	r3, [pc, #636]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	08db      	lsrs	r3, r3, #3
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	4a9e      	ldr	r2, [pc, #632]	@ (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e7e:	f000 bccc 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e86:	f000 bcc8 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8004e8a:	4b98      	ldr	r3, [pc, #608]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004e8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e90:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004e94:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8004e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d104      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004e9c:	f7fd fb62 	bl	8002564 <HAL_RCC_GetPCLK3Freq>
 8004ea0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004ea2:	f000 bcba 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004eac:	d108      	bne.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004eae:	f107 0308 	add.w	r3, r7, #8
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff f804 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ebc:	f000 bcad 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004ec0:	4b8a      	ldr	r3, [pc, #552]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d10e      	bne.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ece:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ed2:	d10a      	bne.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ed4:	4b85      	ldr	r3, [pc, #532]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	08db      	lsrs	r3, r3, #3
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	4a84      	ldr	r2, [pc, #528]	@ (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ee6:	f000 bc98 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004eee:	f000 bc94 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004ef2:	4b7e      	ldr	r3, [pc, #504]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004ef4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004ef8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004efc:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f00:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004f04:	d056      	beq.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8004f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f08:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004f0c:	f200 808b 	bhi.w	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8004f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f16:	d03e      	beq.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8004f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f1e:	f200 8082 	bhi.w	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8004f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f28:	d027      	beq.n	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f30:	d879      	bhi.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f38:	d017      	beq.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f40:	d871      	bhi.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8004f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d004      	beq.n	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8004f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f4e:	d004      	beq.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8004f50:	e069      	b.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004f52:	f7fd fb07 	bl	8002564 <HAL_RCC_GetPCLK3Freq>
 8004f56:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004f58:	e068      	b.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f5a:	f107 0314 	add.w	r3, r7, #20
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fe fe42 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004f68:	e060      	b.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f6a:	f107 0308 	add.w	r3, r7, #8
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe ffa6 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004f78:	e058      	b.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d103      	bne.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8004f88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f8c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004f8e:	e04d      	b.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004f94:	e04a      	b.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004f96:	4b55      	ldr	r3, [pc, #340]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fa0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fa4:	d103      	bne.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8004fa6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004faa:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004fac:	e03e      	b.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004fb2:	e03b      	b.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004fb4:	4b4d      	ldr	r3, [pc, #308]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fba:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004fc0:	4b4a      	ldr	r3, [pc, #296]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d10c      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8004fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d109      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004fd2:	4b46      	ldr	r3, [pc, #280]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	08db      	lsrs	r3, r3, #3
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	4a44      	ldr	r2, [pc, #272]	@ (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8004fde:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fe4:	e01e      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004fe6:	4b41      	ldr	r3, [pc, #260]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ff2:	d106      	bne.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ffa:	d102      	bne.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8004ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005000:	e010      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005002:	4b3a      	ldr	r3, [pc, #232]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800500e:	d106      	bne.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8005010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005012:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005016:	d102      	bne.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005018:	4b37      	ldr	r3, [pc, #220]	@ (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 800501a:	637b      	str	r3, [r7, #52]	@ 0x34
 800501c:	e002      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005022:	e003      	b.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8005024:	e002      	b.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800502a:	bf00      	nop
          }
        }
        break;
 800502c:	e3f5      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800502e:	4b2f      	ldr	r3, [pc, #188]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005030:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005034:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005038:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800503a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005040:	d05f      	beq.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8005042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005044:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005048:	f200 8094 	bhi.w	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005052:	d03f      	beq.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8005054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005056:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800505a:	f200 808b 	bhi.w	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800505e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005060:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005064:	d028      	beq.n	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8005066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005068:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800506c:	f200 8082 	bhi.w	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005076:	d017      	beq.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8005078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800507e:	d879      	bhi.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005082:	2b00      	cmp	r3, #0
 8005084:	d004      	beq.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005088:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800508c:	d004      	beq.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 800508e:	e071      	b.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8005090:	f7fd fa3c 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8005094:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8005096:	e070      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005098:	f107 0314 	add.w	r3, r7, #20
 800509c:	4618      	mov	r0, r3
 800509e:	f7fe fda3 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80050a6:	e068      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050a8:	f107 0308 	add.w	r3, r7, #8
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fe ff07 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80050b6:	e060      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80050b8:	4b0c      	ldr	r3, [pc, #48]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80050ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d103      	bne.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 80050c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ca:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80050cc:	e055      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80050d2:	e052      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80050d4:	4b05      	ldr	r3, [pc, #20]	@ (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80050d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050e2:	d10b      	bne.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 80050e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80050e8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80050ea:	e046      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 80050ec:	44020c00 	.word	0x44020c00
 80050f0:	03d09000 	.word	0x03d09000
 80050f4:	003d0900 	.word	0x003d0900
 80050f8:	017d7840 	.word	0x017d7840
              frequency = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005100:	e03b      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005102:	4bae      	ldr	r3, [pc, #696]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005104:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005108:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800510c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800510e:	4bab      	ldr	r3, [pc, #684]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b02      	cmp	r3, #2
 8005118:	d10c      	bne.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 800511a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511c:	2b00      	cmp	r3, #0
 800511e:	d109      	bne.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005120:	4ba6      	ldr	r3, [pc, #664]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	08db      	lsrs	r3, r3, #3
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	4aa5      	ldr	r2, [pc, #660]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
 8005130:	637b      	str	r3, [r7, #52]	@ 0x34
 8005132:	e01e      	b.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005134:	4ba1      	ldr	r3, [pc, #644]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800513c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005140:	d106      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8005142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005148:	d102      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800514a:	4b9e      	ldr	r3, [pc, #632]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 800514c:	637b      	str	r3, [r7, #52]	@ 0x34
 800514e:	e010      	b.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005150:	4b9a      	ldr	r3, [pc, #616]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005158:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800515c:	d106      	bne.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800515e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005160:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005164:	d102      	bne.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005166:	4b98      	ldr	r3, [pc, #608]	@ (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8005168:	637b      	str	r3, [r7, #52]	@ 0x34
 800516a:	e002      	b.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800516c:	2300      	movs	r3, #0
 800516e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005170:	e003      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8005172:	e002      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005178:	bf00      	nop
          }
        }
        break;
 800517a:	e34e      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800517c:	4b8f      	ldr	r3, [pc, #572]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800517e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005186:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8005188:	4b8c      	ldr	r3, [pc, #560]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005190:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005194:	d105      	bne.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8005196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005198:	2b00      	cmp	r3, #0
 800519a:	d102      	bne.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 800519c:	4b8a      	ldr	r3, [pc, #552]	@ (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800519e:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80051a0:	e33b      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80051a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051a8:	d107      	bne.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051aa:	f107 0320 	add.w	r3, r7, #32
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fe fbae 	bl	8003910 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80051b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051b8:	e32f      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80051ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051c0:	d107      	bne.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051c2:	f107 0314 	add.w	r3, r7, #20
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe fd0e 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051d0:	e323      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051d6:	e320      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80051d8:	4b78      	ldr	r3, [pc, #480]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80051da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80051e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d860      	bhi.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 80051ea:	a201      	add	r2, pc, #4	@ (adr r2, 80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005205 	.word	0x08005205
 80051f4:	08005215 	.word	0x08005215
 80051f8:	08005225 	.word	0x08005225
 80051fc:	08005235 	.word	0x08005235
 8005200:	0800523b 	.word	0x0800523b
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005204:	f107 0320 	add.w	r3, r7, #32
 8005208:	4618      	mov	r0, r3
 800520a:	f7fe fb81 	bl	8003910 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005212:	e04e      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005214:	f107 0314 	add.w	r3, r7, #20
 8005218:	4618      	mov	r0, r3
 800521a:	f7fe fce5 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005222:	e046      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005224:	f107 0308 	add.w	r3, r7, #8
 8005228:	4618      	mov	r0, r3
 800522a:	f7fe fe49 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005232:	e03e      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005234:	4b65      	ldr	r3, [pc, #404]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8005236:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005238:	e03b      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800523a:	4b60      	ldr	r3, [pc, #384]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800523c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005240:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005244:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005246:	4b5d      	ldr	r3, [pc, #372]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b02      	cmp	r3, #2
 8005250:	d10c      	bne.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8005252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d109      	bne.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005258:	4b58      	ldr	r3, [pc, #352]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	08db      	lsrs	r3, r3, #3
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	4a57      	ldr	r2, [pc, #348]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8005264:	fa22 f303 	lsr.w	r3, r2, r3
 8005268:	637b      	str	r3, [r7, #52]	@ 0x34
 800526a:	e01e      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800526c:	4b53      	ldr	r3, [pc, #332]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005278:	d106      	bne.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 800527a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005280:	d102      	bne.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005282:	4b50      	ldr	r3, [pc, #320]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005284:	637b      	str	r3, [r7, #52]	@ 0x34
 8005286:	e010      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005288:	4b4c      	ldr	r3, [pc, #304]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005290:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005294:	d106      	bne.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8005296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005298:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800529c:	d102      	bne.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800529e:	4b4a      	ldr	r3, [pc, #296]	@ (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80052a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a2:	e002      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80052a8:	e003      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80052aa:	e002      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052b0:	bf00      	nop
          }
        }
        break;
 80052b2:	e2b2      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80052b4:	4b41      	ldr	r3, [pc, #260]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80052b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052be:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80052c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	f200 80a4 	bhi.w	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 80052c8:	a201      	add	r2, pc, #4	@ (adr r2, 80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 80052ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ce:	bf00      	nop
 80052d0:	08005355 	.word	0x08005355
 80052d4:	08005411 	.word	0x08005411
 80052d8:	08005411 	.word	0x08005411
 80052dc:	08005411 	.word	0x08005411
 80052e0:	08005411 	.word	0x08005411
 80052e4:	08005411 	.word	0x08005411
 80052e8:	08005411 	.word	0x08005411
 80052ec:	08005411 	.word	0x08005411
 80052f0:	08005365 	.word	0x08005365
 80052f4:	08005411 	.word	0x08005411
 80052f8:	08005411 	.word	0x08005411
 80052fc:	08005411 	.word	0x08005411
 8005300:	08005411 	.word	0x08005411
 8005304:	08005411 	.word	0x08005411
 8005308:	08005411 	.word	0x08005411
 800530c:	08005411 	.word	0x08005411
 8005310:	08005375 	.word	0x08005375
 8005314:	08005411 	.word	0x08005411
 8005318:	08005411 	.word	0x08005411
 800531c:	08005411 	.word	0x08005411
 8005320:	08005411 	.word	0x08005411
 8005324:	08005411 	.word	0x08005411
 8005328:	08005411 	.word	0x08005411
 800532c:	08005411 	.word	0x08005411
 8005330:	08005385 	.word	0x08005385
 8005334:	08005411 	.word	0x08005411
 8005338:	08005411 	.word	0x08005411
 800533c:	08005411 	.word	0x08005411
 8005340:	08005411 	.word	0x08005411
 8005344:	08005411 	.word	0x08005411
 8005348:	08005411 	.word	0x08005411
 800534c:	08005411 	.word	0x08005411
 8005350:	0800538b 	.word	0x0800538b
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005354:	f107 0320 	add.w	r3, r7, #32
 8005358:	4618      	mov	r0, r3
 800535a:	f7fe fad9 	bl	8003910 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005362:	e058      	b.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005364:	f107 0314 	add.w	r3, r7, #20
 8005368:	4618      	mov	r0, r3
 800536a:	f7fe fc3d 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005372:	e050      	b.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005374:	f107 0308 	add.w	r3, r7, #8
 8005378:	4618      	mov	r0, r3
 800537a:	f7fe fda1 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005382:	e048      	b.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005384:	4b11      	ldr	r3, [pc, #68]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8005386:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005388:	e045      	b.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800538a:	4b0c      	ldr	r3, [pc, #48]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800538c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005390:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005394:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005396:	4b09      	ldr	r3, [pc, #36]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d116      	bne.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 80053a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d113      	bne.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053a8:	4b04      	ldr	r3, [pc, #16]	@ (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	08db      	lsrs	r3, r3, #3
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	4a03      	ldr	r2, [pc, #12]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
 80053b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ba:	e028      	b.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 80053bc:	44020c00 	.word	0x44020c00
 80053c0:	03d09000 	.word	0x03d09000
 80053c4:	003d0900 	.word	0x003d0900
 80053c8:	017d7840 	.word	0x017d7840
 80053cc:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053d0:	4b95      	ldr	r3, [pc, #596]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053dc:	d106      	bne.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 80053de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053e4:	d102      	bne.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80053e6:	4b91      	ldr	r3, [pc, #580]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80053e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ea:	e010      	b.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053ec:	4b8e      	ldr	r3, [pc, #568]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053f8:	d106      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 80053fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005400:	d102      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005402:	4b8b      	ldr	r3, [pc, #556]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8005404:	637b      	str	r3, [r7, #52]	@ 0x34
 8005406:	e002      	b.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800540c:	e003      	b.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 800540e:	e002      	b.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8005410:	2300      	movs	r3, #0
 8005412:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005414:	bf00      	nop
          }
        }
        break;
 8005416:	e200      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005418:	4b83      	ldr	r3, [pc, #524]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800541a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800541e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005422:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8005424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800542a:	d031      	beq.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800542c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005432:	d866      	bhi.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8005434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005436:	2bc0      	cmp	r3, #192	@ 0xc0
 8005438:	d027      	beq.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 800543a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543c:	2bc0      	cmp	r3, #192	@ 0xc0
 800543e:	d860      	bhi.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8005440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005442:	2b80      	cmp	r3, #128	@ 0x80
 8005444:	d019      	beq.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8005446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005448:	2b80      	cmp	r3, #128	@ 0x80
 800544a:	d85a      	bhi.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 800544c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8005452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005454:	2b40      	cmp	r3, #64	@ 0x40
 8005456:	d008      	beq.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8005458:	e053      	b.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800545a:	f107 0320 	add.w	r3, r7, #32
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe fa56 	bl	8003910 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005466:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005468:	e04e      	b.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800546a:	f107 0314 	add.w	r3, r7, #20
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe fbba 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005478:	e046      	b.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800547a:	f107 0308 	add.w	r3, r7, #8
 800547e:	4618      	mov	r0, r3
 8005480:	f7fe fd1e 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005488:	e03e      	b.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800548a:	4b6a      	ldr	r3, [pc, #424]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 800548c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800548e:	e03b      	b.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005490:	4b65      	ldr	r3, [pc, #404]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005492:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005496:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800549a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800549c:	4b62      	ldr	r3, [pc, #392]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d10c      	bne.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80054a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054ae:	4b5e      	ldr	r3, [pc, #376]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	08db      	lsrs	r3, r3, #3
 80054b4:	f003 0303 	and.w	r3, r3, #3
 80054b8:	4a5f      	ldr	r2, [pc, #380]	@ (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80054ba:	fa22 f303 	lsr.w	r3, r2, r3
 80054be:	637b      	str	r3, [r7, #52]	@ 0x34
 80054c0:	e01e      	b.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054c2:	4b59      	ldr	r3, [pc, #356]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ce:	d106      	bne.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80054d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d6:	d102      	bne.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80054d8:	4b54      	ldr	r3, [pc, #336]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80054da:	637b      	str	r3, [r7, #52]	@ 0x34
 80054dc:	e010      	b.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80054de:	4b52      	ldr	r3, [pc, #328]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054ea:	d106      	bne.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 80054ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054f2:	d102      	bne.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80054f4:	4b4e      	ldr	r3, [pc, #312]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80054f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80054f8:	e002      	b.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80054fe:	e003      	b.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8005500:	e002      	b.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8005502:	2300      	movs	r3, #0
 8005504:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005506:	bf00      	nop
          }
        }
        break;
 8005508:	e187      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800550a:	4b47      	ldr	r3, [pc, #284]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800550c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005510:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005514:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8005516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005518:	2b00      	cmp	r3, #0
 800551a:	d103      	bne.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800551c:	f7fd f80c 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8005520:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8005522:	e17a      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8005524:	4b40      	ldr	r3, [pc, #256]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800552c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005530:	d10b      	bne.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8005532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005538:	d107      	bne.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800553a:	f107 0314 	add.w	r3, r7, #20
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe fb52 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	637b      	str	r3, [r7, #52]	@ 0x34
 8005548:	e045      	b.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800554a:	4b37      	ldr	r3, [pc, #220]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005556:	d10b      	bne.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8005558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800555e:	d107      	bne.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005560:	f107 0308 	add.w	r3, r7, #8
 8005564:	4618      	mov	r0, r3
 8005566:	f7fe fcab 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	637b      	str	r3, [r7, #52]	@ 0x34
 800556e:	e032      	b.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8005570:	4b2d      	ldr	r3, [pc, #180]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b02      	cmp	r3, #2
 800557a:	d10d      	bne.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 800557c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005582:	d109      	bne.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005584:	4b28      	ldr	r3, [pc, #160]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	08db      	lsrs	r3, r3, #3
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	4a2a      	ldr	r2, [pc, #168]	@ (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8005590:	fa22 f303 	lsr.w	r3, r2, r3
 8005594:	637b      	str	r3, [r7, #52]	@ 0x34
 8005596:	e01e      	b.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8005598:	4b23      	ldr	r3, [pc, #140]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055a4:	d106      	bne.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 80055a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055ac:	d102      	bne.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 80055ae:	4b1f      	ldr	r3, [pc, #124]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80055b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055b2:	e010      	b.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80055b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055c0:	d106      	bne.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 80055c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80055c8:	d102      	bne.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 80055ca:	4b19      	ldr	r3, [pc, #100]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80055cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80055ce:	e002      	b.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055d4:	e121      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80055d6:	e120      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80055d8:	4b13      	ldr	r3, [pc, #76]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80055da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80055e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d861      	bhi.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80055ea:	a201      	add	r2, pc, #4	@ (adr r2, 80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 80055ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f0:	08005601 	.word	0x08005601
 80055f4:	08005609 	.word	0x08005609
 80055f8:	08005619 	.word	0x08005619
 80055fc:	0800563d 	.word	0x0800563d
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8005600:	f7fc ff68 	bl	80024d4 <HAL_RCC_GetHCLKFreq>
 8005604:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8005606:	e055      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005608:	f107 0320 	add.w	r3, r7, #32
 800560c:	4618      	mov	r0, r3
 800560e:	f7fe f97f 	bl	8003910 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005616:	e04d      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005618:	f107 0314 	add.w	r3, r7, #20
 800561c:	4618      	mov	r0, r3
 800561e:	f7fe fae3 	bl	8003be8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005626:	e045      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005628:	44020c00 	.word	0x44020c00
 800562c:	003d0900 	.word	0x003d0900
 8005630:	017d7840 	.word	0x017d7840
 8005634:	00bb8000 	.word	0x00bb8000
 8005638:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800563c:	4b79      	ldr	r3, [pc, #484]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800563e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005642:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005646:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005648:	4b76      	ldr	r3, [pc, #472]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b02      	cmp	r3, #2
 8005652:	d10c      	bne.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8005654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d109      	bne.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800565a:	4b72      	ldr	r3, [pc, #456]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	08db      	lsrs	r3, r3, #3
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	4a70      	ldr	r2, [pc, #448]	@ (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8005666:	fa22 f303 	lsr.w	r3, r2, r3
 800566a:	637b      	str	r3, [r7, #52]	@ 0x34
 800566c:	e01e      	b.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800566e:	4b6d      	ldr	r3, [pc, #436]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800567a:	d106      	bne.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800567c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005682:	d102      	bne.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005684:	4b69      	ldr	r3, [pc, #420]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8005686:	637b      	str	r3, [r7, #52]	@ 0x34
 8005688:	e010      	b.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800568a:	4b66      	ldr	r3, [pc, #408]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005692:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005696:	d106      	bne.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8005698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800569e:	d102      	bne.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80056a0:	4b63      	ldr	r3, [pc, #396]	@ (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 80056a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80056a4:	e002      	b.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80056aa:	e003      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80056ac:	e002      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80056b2:	bf00      	nop
          }
        }
        break;
 80056b4:	e0b1      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80056b6:	4b5b      	ldr	r3, [pc, #364]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80056b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056bc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80056c0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80056c2:	4b58      	ldr	r3, [pc, #352]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80056c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d106      	bne.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 80056d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d103      	bne.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 80056d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056da:	637b      	str	r3, [r7, #52]	@ 0x34
 80056dc:	e01f      	b.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80056de:	4b51      	ldr	r3, [pc, #324]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80056e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056ec:	d106      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 80056ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f0:	2b40      	cmp	r3, #64	@ 0x40
 80056f2:	d103      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 80056f4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80056f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80056fa:	e010      	b.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80056fc:	4b49      	ldr	r3, [pc, #292]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005708:	d106      	bne.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 800570a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570c:	2b80      	cmp	r3, #128	@ 0x80
 800570e:	d103      	bne.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8005710:	f248 0312 	movw	r3, #32786	@ 0x8012
 8005714:	637b      	str	r3, [r7, #52]	@ 0x34
 8005716:	e002      	b.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800571c:	e07d      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800571e:	e07c      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005720:	4b40      	ldr	r3, [pc, #256]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005726:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800572a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800572c:	4b3d      	ldr	r3, [pc, #244]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005738:	d105      	bne.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 800573a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573c:	2b00      	cmp	r3, #0
 800573e:	d102      	bne.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8005740:	4b3c      	ldr	r3, [pc, #240]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8005742:	637b      	str	r3, [r7, #52]	@ 0x34
 8005744:	e031      	b.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8005746:	4b37      	ldr	r3, [pc, #220]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800574e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005752:	d10a      	bne.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8005754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005756:	2b10      	cmp	r3, #16
 8005758:	d107      	bne.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800575a:	f107 0320 	add.w	r3, r7, #32
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe f8d6 	bl	8003910 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	637b      	str	r3, [r7, #52]	@ 0x34
 8005768:	e01f      	b.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800576a:	4b2e      	ldr	r3, [pc, #184]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800576c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b02      	cmp	r3, #2
 8005776:	d106      	bne.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8005778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577a:	2b20      	cmp	r3, #32
 800577c:	d103      	bne.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 800577e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005782:	637b      	str	r3, [r7, #52]	@ 0x34
 8005784:	e011      	b.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005786:	4b27      	ldr	r3, [pc, #156]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800578c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005794:	d106      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8005796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005798:	2b30      	cmp	r3, #48	@ 0x30
 800579a:	d103      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 800579c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80057a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a2:	e002      	b.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80057a8:	e037      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80057aa:	e036      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80057ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80057ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80057b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ba:	2b10      	cmp	r3, #16
 80057bc:	d107      	bne.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057be:	f107 0320 	add.w	r3, r7, #32
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe f8a4 	bl	8003910 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80057cc:	e025      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80057ce:	4b15      	ldr	r3, [pc, #84]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057da:	d10a      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 80057dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d107      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057e2:	f107 0308 	add.w	r3, r7, #8
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe fb6a 	bl	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80057f0:	e00f      	b.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80057f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057fe:	d105      	bne.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8005800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005802:	2b30      	cmp	r3, #48	@ 0x30
 8005804:	d102      	bne.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 8005806:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8005808:	637b      	str	r3, [r7, #52]	@ 0x34
 800580a:	e002      	b.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8005810:	e003      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005812:	e002      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005818:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800581a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800581c:	4618      	mov	r0, r3
 800581e:	373c      	adds	r7, #60	@ 0x3c
 8005820:	46bd      	mov	sp, r7
 8005822:	bd90      	pop	{r4, r7, pc}
 8005824:	44020c00 	.word	0x44020c00
 8005828:	03d09000 	.word	0x03d09000
 800582c:	003d0900 	.word	0x003d0900
 8005830:	017d7840 	.word	0x017d7840
 8005834:	02dc6c00 	.word	0x02dc6c00

08005838 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005840:	4b48      	ldr	r3, [pc, #288]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a47      	ldr	r2, [pc, #284]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 8005846:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800584a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800584c:	f7fb fb6e 	bl	8000f2c <HAL_GetTick>
 8005850:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005852:	e008      	b.n	8005866 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005854:	f7fb fb6a 	bl	8000f2c <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d901      	bls.n	8005866 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e07a      	b.n	800595c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005866:	4b3f      	ldr	r3, [pc, #252]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f0      	bne.n	8005854 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005872:	4b3c      	ldr	r3, [pc, #240]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 8005874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005876:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800587a:	f023 0303 	bic.w	r3, r3, #3
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6811      	ldr	r1, [r2, #0]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6852      	ldr	r2, [r2, #4]
 8005886:	0212      	lsls	r2, r2, #8
 8005888:	430a      	orrs	r2, r1
 800588a:	4936      	ldr	r1, [pc, #216]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 800588c:	4313      	orrs	r3, r2
 800588e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	3b01      	subs	r3, #1
 8005896:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	3b01      	subs	r3, #1
 80058a0:	025b      	lsls	r3, r3, #9
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	041b      	lsls	r3, r3, #16
 80058ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	061b      	lsls	r3, r3, #24
 80058bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80058c0:	4928      	ldr	r1, [pc, #160]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80058c6:	4b27      	ldr	r3, [pc, #156]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 80058c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ca:	f023 020c 	bic.w	r2, r3, #12
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	4924      	ldr	r1, [pc, #144]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80058d8:	4b22      	ldr	r3, [pc, #136]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 80058da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058dc:	f023 0220 	bic.w	r2, r3, #32
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	491f      	ldr	r1, [pc, #124]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80058ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 80058ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f2:	491c      	ldr	r1, [pc, #112]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80058f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 80058fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fc:	4a19      	ldr	r2, [pc, #100]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 80058fe:	f023 0310 	bic.w	r3, r3, #16
 8005902:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005904:	4b17      	ldr	r3, [pc, #92]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 8005906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005908:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800590c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6a12      	ldr	r2, [r2, #32]
 8005914:	00d2      	lsls	r2, r2, #3
 8005916:	4913      	ldr	r1, [pc, #76]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 8005918:	4313      	orrs	r3, r2
 800591a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800591c:	4b11      	ldr	r3, [pc, #68]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 800591e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005920:	4a10      	ldr	r2, [pc, #64]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 8005922:	f043 0310 	orr.w	r3, r3, #16
 8005926:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005928:	4b0e      	ldr	r3, [pc, #56]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a0d      	ldr	r2, [pc, #52]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 800592e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005932:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005934:	f7fb fafa 	bl	8000f2c <HAL_GetTick>
 8005938:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800593a:	e008      	b.n	800594e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800593c:	f7fb faf6 	bl	8000f2c <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e006      	b.n	800595c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800594e:	4b05      	ldr	r3, [pc, #20]	@ (8005964 <RCCEx_PLL2_Config+0x12c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0f0      	beq.n	800593c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800595a:	2300      	movs	r3, #0

}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	44020c00 	.word	0x44020c00

08005968 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8005970:	4b48      	ldr	r3, [pc, #288]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a47      	ldr	r2, [pc, #284]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 8005976:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800597a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800597c:	f7fb fad6 	bl	8000f2c <HAL_GetTick>
 8005980:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005982:	e008      	b.n	8005996 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005984:	f7fb fad2 	bl	8000f2c <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e07a      	b.n	8005a8c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005996:	4b3f      	ldr	r3, [pc, #252]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80059a2:	4b3c      	ldr	r3, [pc, #240]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 80059a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80059aa:	f023 0303 	bic.w	r3, r3, #3
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6811      	ldr	r1, [r2, #0]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6852      	ldr	r2, [r2, #4]
 80059b6:	0212      	lsls	r2, r2, #8
 80059b8:	430a      	orrs	r2, r1
 80059ba:	4936      	ldr	r1, [pc, #216]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	630b      	str	r3, [r1, #48]	@ 0x30
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	025b      	lsls	r3, r3, #9
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	3b01      	subs	r3, #1
 80059dc:	041b      	lsls	r3, r3, #16
 80059de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	061b      	lsls	r3, r3, #24
 80059ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80059f0:	4928      	ldr	r1, [pc, #160]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80059f6:	4b27      	ldr	r3, [pc, #156]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 80059f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fa:	f023 020c 	bic.w	r2, r3, #12
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	4924      	ldr	r1, [pc, #144]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005a08:	4b22      	ldr	r3, [pc, #136]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0c:	f023 0220 	bic.w	r2, r3, #32
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	491f      	ldr	r1, [pc, #124]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 8005a1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a22:	491c      	ldr	r1, [pc, #112]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005a28:	4b1a      	ldr	r3, [pc, #104]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2c:	4a19      	ldr	r2, [pc, #100]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 8005a2e:	f023 0310 	bic.w	r3, r3, #16
 8005a32:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005a34:	4b17      	ldr	r3, [pc, #92]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 8005a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a38:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a3c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6a12      	ldr	r2, [r2, #32]
 8005a44:	00d2      	lsls	r2, r2, #3
 8005a46:	4913      	ldr	r1, [pc, #76]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005a4c:	4b11      	ldr	r3, [pc, #68]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a50:	4a10      	ldr	r2, [pc, #64]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 8005a52:	f043 0310 	orr.w	r3, r3, #16
 8005a56:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8005a58:	4b0e      	ldr	r3, [pc, #56]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 8005a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a62:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a64:	f7fb fa62 	bl	8000f2c <HAL_GetTick>
 8005a68:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a6a:	e008      	b.n	8005a7e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a6c:	f7fb fa5e 	bl	8000f2c <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e006      	b.n	8005a8c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a7e:	4b05      	ldr	r3, [pc, #20]	@ (8005a94 <RCCEx_PLL3_Config+0x12c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0f0      	beq.n	8005a6c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	44020c00 	.word	0x44020c00

08005a98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e042      	b.n	8005b30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d106      	bne.n	8005ac2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7fa ffad 	bl	8000a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2224      	movs	r2, #36	@ 0x24
 8005ac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0201 	bic.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fde4 	bl	80066b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fc33 	bl	8006354 <UART_SetConfig>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e01b      	b.n	8005b30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0201 	orr.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fe63 	bl	80067f4 <UART_CheckIdleState>
 8005b2e:	4603      	mov	r3, r0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08a      	sub	sp, #40	@ 0x28
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	4613      	mov	r3, r2
 8005b46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b4e:	2b20      	cmp	r3, #32
 8005b50:	f040 808b 	bne.w	8005c6a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_UART_Transmit+0x28>
 8005b5a:	88fb      	ldrh	r3, [r7, #6]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e083      	b.n	8005c6c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b6e:	2b80      	cmp	r3, #128	@ 0x80
 8005b70:	d107      	bne.n	8005b82 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b80:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2221      	movs	r2, #33	@ 0x21
 8005b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b92:	f7fb f9cb 	bl	8000f2c <HAL_GetTick>
 8005b96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	88fa      	ldrh	r2, [r7, #6]
 8005b9c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	88fa      	ldrh	r2, [r7, #6]
 8005ba4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb0:	d108      	bne.n	8005bc4 <HAL_UART_Transmit+0x8c>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d104      	bne.n	8005bc4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	61bb      	str	r3, [r7, #24]
 8005bc2:	e003      	b.n	8005bcc <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bcc:	e030      	b.n	8005c30 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2180      	movs	r1, #128	@ 0x80
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 feb5 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e03d      	b.n	8005c6c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10b      	bne.n	8005c0e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c04:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	3302      	adds	r3, #2
 8005c0a:	61bb      	str	r3, [r7, #24]
 8005c0c:	e007      	b.n	8005c1e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	781a      	ldrb	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1c8      	bne.n	8005bce <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2200      	movs	r2, #0
 8005c44:	2140      	movs	r1, #64	@ 0x40
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 fe7e 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e006      	b.n	8005c6c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e000      	b.n	8005c6c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8005c6a:	2302      	movs	r3, #2
  }
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3720      	adds	r7, #32
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08a      	sub	sp, #40	@ 0x28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d14b      	bne.n	8005d24 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <HAL_UART_Receive_IT+0x24>
 8005c92:	88fb      	ldrh	r3, [r7, #6]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e044      	b.n	8005d26 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cac:	2b40      	cmp	r3, #64	@ 0x40
 8005cae:	d107      	bne.n	8005cc0 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cbe:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8005d30 <HAL_UART_Receive_IT+0xbc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d024      	beq.n	8005d14 <HAL_UART_Receive_IT+0xa0>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a19      	ldr	r2, [pc, #100]	@ (8005d34 <HAL_UART_Receive_IT+0xc0>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d01f      	beq.n	8005d14 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d018      	beq.n	8005d14 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	e853 3f00 	ldrex	r3, [r3]
 8005cee:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d00:	623b      	str	r3, [r7, #32]
 8005d02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	69f9      	ldr	r1, [r7, #28]
 8005d06:	6a3a      	ldr	r2, [r7, #32]
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e6      	bne.n	8005ce2 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d14:	88fb      	ldrh	r3, [r7, #6]
 8005d16:	461a      	mov	r2, r3
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 fe82 	bl	8006a24 <UART_Start_Receive_IT>
 8005d20:	4603      	mov	r3, r0
 8005d22:	e000      	b.n	8005d26 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005d24:	2302      	movs	r3, #2
  }
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3728      	adds	r7, #40	@ 0x28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	44002400 	.word	0x44002400
 8005d34:	54002400 	.word	0x54002400

08005d38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b0ae      	sub	sp, #184	@ 0xb8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d62:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005d66:	4013      	ands	r3, r2
 8005d68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8005d6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d11b      	bne.n	8005dac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005d78:	f003 0320 	and.w	r3, r3, #32
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d015      	beq.n	8005dac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005d84:	f003 0320 	and.w	r3, r3, #32
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d105      	bne.n	8005d98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d009      	beq.n	8005dac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 82ac 	beq.w	80062fa <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	4798      	blx	r3
      }
      return;
 8005daa:	e2a6      	b.n	80062fa <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80fd 	beq.w	8005fb0 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005db6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005dba:	4b7a      	ldr	r3, [pc, #488]	@ (8005fa4 <HAL_UART_IRQHandler+0x26c>)
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d106      	bne.n	8005dd0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005dc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005dc6:	4b78      	ldr	r3, [pc, #480]	@ (8005fa8 <HAL_UART_IRQHandler+0x270>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 80f0 	beq.w	8005fb0 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005dd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d011      	beq.n	8005e00 <HAL_UART_IRQHandler+0xc8>
 8005ddc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00b      	beq.n	8005e00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2201      	movs	r2, #1
 8005dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df6:	f043 0201 	orr.w	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d011      	beq.n	8005e30 <HAL_UART_IRQHandler+0xf8>
 8005e0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00b      	beq.n	8005e30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e26:	f043 0204 	orr.w	r2, r3, #4
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d011      	beq.n	8005e60 <HAL_UART_IRQHandler+0x128>
 8005e3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00b      	beq.n	8005e60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2204      	movs	r2, #4
 8005e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e56:	f043 0202 	orr.w	r2, r3, #2
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d017      	beq.n	8005e9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d105      	bne.n	8005e84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005e78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005e7c:	4b49      	ldr	r3, [pc, #292]	@ (8005fa4 <HAL_UART_IRQHandler+0x26c>)
 8005e7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00b      	beq.n	8005e9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2208      	movs	r2, #8
 8005e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e92:	f043 0208 	orr.w	r2, r3, #8
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d012      	beq.n	8005ece <HAL_UART_IRQHandler+0x196>
 8005ea8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005eac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00c      	beq.n	8005ece <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ebc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ec4:	f043 0220 	orr.w	r2, r3, #32
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 8212 	beq.w	80062fe <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005eda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d013      	beq.n	8005f0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ee6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005eea:	f003 0320 	and.w	r3, r3, #32
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d105      	bne.n	8005efe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d007      	beq.n	8005f0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f22:	2b40      	cmp	r3, #64	@ 0x40
 8005f24:	d005      	beq.n	8005f32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d02e      	beq.n	8005f90 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fe98 	bl	8006c68 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f42:	2b40      	cmp	r3, #64	@ 0x40
 8005f44:	d120      	bne.n	8005f88 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d017      	beq.n	8005f80 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f56:	4a15      	ldr	r2, [pc, #84]	@ (8005fac <HAL_UART_IRQHandler+0x274>)
 8005f58:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fb f9fb 	bl	800135c <HAL_DMA_Abort_IT>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d019      	beq.n	8005fa0 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7e:	e00f      	b.n	8005fa0 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f9d1 	bl	8006328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f86:	e00b      	b.n	8005fa0 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f9cd 	bl	8006328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f8e:	e007      	b.n	8005fa0 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f9c9 	bl	8006328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005f9e:	e1ae      	b.n	80062fe <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa0:	bf00      	nop
    return;
 8005fa2:	e1ac      	b.n	80062fe <HAL_UART_IRQHandler+0x5c6>
 8005fa4:	10000001 	.word	0x10000001
 8005fa8:	04000120 	.word	0x04000120
 8005fac:	08006d35 	.word	0x08006d35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	f040 8142 	bne.w	800623e <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005fba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005fbe:	f003 0310 	and.w	r3, r3, #16
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 813b 	beq.w	800623e <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005fc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005fcc:	f003 0310 	and.w	r3, r3, #16
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8134 	beq.w	800623e <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2210      	movs	r2, #16
 8005fdc:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe8:	2b40      	cmp	r3, #64	@ 0x40
 8005fea:	f040 80aa 	bne.w	8006142 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ff8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8005ffc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 8084 	beq.w	800610e <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800600c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8006010:	429a      	cmp	r2, r3
 8006012:	d27c      	bcs.n	800610e <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800601a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006026:	2b81      	cmp	r3, #129	@ 0x81
 8006028:	d060      	beq.n	80060ec <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006038:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800603a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800603e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800604c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006050:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006054:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800605e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e2      	bne.n	800602a <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3308      	adds	r3, #8
 800606a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006074:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006076:	f023 0301 	bic.w	r3, r3, #1
 800607a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3308      	adds	r3, #8
 8006084:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006088:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800608a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800608e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006096:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e3      	bne.n	8006064 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060ba:	f023 0310 	bic.w	r3, r3, #16
 80060be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060ce:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e4      	bne.n	80060aa <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fb f8bc 	bl	8001264 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80060fe:	b29b      	uxth	r3, r3
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	b29b      	uxth	r3, r3
 8006104:	4619      	mov	r1, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f918 	bl	800633c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800610c:	e0f9      	b.n	8006302 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006114:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8006118:	429a      	cmp	r2, r3
 800611a:	f040 80f2 	bne.w	8006302 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006126:	2b81      	cmp	r3, #129	@ 0x81
 8006128:	f040 80eb 	bne.w	8006302 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006138:	4619      	mov	r1, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f8fe 	bl	800633c <HAL_UARTEx_RxEventCallback>
      return;
 8006140:	e0df      	b.n	8006302 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800614e:	b29b      	uxth	r3, r3
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 80d1 	beq.w	8006306 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8006164:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 80cc 	beq.w	8006306 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006176:	e853 3f00 	ldrex	r3, [r3]
 800617a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800617c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800617e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006182:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006190:	647b      	str	r3, [r7, #68]	@ 0x44
 8006192:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006196:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006198:	e841 2300 	strex	r3, r2, [r1]
 800619c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800619e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e4      	bne.n	800616e <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3308      	adds	r3, #8
 80061aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	623b      	str	r3, [r7, #32]
   return(result);
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061ba:	f023 0301 	bic.w	r3, r3, #1
 80061be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3308      	adds	r3, #8
 80061c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80061cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80061ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061d4:	e841 2300 	strex	r3, r2, [r1]
 80061d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e1      	bne.n	80061a4 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	e853 3f00 	ldrex	r3, [r3]
 8006200:	60fb      	str	r3, [r7, #12]
   return(result);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f023 0310 	bic.w	r3, r3, #16
 8006208:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	461a      	mov	r2, r3
 8006212:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006216:	61fb      	str	r3, [r7, #28]
 8006218:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	69b9      	ldr	r1, [r7, #24]
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	e841 2300 	strex	r3, r2, [r1]
 8006222:	617b      	str	r3, [r7, #20]
   return(result);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e4      	bne.n	80061f4 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2202      	movs	r2, #2
 800622e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006230:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8006234:	4619      	mov	r1, r3
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f880 	bl	800633c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800623c:	e063      	b.n	8006306 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800623e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00e      	beq.n	8006268 <HAL_UART_IRQHandler+0x530>
 800624a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800624e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d008      	beq.n	8006268 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800625e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 fadd 	bl	8007820 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006266:	e051      	b.n	800630c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006268:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800626c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006270:	2b00      	cmp	r3, #0
 8006272:	d014      	beq.n	800629e <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006274:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800627c:	2b00      	cmp	r3, #0
 800627e:	d105      	bne.n	800628c <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006280:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006284:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006290:	2b00      	cmp	r3, #0
 8006292:	d03a      	beq.n	800630a <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	4798      	blx	r3
    }
    return;
 800629c:	e035      	b.n	800630a <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800629e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <HAL_UART_IRQHandler+0x586>
 80062aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80062ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fd4e 	bl	8006d58 <UART_EndTransmit_IT>
    return;
 80062bc:	e026      	b.n	800630c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80062be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d009      	beq.n	80062de <HAL_UART_IRQHandler+0x5a6>
 80062ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80062ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f001 fab6 	bl	8007848 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062dc:	e016      	b.n	800630c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80062de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d010      	beq.n	800630c <HAL_UART_IRQHandler+0x5d4>
 80062ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	da0c      	bge.n	800630c <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f001 fa9e 	bl	8007834 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062f8:	e008      	b.n	800630c <HAL_UART_IRQHandler+0x5d4>
      return;
 80062fa:	bf00      	nop
 80062fc:	e006      	b.n	800630c <HAL_UART_IRQHandler+0x5d4>
    return;
 80062fe:	bf00      	nop
 8006300:	e004      	b.n	800630c <HAL_UART_IRQHandler+0x5d4>
      return;
 8006302:	bf00      	nop
 8006304:	e002      	b.n	800630c <HAL_UART_IRQHandler+0x5d4>
      return;
 8006306:	bf00      	nop
 8006308:	e000      	b.n	800630c <HAL_UART_IRQHandler+0x5d4>
    return;
 800630a:	bf00      	nop
  }
}
 800630c:	37b8      	adds	r7, #184	@ 0xb8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop

08006314 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006358:	b094      	sub	sp, #80	@ 0x50
 800635a:	af00      	add	r7, sp, #0
 800635c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	4b83      	ldr	r3, [pc, #524]	@ (8006578 <UART_SetConfig+0x224>)
 800636a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800636c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	431a      	orrs	r2, r3
 8006376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	431a      	orrs	r2, r3
 800637c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	4313      	orrs	r3, r2
 8006382:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	497c      	ldr	r1, [pc, #496]	@ (800657c <UART_SetConfig+0x228>)
 800638c:	4019      	ands	r1, r3
 800638e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006394:	430b      	orrs	r3, r1
 8006396:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80063a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a4:	68d9      	ldr	r1, [r3, #12]
 80063a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	ea40 0301 	orr.w	r3, r0, r1
 80063ae:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	4b6f      	ldr	r3, [pc, #444]	@ (8006578 <UART_SetConfig+0x224>)
 80063bc:	429a      	cmp	r2, r3
 80063be:	d009      	beq.n	80063d4 <UART_SetConfig+0x80>
 80063c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	4b6e      	ldr	r3, [pc, #440]	@ (8006580 <UART_SetConfig+0x22c>)
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d004      	beq.n	80063d4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063cc:	6a1a      	ldr	r2, [r3, #32]
 80063ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063d0:	4313      	orrs	r3, r2
 80063d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80063de:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80063e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063e8:	430b      	orrs	r3, r1
 80063ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f2:	f023 000f 	bic.w	r0, r3, #15
 80063f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80063fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	ea40 0301 	orr.w	r3, r0, r1
 8006402:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	4b5e      	ldr	r3, [pc, #376]	@ (8006584 <UART_SetConfig+0x230>)
 800640a:	429a      	cmp	r2, r3
 800640c:	d102      	bne.n	8006414 <UART_SetConfig+0xc0>
 800640e:	2301      	movs	r3, #1
 8006410:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006412:	e032      	b.n	800647a <UART_SetConfig+0x126>
 8006414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	4b5b      	ldr	r3, [pc, #364]	@ (8006588 <UART_SetConfig+0x234>)
 800641a:	429a      	cmp	r2, r3
 800641c:	d102      	bne.n	8006424 <UART_SetConfig+0xd0>
 800641e:	2302      	movs	r3, #2
 8006420:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006422:	e02a      	b.n	800647a <UART_SetConfig+0x126>
 8006424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	4b58      	ldr	r3, [pc, #352]	@ (800658c <UART_SetConfig+0x238>)
 800642a:	429a      	cmp	r2, r3
 800642c:	d102      	bne.n	8006434 <UART_SetConfig+0xe0>
 800642e:	2304      	movs	r3, #4
 8006430:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006432:	e022      	b.n	800647a <UART_SetConfig+0x126>
 8006434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	4b55      	ldr	r3, [pc, #340]	@ (8006590 <UART_SetConfig+0x23c>)
 800643a:	429a      	cmp	r2, r3
 800643c:	d102      	bne.n	8006444 <UART_SetConfig+0xf0>
 800643e:	2308      	movs	r3, #8
 8006440:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006442:	e01a      	b.n	800647a <UART_SetConfig+0x126>
 8006444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	4b52      	ldr	r3, [pc, #328]	@ (8006594 <UART_SetConfig+0x240>)
 800644a:	429a      	cmp	r2, r3
 800644c:	d102      	bne.n	8006454 <UART_SetConfig+0x100>
 800644e:	2310      	movs	r3, #16
 8006450:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006452:	e012      	b.n	800647a <UART_SetConfig+0x126>
 8006454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	4b4f      	ldr	r3, [pc, #316]	@ (8006598 <UART_SetConfig+0x244>)
 800645a:	429a      	cmp	r2, r3
 800645c:	d102      	bne.n	8006464 <UART_SetConfig+0x110>
 800645e:	2320      	movs	r3, #32
 8006460:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006462:	e00a      	b.n	800647a <UART_SetConfig+0x126>
 8006464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	4b43      	ldr	r3, [pc, #268]	@ (8006578 <UART_SetConfig+0x224>)
 800646a:	429a      	cmp	r2, r3
 800646c:	d103      	bne.n	8006476 <UART_SetConfig+0x122>
 800646e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006474:	e001      	b.n	800647a <UART_SetConfig+0x126>
 8006476:	2300      	movs	r3, #0
 8006478:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800647a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	4b3e      	ldr	r3, [pc, #248]	@ (8006578 <UART_SetConfig+0x224>)
 8006480:	429a      	cmp	r2, r3
 8006482:	d005      	beq.n	8006490 <UART_SetConfig+0x13c>
 8006484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	4b3d      	ldr	r3, [pc, #244]	@ (8006580 <UART_SetConfig+0x22c>)
 800648a:	429a      	cmp	r2, r3
 800648c:	f040 8088 	bne.w	80065a0 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006490:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006492:	2200      	movs	r2, #0
 8006494:	623b      	str	r3, [r7, #32]
 8006496:	627a      	str	r2, [r7, #36]	@ 0x24
 8006498:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800649c:	f7fd fe7c 	bl	8004198 <HAL_RCCEx_GetPeriphCLKFreq>
 80064a0:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80064a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 80eb 	beq.w	8006680 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ae:	4a3b      	ldr	r2, [pc, #236]	@ (800659c <UART_SetConfig+0x248>)
 80064b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064b4:	461a      	mov	r2, r3
 80064b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80064bc:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	4613      	mov	r3, r2
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	4413      	add	r3, r2
 80064c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d305      	bcc.n	80064da <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d903      	bls.n	80064e2 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80064e0:	e048      	b.n	8006574 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064e4:	2200      	movs	r2, #0
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	61fa      	str	r2, [r7, #28]
 80064ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ee:	4a2b      	ldr	r2, [pc, #172]	@ (800659c <UART_SetConfig+0x248>)
 80064f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	2200      	movs	r2, #0
 80064f8:	613b      	str	r3, [r7, #16]
 80064fa:	617a      	str	r2, [r7, #20]
 80064fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006500:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006504:	f7f9 fece 	bl	80002a4 <__aeabi_uldivmod>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4610      	mov	r0, r2
 800650e:	4619      	mov	r1, r3
 8006510:	f04f 0200 	mov.w	r2, #0
 8006514:	f04f 0300 	mov.w	r3, #0
 8006518:	020b      	lsls	r3, r1, #8
 800651a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800651e:	0202      	lsls	r2, r0, #8
 8006520:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006522:	6849      	ldr	r1, [r1, #4]
 8006524:	0849      	lsrs	r1, r1, #1
 8006526:	2000      	movs	r0, #0
 8006528:	460c      	mov	r4, r1
 800652a:	4605      	mov	r5, r0
 800652c:	eb12 0804 	adds.w	r8, r2, r4
 8006530:	eb43 0905 	adc.w	r9, r3, r5
 8006534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	60bb      	str	r3, [r7, #8]
 800653c:	60fa      	str	r2, [r7, #12]
 800653e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006542:	4640      	mov	r0, r8
 8006544:	4649      	mov	r1, r9
 8006546:	f7f9 fead 	bl	80002a4 <__aeabi_uldivmod>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4613      	mov	r3, r2
 8006550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006554:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006558:	d308      	bcc.n	800656c <UART_SetConfig+0x218>
 800655a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800655c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006560:	d204      	bcs.n	800656c <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8006562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006568:	60da      	str	r2, [r3, #12]
 800656a:	e003      	b.n	8006574 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8006572:	e085      	b.n	8006680 <UART_SetConfig+0x32c>
 8006574:	e084      	b.n	8006680 <UART_SetConfig+0x32c>
 8006576:	bf00      	nop
 8006578:	44002400 	.word	0x44002400
 800657c:	cfff69f3 	.word	0xcfff69f3
 8006580:	54002400 	.word	0x54002400
 8006584:	40013800 	.word	0x40013800
 8006588:	40004400 	.word	0x40004400
 800658c:	40004800 	.word	0x40004800
 8006590:	40004c00 	.word	0x40004c00
 8006594:	40005000 	.word	0x40005000
 8006598:	40006400 	.word	0x40006400
 800659c:	08008518 	.word	0x08008518
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065a8:	d13c      	bne.n	8006624 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80065aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065ac:	2200      	movs	r2, #0
 80065ae:	603b      	str	r3, [r7, #0]
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065b6:	f7fd fdef 	bl	8004198 <HAL_RCCEx_GetPeriphCLKFreq>
 80065ba:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d05e      	beq.n	8006680 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c6:	4a39      	ldr	r2, [pc, #228]	@ (80066ac <UART_SetConfig+0x358>)
 80065c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065cc:	461a      	mov	r2, r3
 80065ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80065d4:	005a      	lsls	r2, r3, #1
 80065d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	085b      	lsrs	r3, r3, #1
 80065dc:	441a      	add	r2, r3
 80065de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ea:	2b0f      	cmp	r3, #15
 80065ec:	d916      	bls.n	800661c <UART_SetConfig+0x2c8>
 80065ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f4:	d212      	bcs.n	800661c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	f023 030f 	bic.w	r3, r3, #15
 80065fe:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006602:	085b      	lsrs	r3, r3, #1
 8006604:	b29b      	uxth	r3, r3
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	b29a      	uxth	r2, r3
 800660c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800660e:	4313      	orrs	r3, r2
 8006610:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8006612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006618:	60da      	str	r2, [r3, #12]
 800661a:	e031      	b.n	8006680 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006622:	e02d      	b.n	8006680 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006624:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006626:	2200      	movs	r2, #0
 8006628:	469a      	mov	sl, r3
 800662a:	4693      	mov	fp, r2
 800662c:	4650      	mov	r0, sl
 800662e:	4659      	mov	r1, fp
 8006630:	f7fd fdb2 	bl	8004198 <HAL_RCCEx_GetPeriphCLKFreq>
 8006634:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8006636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006638:	2b00      	cmp	r3, #0
 800663a:	d021      	beq.n	8006680 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800663c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006640:	4a1a      	ldr	r2, [pc, #104]	@ (80066ac <UART_SetConfig+0x358>)
 8006642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006646:	461a      	mov	r2, r3
 8006648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800664a:	fbb3 f2f2 	udiv	r2, r3, r2
 800664e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	085b      	lsrs	r3, r3, #1
 8006654:	441a      	add	r2, r3
 8006656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	fbb2 f3f3 	udiv	r3, r2, r3
 800665e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006662:	2b0f      	cmp	r3, #15
 8006664:	d909      	bls.n	800667a <UART_SetConfig+0x326>
 8006666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800666c:	d205      	bcs.n	800667a <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800666e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006670:	b29a      	uxth	r2, r3
 8006672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	60da      	str	r2, [r3, #12]
 8006678:	e002      	b.n	8006680 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006682:	2201      	movs	r2, #1
 8006684:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668a:	2201      	movs	r2, #1
 800668c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006692:	2200      	movs	r2, #0
 8006694:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006698:	2200      	movs	r2, #0
 800669a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800669c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3750      	adds	r7, #80	@ 0x50
 80066a4:	46bd      	mov	sp, r7
 80066a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066aa:	bf00      	nop
 80066ac:	08008518 	.word	0x08008518

080066b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00a      	beq.n	8006762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	430a      	orrs	r2, r1
 8006782:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d01a      	beq.n	80067c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067ae:	d10a      	bne.n	80067c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	605a      	str	r2, [r3, #4]
  }
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b098      	sub	sp, #96	@ 0x60
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006804:	f7fa fb92 	bl	8000f2c <HAL_GetTick>
 8006808:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b08      	cmp	r3, #8
 8006816:	d12f      	bne.n	8006878 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006818:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006820:	2200      	movs	r2, #0
 8006822:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f88e 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d022      	beq.n	8006878 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006842:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006846:	653b      	str	r3, [r7, #80]	@ 0x50
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006850:	647b      	str	r3, [r7, #68]	@ 0x44
 8006852:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800685e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e6      	bne.n	8006832 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2220      	movs	r2, #32
 8006868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e063      	b.n	8006940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b04      	cmp	r3, #4
 8006884:	d149      	bne.n	800691a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006886:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800688e:	2200      	movs	r2, #0
 8006890:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f857 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d03c      	beq.n	800691a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	623b      	str	r3, [r7, #32]
   return(result);
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068be:	633b      	str	r3, [r7, #48]	@ 0x30
 80068c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e6      	bne.n	80068a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3308      	adds	r3, #8
 80068d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f023 0301 	bic.w	r3, r3, #1
 80068e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3308      	adds	r3, #8
 80068f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068f2:	61fa      	str	r2, [r7, #28]
 80068f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	69b9      	ldr	r1, [r7, #24]
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e5      	bne.n	80068d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2220      	movs	r2, #32
 800690a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e012      	b.n	8006940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3758      	adds	r7, #88	@ 0x58
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	603b      	str	r3, [r7, #0]
 8006954:	4613      	mov	r3, r2
 8006956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006958:	e04f      	b.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006960:	d04b      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006962:	f7fa fae3 	bl	8000f2c <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	429a      	cmp	r2, r3
 8006970:	d302      	bcc.n	8006978 <UART_WaitOnFlagUntilTimeout+0x30>
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e04e      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	2b00      	cmp	r3, #0
 8006988:	d037      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b80      	cmp	r3, #128	@ 0x80
 800698e:	d034      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b40      	cmp	r3, #64	@ 0x40
 8006994:	d031      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d110      	bne.n	80069c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2208      	movs	r2, #8
 80069aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 f95b 	bl	8006c68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2208      	movs	r2, #8
 80069b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e029      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069d4:	d111      	bne.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f941 	bl	8006c68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e00f      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4013      	ands	r3, r2
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	bf0c      	ite	eq
 8006a0a:	2301      	moveq	r3, #1
 8006a0c:	2300      	movne	r3, #0
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d0a0      	beq.n	800695a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b0a3      	sub	sp, #140	@ 0x8c
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	88fa      	ldrh	r2, [r7, #6]
 8006a3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	88fa      	ldrh	r2, [r7, #6]
 8006a44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a56:	d10e      	bne.n	8006a76 <UART_Start_Receive_IT+0x52>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d105      	bne.n	8006a6c <UART_Start_Receive_IT+0x48>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006a66:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a6a:	e02d      	b.n	8006ac8 <UART_Start_Receive_IT+0xa4>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	22ff      	movs	r2, #255	@ 0xff
 8006a70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a74:	e028      	b.n	8006ac8 <UART_Start_Receive_IT+0xa4>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10d      	bne.n	8006a9a <UART_Start_Receive_IT+0x76>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d104      	bne.n	8006a90 <UART_Start_Receive_IT+0x6c>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	22ff      	movs	r2, #255	@ 0xff
 8006a8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a8e:	e01b      	b.n	8006ac8 <UART_Start_Receive_IT+0xa4>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	227f      	movs	r2, #127	@ 0x7f
 8006a94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a98:	e016      	b.n	8006ac8 <UART_Start_Receive_IT+0xa4>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006aa2:	d10d      	bne.n	8006ac0 <UART_Start_Receive_IT+0x9c>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d104      	bne.n	8006ab6 <UART_Start_Receive_IT+0x92>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	227f      	movs	r2, #127	@ 0x7f
 8006ab0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ab4:	e008      	b.n	8006ac8 <UART_Start_Receive_IT+0xa4>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	223f      	movs	r2, #63	@ 0x3f
 8006aba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006abe:	e003      	b.n	8006ac8 <UART_Start_Receive_IT+0xa4>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2222      	movs	r2, #34	@ 0x22
 8006ad4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ae2:	e853 3f00 	ldrex	r3, [r3]
 8006ae6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006ae8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006aea:	f043 0301 	orr.w	r3, r3, #1
 8006aee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3308      	adds	r3, #8
 8006af8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006afc:	673a      	str	r2, [r7, #112]	@ 0x70
 8006afe:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006b02:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006b04:	e841 2300 	strex	r3, r2, [r1]
 8006b08:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006b0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e3      	bne.n	8006ad8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b18:	d14f      	bne.n	8006bba <UART_Start_Receive_IT+0x196>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006b20:	88fa      	ldrh	r2, [r7, #6]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d349      	bcc.n	8006bba <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b2e:	d107      	bne.n	8006b40 <UART_Start_Receive_IT+0x11c>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d103      	bne.n	8006b40 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4a47      	ldr	r2, [pc, #284]	@ (8006c58 <UART_Start_Receive_IT+0x234>)
 8006b3c:	675a      	str	r2, [r3, #116]	@ 0x74
 8006b3e:	e002      	b.n	8006b46 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4a46      	ldr	r2, [pc, #280]	@ (8006c5c <UART_Start_Receive_IT+0x238>)
 8006b44:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d01a      	beq.n	8006b84 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006b5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b72:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006b76:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006b78:	e841 2300 	strex	r3, r2, [r1]
 8006b7c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e4      	bne.n	8006b4e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3308      	adds	r3, #8
 8006b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b8e:	e853 3f00 	ldrex	r3, [r3]
 8006b92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3308      	adds	r3, #8
 8006ba2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006ba4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006ba6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006baa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e5      	bne.n	8006b84 <UART_Start_Receive_IT+0x160>
 8006bb8:	e046      	b.n	8006c48 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bc2:	d107      	bne.n	8006bd4 <UART_Start_Receive_IT+0x1b0>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d103      	bne.n	8006bd4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4a24      	ldr	r2, [pc, #144]	@ (8006c60 <UART_Start_Receive_IT+0x23c>)
 8006bd0:	675a      	str	r2, [r3, #116]	@ 0x74
 8006bd2:	e002      	b.n	8006bda <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4a23      	ldr	r2, [pc, #140]	@ (8006c64 <UART_Start_Receive_IT+0x240>)
 8006bd8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d019      	beq.n	8006c16 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006bf6:	677b      	str	r3, [r7, #116]	@ 0x74
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c02:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e6      	bne.n	8006be2 <UART_Start_Receive_IT+0x1be>
 8006c14:	e018      	b.n	8006c48 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	613b      	str	r3, [r7, #16]
   return(result);
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f043 0320 	orr.w	r3, r3, #32
 8006c2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	461a      	mov	r2, r3
 8006c32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c34:	623b      	str	r3, [r7, #32]
 8006c36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	69f9      	ldr	r1, [r7, #28]
 8006c3a:	6a3a      	ldr	r2, [r7, #32]
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e6      	bne.n	8006c16 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	378c      	adds	r7, #140	@ 0x8c
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	080074a9 	.word	0x080074a9
 8006c5c:	08007139 	.word	0x08007139
 8006c60:	08006f75 	.word	0x08006f75
 8006c64:	08006db1 	.word	0x08006db1

08006c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b095      	sub	sp, #84	@ 0x54
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c90:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c96:	e841 2300 	strex	r3, r2, [r1]
 8006c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e6      	bne.n	8006c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cb8:	f023 0301 	bic.w	r3, r3, #1
 8006cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3308      	adds	r3, #8
 8006cc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e3      	bne.n	8006ca2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d118      	bne.n	8006d14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	e853 3f00 	ldrex	r3, [r3]
 8006cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f023 0310 	bic.w	r3, r3, #16
 8006cf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d00:	61bb      	str	r3, [r7, #24]
 8006d02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	6979      	ldr	r1, [r7, #20]
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e6      	bne.n	8006ce2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006d28:	bf00      	nop
 8006d2a:	3754      	adds	r7, #84	@ 0x54
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f7ff faec 	bl	8006328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d50:	bf00      	nop
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b088      	sub	sp, #32
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	e853 3f00 	ldrex	r3, [r3]
 8006d6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d74:	61fb      	str	r3, [r7, #28]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	61bb      	str	r3, [r7, #24]
 8006d80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	6979      	ldr	r1, [r7, #20]
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e6      	bne.n	8006d60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7ff fab7 	bl	8006314 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006da6:	bf00      	nop
 8006da8:	3720      	adds	r7, #32
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b09c      	sub	sp, #112	@ 0x70
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006dbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006dc8:	2b22      	cmp	r3, #34	@ 0x22
 8006dca:	f040 80c3 	bne.w	8006f54 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006dd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006ddc:	b2d9      	uxtb	r1, r3
 8006dde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de8:	400a      	ands	r2, r1
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	3b01      	subs	r3, #1
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f040 80a6 	bne.w	8006f64 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e3e:	e841 2300 	strex	r3, r2, [r1]
 8006e42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e6      	bne.n	8006e18 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3308      	adds	r3, #8
 8006e50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e54:	e853 3f00 	ldrex	r3, [r3]
 8006e58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e5c:	f023 0301 	bic.w	r3, r3, #1
 8006e60:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3308      	adds	r3, #8
 8006e68:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006e6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e5      	bne.n	8006e4a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a35      	ldr	r2, [pc, #212]	@ (8006f6c <UART_RxISR_8BIT+0x1bc>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d024      	beq.n	8006ee6 <UART_RxISR_8BIT+0x136>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a33      	ldr	r2, [pc, #204]	@ (8006f70 <UART_RxISR_8BIT+0x1c0>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d01f      	beq.n	8006ee6 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d018      	beq.n	8006ee6 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ec8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ed2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ed4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e6      	bne.n	8006eb4 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d12e      	bne.n	8006f4c <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f023 0310 	bic.w	r3, r3, #16
 8006f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f12:	61fb      	str	r3, [r7, #28]
 8006f14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	69b9      	ldr	r1, [r7, #24]
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	617b      	str	r3, [r7, #20]
   return(result);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e6      	bne.n	8006ef4 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	f003 0310 	and.w	r3, r3, #16
 8006f30:	2b10      	cmp	r3, #16
 8006f32:	d103      	bne.n	8006f3c <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2210      	movs	r2, #16
 8006f3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff f9f9 	bl	800633c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f4a:	e00b      	b.n	8006f64 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7f9 fb67 	bl	8000620 <HAL_UART_RxCpltCallback>
}
 8006f52:	e007      	b.n	8006f64 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	699a      	ldr	r2, [r3, #24]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0208 	orr.w	r2, r2, #8
 8006f62:	619a      	str	r2, [r3, #24]
}
 8006f64:	bf00      	nop
 8006f66:	3770      	adds	r7, #112	@ 0x70
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	44002400 	.word	0x44002400
 8006f70:	54002400 	.word	0x54002400

08006f74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b09c      	sub	sp, #112	@ 0x70
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006f82:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f8c:	2b22      	cmp	r3, #34	@ 0x22
 8006f8e:	f040 80c3 	bne.w	8007118 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006fa2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006fa6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006faa:	4013      	ands	r3, r2
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fb0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb6:	1c9a      	adds	r2, r3, #2
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f040 80a6 	bne.w	8007128 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006fea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ff0:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ffa:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ffc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007000:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e6      	bne.n	8006fdc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3308      	adds	r3, #8
 8007014:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800701e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007020:	f023 0301 	bic.w	r3, r3, #1
 8007024:	663b      	str	r3, [r7, #96]	@ 0x60
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3308      	adds	r3, #8
 800702c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800702e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007034:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800703c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e5      	bne.n	800700e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2220      	movs	r2, #32
 8007046:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a35      	ldr	r2, [pc, #212]	@ (8007130 <UART_RxISR_16BIT+0x1bc>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d024      	beq.n	80070aa <UART_RxISR_16BIT+0x136>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a33      	ldr	r2, [pc, #204]	@ (8007134 <UART_RxISR_16BIT+0x1c0>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d01f      	beq.n	80070aa <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d018      	beq.n	80070aa <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	e853 3f00 	ldrex	r3, [r3]
 8007084:	61fb      	str	r3, [r7, #28]
   return(result);
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800708c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007098:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800709c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800709e:	e841 2300 	strex	r3, r2, [r1]
 80070a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1e6      	bne.n	8007078 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d12e      	bne.n	8007110 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	f023 0310 	bic.w	r3, r3, #16
 80070cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070d6:	61bb      	str	r3, [r7, #24]
 80070d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	6979      	ldr	r1, [r7, #20]
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	613b      	str	r3, [r7, #16]
   return(result);
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e6      	bne.n	80070b8 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	f003 0310 	and.w	r3, r3, #16
 80070f4:	2b10      	cmp	r3, #16
 80070f6:	d103      	bne.n	8007100 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2210      	movs	r2, #16
 80070fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff f917 	bl	800633c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800710e:	e00b      	b.n	8007128 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7f9 fa85 	bl	8000620 <HAL_UART_RxCpltCallback>
}
 8007116:	e007      	b.n	8007128 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	699a      	ldr	r2, [r3, #24]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0208 	orr.w	r2, r2, #8
 8007126:	619a      	str	r2, [r3, #24]
}
 8007128:	bf00      	nop
 800712a:	3770      	adds	r7, #112	@ 0x70
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	44002400 	.word	0x44002400
 8007134:	54002400 	.word	0x54002400

08007138 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b0ac      	sub	sp, #176	@ 0xb0
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007146:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800716e:	2b22      	cmp	r3, #34	@ 0x22
 8007170:	f040 8188 	bne.w	8007484 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800717a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800717e:	e12b      	b.n	80073d8 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007186:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800718a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800718e:	b2d9      	uxtb	r1, r3
 8007190:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007194:	b2da      	uxtb	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800719a:	400a      	ands	r2, r1
 800719c:	b2d2      	uxtb	r2, r2
 800719e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a4:	1c5a      	adds	r2, r3, #1
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	3b01      	subs	r3, #1
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80071c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d053      	beq.n	800727a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d011      	beq.n	8007202 <UART_RxISR_8BIT_FIFOEN+0xca>
 80071de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80071e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00b      	beq.n	8007202 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2201      	movs	r2, #1
 80071f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071f8:	f043 0201 	orr.w	r2, r3, #1
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	2b00      	cmp	r3, #0
 800720c:	d011      	beq.n	8007232 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800720e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00b      	beq.n	8007232 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2202      	movs	r2, #2
 8007220:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007228:	f043 0204 	orr.w	r2, r3, #4
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007236:	f003 0304 	and.w	r3, r3, #4
 800723a:	2b00      	cmp	r3, #0
 800723c:	d011      	beq.n	8007262 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800723e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2204      	movs	r2, #4
 8007250:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007258:	f043 0202 	orr.w	r2, r3, #2
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007268:	2b00      	cmp	r3, #0
 800726a:	d006      	beq.n	800727a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7ff f85b 	bl	8006328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	f040 80a8 	bne.w	80073d8 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800729c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	461a      	mov	r2, r3
 80072a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80072ac:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80072b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80072b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e4      	bne.n	8007288 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3308      	adds	r3, #8
 80072c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80072ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072d4:	f023 0301 	bic.w	r3, r3, #1
 80072d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3308      	adds	r3, #8
 80072e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80072e6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80072e8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80072ec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80072f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e1      	bne.n	80072be <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2220      	movs	r2, #32
 80072fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a62      	ldr	r2, [pc, #392]	@ (800749c <UART_RxISR_8BIT_FIFOEN+0x364>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d026      	beq.n	8007366 <UART_RxISR_8BIT_FIFOEN+0x22e>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a60      	ldr	r2, [pc, #384]	@ (80074a0 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d021      	beq.n	8007366 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01a      	beq.n	8007366 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800733e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007340:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007344:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	461a      	mov	r2, r3
 800734e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007352:	657b      	str	r3, [r7, #84]	@ 0x54
 8007354:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007358:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e4      	bne.n	8007330 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800736a:	2b01      	cmp	r3, #1
 800736c:	d130      	bne.n	80073d0 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800737c:	e853 3f00 	ldrex	r3, [r3]
 8007380:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007384:	f023 0310 	bic.w	r3, r3, #16
 8007388:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	461a      	mov	r2, r3
 8007392:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007396:	643b      	str	r3, [r7, #64]	@ 0x40
 8007398:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800739c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e4      	bne.n	8007374 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b10      	cmp	r3, #16
 80073b6:	d103      	bne.n	80073c0 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2210      	movs	r2, #16
 80073be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7fe ffb7 	bl	800633c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80073ce:	e00e      	b.n	80073ee <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7f9 f925 	bl	8000620 <HAL_UART_RxCpltCallback>
        break;
 80073d6:	e00a      	b.n	80073ee <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073d8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d006      	beq.n	80073ee <UART_RxISR_8BIT_FIFOEN+0x2b6>
 80073e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073e4:	f003 0320 	and.w	r3, r3, #32
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f47f aec9 	bne.w	8007180 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073f4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80073f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d049      	beq.n	8007494 <UART_RxISR_8BIT_FIFOEN+0x35c>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007406:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800740a:	429a      	cmp	r2, r3
 800740c:	d242      	bcs.n	8007494 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3308      	adds	r3, #8
 8007414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	61fb      	str	r3, [r7, #28]
   return(result);
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007424:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3308      	adds	r3, #8
 800742e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007432:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007434:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007438:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800743a:	e841 2300 	strex	r3, r2, [r1]
 800743e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e3      	bne.n	800740e <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a16      	ldr	r2, [pc, #88]	@ (80074a4 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800744a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	60bb      	str	r3, [r7, #8]
   return(result);
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f043 0320 	orr.w	r3, r3, #32
 8007460:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800746e:	61bb      	str	r3, [r7, #24]
 8007470:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007472:	6979      	ldr	r1, [r7, #20]
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	e841 2300 	strex	r3, r2, [r1]
 800747a:	613b      	str	r3, [r7, #16]
   return(result);
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1e4      	bne.n	800744c <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007482:	e007      	b.n	8007494 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	699a      	ldr	r2, [r3, #24]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0208 	orr.w	r2, r2, #8
 8007492:	619a      	str	r2, [r3, #24]
}
 8007494:	bf00      	nop
 8007496:	37b0      	adds	r7, #176	@ 0xb0
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	44002400 	.word	0x44002400
 80074a0:	54002400 	.word	0x54002400
 80074a4:	08006db1 	.word	0x08006db1

080074a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b0ae      	sub	sp, #184	@ 0xb8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80074b6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	69db      	ldr	r3, [r3, #28]
 80074c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074de:	2b22      	cmp	r3, #34	@ 0x22
 80074e0:	f040 818c 	bne.w	80077fc <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80074ea:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80074ee:	e12f      	b.n	8007750 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007502:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007506:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800750a:	4013      	ands	r3, r2
 800750c:	b29a      	uxth	r2, r3
 800750e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007512:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007518:	1c9a      	adds	r2, r3, #2
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007524:	b29b      	uxth	r3, r3
 8007526:	3b01      	subs	r3, #1
 8007528:	b29a      	uxth	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	69db      	ldr	r3, [r3, #28]
 8007536:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800753a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	2b00      	cmp	r3, #0
 8007544:	d053      	beq.n	80075ee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007546:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d011      	beq.n	8007576 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00b      	beq.n	8007576 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2201      	movs	r2, #1
 8007564:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800756c:	f043 0201 	orr.w	r2, r3, #1
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007576:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800757a:	f003 0302 	and.w	r3, r3, #2
 800757e:	2b00      	cmp	r3, #0
 8007580:	d011      	beq.n	80075a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007582:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00b      	beq.n	80075a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2202      	movs	r2, #2
 8007594:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800759c:	f043 0204 	orr.w	r2, r3, #4
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075aa:	f003 0304 	and.w	r3, r3, #4
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d011      	beq.n	80075d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80075b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00b      	beq.n	80075d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2204      	movs	r2, #4
 80075c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075cc:	f043 0202 	orr.w	r2, r3, #2
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d006      	beq.n	80075ee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7fe fea1 	bl	8006328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f040 80aa 	bne.w	8007750 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007602:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800760a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800760c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007610:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800761e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007622:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007626:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800762a:	e841 2300 	strex	r3, r2, [r1]
 800762e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007630:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1e2      	bne.n	80075fc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3308      	adds	r3, #8
 800763c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007640:	e853 3f00 	ldrex	r3, [r3]
 8007644:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007648:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800764c:	f023 0301 	bic.w	r3, r3, #1
 8007650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3308      	adds	r3, #8
 800765a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800765e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007660:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007662:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007664:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800766c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1e1      	bne.n	8007636 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2220      	movs	r2, #32
 8007676:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a62      	ldr	r2, [pc, #392]	@ (8007814 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d026      	beq.n	80076de <UART_RxISR_16BIT_FIFOEN+0x236>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a60      	ldr	r2, [pc, #384]	@ (8007818 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d021      	beq.n	80076de <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01a      	beq.n	80076de <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80076bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80076ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e4      	bne.n	80076a8 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d130      	bne.n	8007748 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f4:	e853 3f00 	ldrex	r3, [r3]
 80076f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076fc:	f023 0310 	bic.w	r3, r3, #16
 8007700:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800770e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007710:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007714:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800771c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e4      	bne.n	80076ec <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	f003 0310 	and.w	r3, r3, #16
 800772c:	2b10      	cmp	r3, #16
 800772e:	d103      	bne.n	8007738 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2210      	movs	r2, #16
 8007736:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800773e:	4619      	mov	r1, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7fe fdfb 	bl	800633c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007746:	e00e      	b.n	8007766 <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7f8 ff69 	bl	8000620 <HAL_UART_RxCpltCallback>
        break;
 800774e:	e00a      	b.n	8007766 <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007750:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007754:	2b00      	cmp	r3, #0
 8007756:	d006      	beq.n	8007766 <UART_RxISR_16BIT_FIFOEN+0x2be>
 8007758:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800775c:	f003 0320 	and.w	r3, r3, #32
 8007760:	2b00      	cmp	r3, #0
 8007762:	f47f aec5 	bne.w	80074f0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800776c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007770:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007774:	2b00      	cmp	r3, #0
 8007776:	d049      	beq.n	800780c <UART_RxISR_16BIT_FIFOEN+0x364>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800777e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007782:	429a      	cmp	r2, r3
 8007784:	d242      	bcs.n	800780c <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3308      	adds	r3, #8
 800778c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007790:	e853 3f00 	ldrex	r3, [r3]
 8007794:	623b      	str	r3, [r7, #32]
   return(result);
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800779c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3308      	adds	r3, #8
 80077a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80077aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80077ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e3      	bne.n	8007786 <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a16      	ldr	r2, [pc, #88]	@ (800781c <UART_RxISR_16BIT_FIFOEN+0x374>)
 80077c2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f043 0320 	orr.w	r3, r3, #32
 80077d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	461a      	mov	r2, r3
 80077e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077e6:	61fb      	str	r3, [r7, #28]
 80077e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ea:	69b9      	ldr	r1, [r7, #24]
 80077ec:	69fa      	ldr	r2, [r7, #28]
 80077ee:	e841 2300 	strex	r3, r2, [r1]
 80077f2:	617b      	str	r3, [r7, #20]
   return(result);
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1e4      	bne.n	80077c4 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077fa:	e007      	b.n	800780c <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699a      	ldr	r2, [r3, #24]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 0208 	orr.w	r2, r2, #8
 800780a:	619a      	str	r2, [r3, #24]
}
 800780c:	bf00      	nop
 800780e:	37b8      	adds	r7, #184	@ 0xb8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	44002400 	.word	0x44002400
 8007818:	54002400 	.word	0x54002400
 800781c:	08006f75 	.word	0x08006f75

08007820 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800786a:	2b01      	cmp	r3, #1
 800786c:	d101      	bne.n	8007872 <HAL_UARTEx_DisableFifoMode+0x16>
 800786e:	2302      	movs	r3, #2
 8007870:	e027      	b.n	80078c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2224      	movs	r2, #36	@ 0x24
 800787e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0201 	bic.w	r2, r2, #1
 8007898:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80078a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d101      	bne.n	80078e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078e2:	2302      	movs	r3, #2
 80078e4:	e02d      	b.n	8007942 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2224      	movs	r2, #36	@ 0x24
 80078f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f022 0201 	bic.w	r2, r2, #1
 800790c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f850 	bl	80079c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2220      	movs	r2, #32
 8007934:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800795a:	2b01      	cmp	r3, #1
 800795c:	d101      	bne.n	8007962 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800795e:	2302      	movs	r3, #2
 8007960:	e02d      	b.n	80079be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2224      	movs	r2, #36	@ 0x24
 800796e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f022 0201 	bic.w	r2, r2, #1
 8007988:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f812 	bl	80079c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d108      	bne.n	80079ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079e8:	e031      	b.n	8007a4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079ea:	2308      	movs	r3, #8
 80079ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079ee:	2308      	movs	r3, #8
 80079f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	0e5b      	lsrs	r3, r3, #25
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	f003 0307 	and.w	r3, r3, #7
 8007a00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	0f5b      	lsrs	r3, r3, #29
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	f003 0307 	and.w	r3, r3, #7
 8007a10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	7b3a      	ldrb	r2, [r7, #12]
 8007a16:	4911      	ldr	r1, [pc, #68]	@ (8007a5c <UARTEx_SetNbDataToProcess+0x94>)
 8007a18:	5c8a      	ldrb	r2, [r1, r2]
 8007a1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a1e:	7b3a      	ldrb	r2, [r7, #12]
 8007a20:	490f      	ldr	r1, [pc, #60]	@ (8007a60 <UARTEx_SetNbDataToProcess+0x98>)
 8007a22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a24:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
 8007a32:	7b7a      	ldrb	r2, [r7, #13]
 8007a34:	4909      	ldr	r1, [pc, #36]	@ (8007a5c <UARTEx_SetNbDataToProcess+0x94>)
 8007a36:	5c8a      	ldrb	r2, [r1, r2]
 8007a38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a3c:	7b7a      	ldrb	r2, [r7, #13]
 8007a3e:	4908      	ldr	r1, [pc, #32]	@ (8007a60 <UARTEx_SetNbDataToProcess+0x98>)
 8007a40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a42:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007a4e:	bf00      	nop
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	08008530 	.word	0x08008530
 8007a60:	08008538 	.word	0x08008538

08007a64 <atoi>:
 8007a64:	220a      	movs	r2, #10
 8007a66:	2100      	movs	r1, #0
 8007a68:	f000 b89c 	b.w	8007ba4 <strtol>

08007a6c <siprintf>:
 8007a6c:	b40e      	push	{r1, r2, r3}
 8007a6e:	b510      	push	{r4, lr}
 8007a70:	b09d      	sub	sp, #116	@ 0x74
 8007a72:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a76:	2400      	movs	r4, #0
 8007a78:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007a7a:	9002      	str	r0, [sp, #8]
 8007a7c:	9006      	str	r0, [sp, #24]
 8007a7e:	9107      	str	r1, [sp, #28]
 8007a80:	9104      	str	r1, [sp, #16]
 8007a82:	4809      	ldr	r0, [pc, #36]	@ (8007aa8 <siprintf+0x3c>)
 8007a84:	4909      	ldr	r1, [pc, #36]	@ (8007aac <siprintf+0x40>)
 8007a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a8a:	9105      	str	r1, [sp, #20]
 8007a8c:	a902      	add	r1, sp, #8
 8007a8e:	6800      	ldr	r0, [r0, #0]
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007a94:	f000 f920 	bl	8007cd8 <_svfiprintf_r>
 8007a98:	9b02      	ldr	r3, [sp, #8]
 8007a9a:	701c      	strb	r4, [r3, #0]
 8007a9c:	b01d      	add	sp, #116	@ 0x74
 8007a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aa2:	b003      	add	sp, #12
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	2000000c 	.word	0x2000000c
 8007aac:	ffff0208 	.word	0xffff0208

08007ab0 <_strtol_l.isra.0>:
 8007ab0:	2b24      	cmp	r3, #36	@ 0x24
 8007ab2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab6:	4686      	mov	lr, r0
 8007ab8:	4690      	mov	r8, r2
 8007aba:	d801      	bhi.n	8007ac0 <_strtol_l.isra.0+0x10>
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d106      	bne.n	8007ace <_strtol_l.isra.0+0x1e>
 8007ac0:	f000 f882 	bl	8007bc8 <__errno>
 8007ac4:	2316      	movs	r3, #22
 8007ac6:	6003      	str	r3, [r0, #0]
 8007ac8:	2000      	movs	r0, #0
 8007aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ace:	460d      	mov	r5, r1
 8007ad0:	4833      	ldr	r0, [pc, #204]	@ (8007ba0 <_strtol_l.isra.0+0xf0>)
 8007ad2:	462a      	mov	r2, r5
 8007ad4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ad8:	5d06      	ldrb	r6, [r0, r4]
 8007ada:	f016 0608 	ands.w	r6, r6, #8
 8007ade:	d1f8      	bne.n	8007ad2 <_strtol_l.isra.0+0x22>
 8007ae0:	2c2d      	cmp	r4, #45	@ 0x2d
 8007ae2:	d110      	bne.n	8007b06 <_strtol_l.isra.0+0x56>
 8007ae4:	782c      	ldrb	r4, [r5, #0]
 8007ae6:	2601      	movs	r6, #1
 8007ae8:	1c95      	adds	r5, r2, #2
 8007aea:	f033 0210 	bics.w	r2, r3, #16
 8007aee:	d115      	bne.n	8007b1c <_strtol_l.isra.0+0x6c>
 8007af0:	2c30      	cmp	r4, #48	@ 0x30
 8007af2:	d10d      	bne.n	8007b10 <_strtol_l.isra.0+0x60>
 8007af4:	782a      	ldrb	r2, [r5, #0]
 8007af6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007afa:	2a58      	cmp	r2, #88	@ 0x58
 8007afc:	d108      	bne.n	8007b10 <_strtol_l.isra.0+0x60>
 8007afe:	786c      	ldrb	r4, [r5, #1]
 8007b00:	3502      	adds	r5, #2
 8007b02:	2310      	movs	r3, #16
 8007b04:	e00a      	b.n	8007b1c <_strtol_l.isra.0+0x6c>
 8007b06:	2c2b      	cmp	r4, #43	@ 0x2b
 8007b08:	bf04      	itt	eq
 8007b0a:	782c      	ldrbeq	r4, [r5, #0]
 8007b0c:	1c95      	addeq	r5, r2, #2
 8007b0e:	e7ec      	b.n	8007aea <_strtol_l.isra.0+0x3a>
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1f6      	bne.n	8007b02 <_strtol_l.isra.0+0x52>
 8007b14:	2c30      	cmp	r4, #48	@ 0x30
 8007b16:	bf14      	ite	ne
 8007b18:	230a      	movne	r3, #10
 8007b1a:	2308      	moveq	r3, #8
 8007b1c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007b20:	2200      	movs	r2, #0
 8007b22:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007b26:	4610      	mov	r0, r2
 8007b28:	fbbc f9f3 	udiv	r9, ip, r3
 8007b2c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007b30:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007b34:	2f09      	cmp	r7, #9
 8007b36:	d80f      	bhi.n	8007b58 <_strtol_l.isra.0+0xa8>
 8007b38:	463c      	mov	r4, r7
 8007b3a:	42a3      	cmp	r3, r4
 8007b3c:	dd1b      	ble.n	8007b76 <_strtol_l.isra.0+0xc6>
 8007b3e:	1c57      	adds	r7, r2, #1
 8007b40:	d007      	beq.n	8007b52 <_strtol_l.isra.0+0xa2>
 8007b42:	4581      	cmp	r9, r0
 8007b44:	d314      	bcc.n	8007b70 <_strtol_l.isra.0+0xc0>
 8007b46:	d101      	bne.n	8007b4c <_strtol_l.isra.0+0x9c>
 8007b48:	45a2      	cmp	sl, r4
 8007b4a:	db11      	blt.n	8007b70 <_strtol_l.isra.0+0xc0>
 8007b4c:	fb00 4003 	mla	r0, r0, r3, r4
 8007b50:	2201      	movs	r2, #1
 8007b52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b56:	e7eb      	b.n	8007b30 <_strtol_l.isra.0+0x80>
 8007b58:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007b5c:	2f19      	cmp	r7, #25
 8007b5e:	d801      	bhi.n	8007b64 <_strtol_l.isra.0+0xb4>
 8007b60:	3c37      	subs	r4, #55	@ 0x37
 8007b62:	e7ea      	b.n	8007b3a <_strtol_l.isra.0+0x8a>
 8007b64:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007b68:	2f19      	cmp	r7, #25
 8007b6a:	d804      	bhi.n	8007b76 <_strtol_l.isra.0+0xc6>
 8007b6c:	3c57      	subs	r4, #87	@ 0x57
 8007b6e:	e7e4      	b.n	8007b3a <_strtol_l.isra.0+0x8a>
 8007b70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b74:	e7ed      	b.n	8007b52 <_strtol_l.isra.0+0xa2>
 8007b76:	1c53      	adds	r3, r2, #1
 8007b78:	d108      	bne.n	8007b8c <_strtol_l.isra.0+0xdc>
 8007b7a:	2322      	movs	r3, #34	@ 0x22
 8007b7c:	4660      	mov	r0, ip
 8007b7e:	f8ce 3000 	str.w	r3, [lr]
 8007b82:	f1b8 0f00 	cmp.w	r8, #0
 8007b86:	d0a0      	beq.n	8007aca <_strtol_l.isra.0+0x1a>
 8007b88:	1e69      	subs	r1, r5, #1
 8007b8a:	e006      	b.n	8007b9a <_strtol_l.isra.0+0xea>
 8007b8c:	b106      	cbz	r6, 8007b90 <_strtol_l.isra.0+0xe0>
 8007b8e:	4240      	negs	r0, r0
 8007b90:	f1b8 0f00 	cmp.w	r8, #0
 8007b94:	d099      	beq.n	8007aca <_strtol_l.isra.0+0x1a>
 8007b96:	2a00      	cmp	r2, #0
 8007b98:	d1f6      	bne.n	8007b88 <_strtol_l.isra.0+0xd8>
 8007b9a:	f8c8 1000 	str.w	r1, [r8]
 8007b9e:	e794      	b.n	8007aca <_strtol_l.isra.0+0x1a>
 8007ba0:	08008541 	.word	0x08008541

08007ba4 <strtol>:
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	460a      	mov	r2, r1
 8007ba8:	4601      	mov	r1, r0
 8007baa:	4802      	ldr	r0, [pc, #8]	@ (8007bb4 <strtol+0x10>)
 8007bac:	6800      	ldr	r0, [r0, #0]
 8007bae:	f7ff bf7f 	b.w	8007ab0 <_strtol_l.isra.0>
 8007bb2:	bf00      	nop
 8007bb4:	2000000c 	.word	0x2000000c

08007bb8 <memset>:
 8007bb8:	4402      	add	r2, r0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d100      	bne.n	8007bc2 <memset+0xa>
 8007bc0:	4770      	bx	lr
 8007bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8007bc6:	e7f9      	b.n	8007bbc <memset+0x4>

08007bc8 <__errno>:
 8007bc8:	4b01      	ldr	r3, [pc, #4]	@ (8007bd0 <__errno+0x8>)
 8007bca:	6818      	ldr	r0, [r3, #0]
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	2000000c 	.word	0x2000000c

08007bd4 <__libc_init_array>:
 8007bd4:	b570      	push	{r4, r5, r6, lr}
 8007bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8007c0c <__libc_init_array+0x38>)
 8007bd8:	2600      	movs	r6, #0
 8007bda:	4c0d      	ldr	r4, [pc, #52]	@ (8007c10 <__libc_init_array+0x3c>)
 8007bdc:	1b64      	subs	r4, r4, r5
 8007bde:	10a4      	asrs	r4, r4, #2
 8007be0:	42a6      	cmp	r6, r4
 8007be2:	d109      	bne.n	8007bf8 <__libc_init_array+0x24>
 8007be4:	4d0b      	ldr	r5, [pc, #44]	@ (8007c14 <__libc_init_array+0x40>)
 8007be6:	2600      	movs	r6, #0
 8007be8:	4c0b      	ldr	r4, [pc, #44]	@ (8007c18 <__libc_init_array+0x44>)
 8007bea:	f000 fc75 	bl	80084d8 <_init>
 8007bee:	1b64      	subs	r4, r4, r5
 8007bf0:	10a4      	asrs	r4, r4, #2
 8007bf2:	42a6      	cmp	r6, r4
 8007bf4:	d105      	bne.n	8007c02 <__libc_init_array+0x2e>
 8007bf6:	bd70      	pop	{r4, r5, r6, pc}
 8007bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bfc:	3601      	adds	r6, #1
 8007bfe:	4798      	blx	r3
 8007c00:	e7ee      	b.n	8007be0 <__libc_init_array+0xc>
 8007c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c06:	3601      	adds	r6, #1
 8007c08:	4798      	blx	r3
 8007c0a:	e7f2      	b.n	8007bf2 <__libc_init_array+0x1e>
 8007c0c:	0800867c 	.word	0x0800867c
 8007c10:	0800867c 	.word	0x0800867c
 8007c14:	0800867c 	.word	0x0800867c
 8007c18:	08008680 	.word	0x08008680

08007c1c <__retarget_lock_acquire_recursive>:
 8007c1c:	4770      	bx	lr

08007c1e <__retarget_lock_release_recursive>:
 8007c1e:	4770      	bx	lr

08007c20 <__ssputs_r>:
 8007c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c24:	461f      	mov	r7, r3
 8007c26:	688e      	ldr	r6, [r1, #8]
 8007c28:	4682      	mov	sl, r0
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	42be      	cmp	r6, r7
 8007c2e:	4690      	mov	r8, r2
 8007c30:	680b      	ldr	r3, [r1, #0]
 8007c32:	d82d      	bhi.n	8007c90 <__ssputs_r+0x70>
 8007c34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c3c:	d026      	beq.n	8007c8c <__ssputs_r+0x6c>
 8007c3e:	6965      	ldr	r5, [r4, #20]
 8007c40:	6909      	ldr	r1, [r1, #16]
 8007c42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c46:	eba3 0901 	sub.w	r9, r3, r1
 8007c4a:	1c7b      	adds	r3, r7, #1
 8007c4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c50:	444b      	add	r3, r9
 8007c52:	106d      	asrs	r5, r5, #1
 8007c54:	429d      	cmp	r5, r3
 8007c56:	bf38      	it	cc
 8007c58:	461d      	movcc	r5, r3
 8007c5a:	0553      	lsls	r3, r2, #21
 8007c5c:	d527      	bpl.n	8007cae <__ssputs_r+0x8e>
 8007c5e:	4629      	mov	r1, r5
 8007c60:	f000 f958 	bl	8007f14 <_malloc_r>
 8007c64:	4606      	mov	r6, r0
 8007c66:	b360      	cbz	r0, 8007cc2 <__ssputs_r+0xa2>
 8007c68:	464a      	mov	r2, r9
 8007c6a:	6921      	ldr	r1, [r4, #16]
 8007c6c:	f000 fbd4 	bl	8008418 <memcpy>
 8007c70:	89a3      	ldrh	r3, [r4, #12]
 8007c72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c7a:	81a3      	strh	r3, [r4, #12]
 8007c7c:	6126      	str	r6, [r4, #16]
 8007c7e:	444e      	add	r6, r9
 8007c80:	6165      	str	r5, [r4, #20]
 8007c82:	eba5 0509 	sub.w	r5, r5, r9
 8007c86:	6026      	str	r6, [r4, #0]
 8007c88:	463e      	mov	r6, r7
 8007c8a:	60a5      	str	r5, [r4, #8]
 8007c8c:	42be      	cmp	r6, r7
 8007c8e:	d900      	bls.n	8007c92 <__ssputs_r+0x72>
 8007c90:	463e      	mov	r6, r7
 8007c92:	4632      	mov	r2, r6
 8007c94:	4641      	mov	r1, r8
 8007c96:	6820      	ldr	r0, [r4, #0]
 8007c98:	f000 fb86 	bl	80083a8 <memmove>
 8007c9c:	68a3      	ldr	r3, [r4, #8]
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	1b9b      	subs	r3, r3, r6
 8007ca2:	60a3      	str	r3, [r4, #8]
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	4433      	add	r3, r6
 8007ca8:	6023      	str	r3, [r4, #0]
 8007caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cae:	462a      	mov	r2, r5
 8007cb0:	f000 fb4c 	bl	800834c <_realloc_r>
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d1e0      	bne.n	8007c7c <__ssputs_r+0x5c>
 8007cba:	6921      	ldr	r1, [r4, #16]
 8007cbc:	4650      	mov	r0, sl
 8007cbe:	f000 fbb9 	bl	8008434 <_free_r>
 8007cc2:	230c      	movs	r3, #12
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cc8:	f8ca 3000 	str.w	r3, [sl]
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cd2:	81a3      	strh	r3, [r4, #12]
 8007cd4:	e7e9      	b.n	8007caa <__ssputs_r+0x8a>
	...

08007cd8 <_svfiprintf_r>:
 8007cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cdc:	4698      	mov	r8, r3
 8007cde:	898b      	ldrh	r3, [r1, #12]
 8007ce0:	b09d      	sub	sp, #116	@ 0x74
 8007ce2:	4607      	mov	r7, r0
 8007ce4:	061b      	lsls	r3, r3, #24
 8007ce6:	460d      	mov	r5, r1
 8007ce8:	4614      	mov	r4, r2
 8007cea:	d510      	bpl.n	8007d0e <_svfiprintf_r+0x36>
 8007cec:	690b      	ldr	r3, [r1, #16]
 8007cee:	b973      	cbnz	r3, 8007d0e <_svfiprintf_r+0x36>
 8007cf0:	2140      	movs	r1, #64	@ 0x40
 8007cf2:	f000 f90f 	bl	8007f14 <_malloc_r>
 8007cf6:	6028      	str	r0, [r5, #0]
 8007cf8:	6128      	str	r0, [r5, #16]
 8007cfa:	b930      	cbnz	r0, 8007d0a <_svfiprintf_r+0x32>
 8007cfc:	230c      	movs	r3, #12
 8007cfe:	603b      	str	r3, [r7, #0]
 8007d00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d04:	b01d      	add	sp, #116	@ 0x74
 8007d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0a:	2340      	movs	r3, #64	@ 0x40
 8007d0c:	616b      	str	r3, [r5, #20]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d14:	f04f 0901 	mov.w	r9, #1
 8007d18:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8007ebc <_svfiprintf_r+0x1e4>
 8007d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d1e:	2320      	movs	r3, #32
 8007d20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d24:	2330      	movs	r3, #48	@ 0x30
 8007d26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d2a:	4623      	mov	r3, r4
 8007d2c:	469a      	mov	sl, r3
 8007d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d32:	b10a      	cbz	r2, 8007d38 <_svfiprintf_r+0x60>
 8007d34:	2a25      	cmp	r2, #37	@ 0x25
 8007d36:	d1f9      	bne.n	8007d2c <_svfiprintf_r+0x54>
 8007d38:	ebba 0b04 	subs.w	fp, sl, r4
 8007d3c:	d00b      	beq.n	8007d56 <_svfiprintf_r+0x7e>
 8007d3e:	465b      	mov	r3, fp
 8007d40:	4622      	mov	r2, r4
 8007d42:	4629      	mov	r1, r5
 8007d44:	4638      	mov	r0, r7
 8007d46:	f7ff ff6b 	bl	8007c20 <__ssputs_r>
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	f000 80a7 	beq.w	8007e9e <_svfiprintf_r+0x1c6>
 8007d50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d52:	445a      	add	r2, fp
 8007d54:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d56:	f89a 3000 	ldrb.w	r3, [sl]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 809f 	beq.w	8007e9e <_svfiprintf_r+0x1c6>
 8007d60:	2300      	movs	r3, #0
 8007d62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d66:	f10a 0a01 	add.w	sl, sl, #1
 8007d6a:	9304      	str	r3, [sp, #16]
 8007d6c:	9307      	str	r3, [sp, #28]
 8007d6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d72:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d78:	4654      	mov	r4, sl
 8007d7a:	2205      	movs	r2, #5
 8007d7c:	484f      	ldr	r0, [pc, #316]	@ (8007ebc <_svfiprintf_r+0x1e4>)
 8007d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d82:	f000 fb3b 	bl	80083fc <memchr>
 8007d86:	9a04      	ldr	r2, [sp, #16]
 8007d88:	b9d8      	cbnz	r0, 8007dc2 <_svfiprintf_r+0xea>
 8007d8a:	06d0      	lsls	r0, r2, #27
 8007d8c:	bf44      	itt	mi
 8007d8e:	2320      	movmi	r3, #32
 8007d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d94:	0711      	lsls	r1, r2, #28
 8007d96:	bf44      	itt	mi
 8007d98:	232b      	movmi	r3, #43	@ 0x2b
 8007d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007da2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007da4:	d015      	beq.n	8007dd2 <_svfiprintf_r+0xfa>
 8007da6:	9a07      	ldr	r2, [sp, #28]
 8007da8:	4654      	mov	r4, sl
 8007daa:	2000      	movs	r0, #0
 8007dac:	f04f 0c0a 	mov.w	ip, #10
 8007db0:	4621      	mov	r1, r4
 8007db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007db6:	3b30      	subs	r3, #48	@ 0x30
 8007db8:	2b09      	cmp	r3, #9
 8007dba:	d94b      	bls.n	8007e54 <_svfiprintf_r+0x17c>
 8007dbc:	b1b0      	cbz	r0, 8007dec <_svfiprintf_r+0x114>
 8007dbe:	9207      	str	r2, [sp, #28]
 8007dc0:	e014      	b.n	8007dec <_svfiprintf_r+0x114>
 8007dc2:	eba0 0308 	sub.w	r3, r0, r8
 8007dc6:	46a2      	mov	sl, r4
 8007dc8:	fa09 f303 	lsl.w	r3, r9, r3
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	9304      	str	r3, [sp, #16]
 8007dd0:	e7d2      	b.n	8007d78 <_svfiprintf_r+0xa0>
 8007dd2:	9b03      	ldr	r3, [sp, #12]
 8007dd4:	1d19      	adds	r1, r3, #4
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	9103      	str	r1, [sp, #12]
 8007ddc:	bfbb      	ittet	lt
 8007dde:	425b      	neglt	r3, r3
 8007de0:	f042 0202 	orrlt.w	r2, r2, #2
 8007de4:	9307      	strge	r3, [sp, #28]
 8007de6:	9307      	strlt	r3, [sp, #28]
 8007de8:	bfb8      	it	lt
 8007dea:	9204      	strlt	r2, [sp, #16]
 8007dec:	7823      	ldrb	r3, [r4, #0]
 8007dee:	2b2e      	cmp	r3, #46	@ 0x2e
 8007df0:	d10a      	bne.n	8007e08 <_svfiprintf_r+0x130>
 8007df2:	7863      	ldrb	r3, [r4, #1]
 8007df4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007df6:	d132      	bne.n	8007e5e <_svfiprintf_r+0x186>
 8007df8:	9b03      	ldr	r3, [sp, #12]
 8007dfa:	3402      	adds	r4, #2
 8007dfc:	1d1a      	adds	r2, r3, #4
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e04:	9203      	str	r2, [sp, #12]
 8007e06:	9305      	str	r3, [sp, #20]
 8007e08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ecc <_svfiprintf_r+0x1f4>
 8007e0c:	2203      	movs	r2, #3
 8007e0e:	7821      	ldrb	r1, [r4, #0]
 8007e10:	4650      	mov	r0, sl
 8007e12:	f000 faf3 	bl	80083fc <memchr>
 8007e16:	b138      	cbz	r0, 8007e28 <_svfiprintf_r+0x150>
 8007e18:	eba0 000a 	sub.w	r0, r0, sl
 8007e1c:	2240      	movs	r2, #64	@ 0x40
 8007e1e:	9b04      	ldr	r3, [sp, #16]
 8007e20:	3401      	adds	r4, #1
 8007e22:	4082      	lsls	r2, r0
 8007e24:	4313      	orrs	r3, r2
 8007e26:	9304      	str	r3, [sp, #16]
 8007e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e2c:	2206      	movs	r2, #6
 8007e2e:	4824      	ldr	r0, [pc, #144]	@ (8007ec0 <_svfiprintf_r+0x1e8>)
 8007e30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e34:	f000 fae2 	bl	80083fc <memchr>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d036      	beq.n	8007eaa <_svfiprintf_r+0x1d2>
 8007e3c:	4b21      	ldr	r3, [pc, #132]	@ (8007ec4 <_svfiprintf_r+0x1ec>)
 8007e3e:	bb1b      	cbnz	r3, 8007e88 <_svfiprintf_r+0x1b0>
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	3307      	adds	r3, #7
 8007e44:	f023 0307 	bic.w	r3, r3, #7
 8007e48:	3308      	adds	r3, #8
 8007e4a:	9303      	str	r3, [sp, #12]
 8007e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e4e:	4433      	add	r3, r6
 8007e50:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e52:	e76a      	b.n	8007d2a <_svfiprintf_r+0x52>
 8007e54:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e58:	460c      	mov	r4, r1
 8007e5a:	2001      	movs	r0, #1
 8007e5c:	e7a8      	b.n	8007db0 <_svfiprintf_r+0xd8>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	3401      	adds	r4, #1
 8007e62:	f04f 0c0a 	mov.w	ip, #10
 8007e66:	4619      	mov	r1, r3
 8007e68:	9305      	str	r3, [sp, #20]
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e70:	3a30      	subs	r2, #48	@ 0x30
 8007e72:	2a09      	cmp	r2, #9
 8007e74:	d903      	bls.n	8007e7e <_svfiprintf_r+0x1a6>
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0c6      	beq.n	8007e08 <_svfiprintf_r+0x130>
 8007e7a:	9105      	str	r1, [sp, #20]
 8007e7c:	e7c4      	b.n	8007e08 <_svfiprintf_r+0x130>
 8007e7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e82:	4604      	mov	r4, r0
 8007e84:	2301      	movs	r3, #1
 8007e86:	e7f0      	b.n	8007e6a <_svfiprintf_r+0x192>
 8007e88:	ab03      	add	r3, sp, #12
 8007e8a:	462a      	mov	r2, r5
 8007e8c:	a904      	add	r1, sp, #16
 8007e8e:	4638      	mov	r0, r7
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec8 <_svfiprintf_r+0x1f0>)
 8007e94:	f3af 8000 	nop.w
 8007e98:	1c42      	adds	r2, r0, #1
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	d1d6      	bne.n	8007e4c <_svfiprintf_r+0x174>
 8007e9e:	89ab      	ldrh	r3, [r5, #12]
 8007ea0:	065b      	lsls	r3, r3, #25
 8007ea2:	f53f af2d 	bmi.w	8007d00 <_svfiprintf_r+0x28>
 8007ea6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ea8:	e72c      	b.n	8007d04 <_svfiprintf_r+0x2c>
 8007eaa:	ab03      	add	r3, sp, #12
 8007eac:	462a      	mov	r2, r5
 8007eae:	a904      	add	r1, sp, #16
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	4b04      	ldr	r3, [pc, #16]	@ (8007ec8 <_svfiprintf_r+0x1f0>)
 8007eb6:	f000 f91f 	bl	80080f8 <_printf_i>
 8007eba:	e7ed      	b.n	8007e98 <_svfiprintf_r+0x1c0>
 8007ebc:	08008641 	.word	0x08008641
 8007ec0:	0800864b 	.word	0x0800864b
 8007ec4:	00000000 	.word	0x00000000
 8007ec8:	08007c21 	.word	0x08007c21
 8007ecc:	08008647 	.word	0x08008647

08007ed0 <sbrk_aligned>:
 8007ed0:	b570      	push	{r4, r5, r6, lr}
 8007ed2:	4e0f      	ldr	r6, [pc, #60]	@ (8007f10 <sbrk_aligned+0x40>)
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	6831      	ldr	r1, [r6, #0]
 8007eda:	b911      	cbnz	r1, 8007ee2 <sbrk_aligned+0x12>
 8007edc:	f000 fa7e 	bl	80083dc <_sbrk_r>
 8007ee0:	6030      	str	r0, [r6, #0]
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	f000 fa79 	bl	80083dc <_sbrk_r>
 8007eea:	1c43      	adds	r3, r0, #1
 8007eec:	d103      	bne.n	8007ef6 <sbrk_aligned+0x26>
 8007eee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	bd70      	pop	{r4, r5, r6, pc}
 8007ef6:	1cc4      	adds	r4, r0, #3
 8007ef8:	f024 0403 	bic.w	r4, r4, #3
 8007efc:	42a0      	cmp	r0, r4
 8007efe:	d0f8      	beq.n	8007ef2 <sbrk_aligned+0x22>
 8007f00:	1a21      	subs	r1, r4, r0
 8007f02:	4628      	mov	r0, r5
 8007f04:	f000 fa6a 	bl	80083dc <_sbrk_r>
 8007f08:	3001      	adds	r0, #1
 8007f0a:	d1f2      	bne.n	8007ef2 <sbrk_aligned+0x22>
 8007f0c:	e7ef      	b.n	8007eee <sbrk_aligned+0x1e>
 8007f0e:	bf00      	nop
 8007f10:	200002f4 	.word	0x200002f4

08007f14 <_malloc_r>:
 8007f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f18:	1ccd      	adds	r5, r1, #3
 8007f1a:	4606      	mov	r6, r0
 8007f1c:	f025 0503 	bic.w	r5, r5, #3
 8007f20:	3508      	adds	r5, #8
 8007f22:	2d0c      	cmp	r5, #12
 8007f24:	bf38      	it	cc
 8007f26:	250c      	movcc	r5, #12
 8007f28:	2d00      	cmp	r5, #0
 8007f2a:	db01      	blt.n	8007f30 <_malloc_r+0x1c>
 8007f2c:	42a9      	cmp	r1, r5
 8007f2e:	d904      	bls.n	8007f3a <_malloc_r+0x26>
 8007f30:	230c      	movs	r3, #12
 8007f32:	6033      	str	r3, [r6, #0]
 8007f34:	2000      	movs	r0, #0
 8007f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008010 <_malloc_r+0xfc>
 8007f3e:	f000 f9f9 	bl	8008334 <__malloc_lock>
 8007f42:	f8d8 3000 	ldr.w	r3, [r8]
 8007f46:	461c      	mov	r4, r3
 8007f48:	bb44      	cbnz	r4, 8007f9c <_malloc_r+0x88>
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f7ff ffbf 	bl	8007ed0 <sbrk_aligned>
 8007f52:	1c43      	adds	r3, r0, #1
 8007f54:	4604      	mov	r4, r0
 8007f56:	d158      	bne.n	800800a <_malloc_r+0xf6>
 8007f58:	f8d8 4000 	ldr.w	r4, [r8]
 8007f5c:	4627      	mov	r7, r4
 8007f5e:	2f00      	cmp	r7, #0
 8007f60:	d143      	bne.n	8007fea <_malloc_r+0xd6>
 8007f62:	2c00      	cmp	r4, #0
 8007f64:	d04b      	beq.n	8007ffe <_malloc_r+0xea>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	4639      	mov	r1, r7
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	eb04 0903 	add.w	r9, r4, r3
 8007f70:	f000 fa34 	bl	80083dc <_sbrk_r>
 8007f74:	4581      	cmp	r9, r0
 8007f76:	d142      	bne.n	8007ffe <_malloc_r+0xea>
 8007f78:	6821      	ldr	r1, [r4, #0]
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	1a6d      	subs	r5, r5, r1
 8007f7e:	4629      	mov	r1, r5
 8007f80:	f7ff ffa6 	bl	8007ed0 <sbrk_aligned>
 8007f84:	3001      	adds	r0, #1
 8007f86:	d03a      	beq.n	8007ffe <_malloc_r+0xea>
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	442b      	add	r3, r5
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f92:	685a      	ldr	r2, [r3, #4]
 8007f94:	bb62      	cbnz	r2, 8007ff0 <_malloc_r+0xdc>
 8007f96:	f8c8 7000 	str.w	r7, [r8]
 8007f9a:	e00f      	b.n	8007fbc <_malloc_r+0xa8>
 8007f9c:	6822      	ldr	r2, [r4, #0]
 8007f9e:	1b52      	subs	r2, r2, r5
 8007fa0:	d420      	bmi.n	8007fe4 <_malloc_r+0xd0>
 8007fa2:	2a0b      	cmp	r2, #11
 8007fa4:	d917      	bls.n	8007fd6 <_malloc_r+0xc2>
 8007fa6:	1961      	adds	r1, r4, r5
 8007fa8:	42a3      	cmp	r3, r4
 8007faa:	6025      	str	r5, [r4, #0]
 8007fac:	bf18      	it	ne
 8007fae:	6059      	strne	r1, [r3, #4]
 8007fb0:	6863      	ldr	r3, [r4, #4]
 8007fb2:	bf08      	it	eq
 8007fb4:	f8c8 1000 	streq.w	r1, [r8]
 8007fb8:	5162      	str	r2, [r4, r5]
 8007fba:	604b      	str	r3, [r1, #4]
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	f000 f9bf 	bl	8008340 <__malloc_unlock>
 8007fc2:	f104 000b 	add.w	r0, r4, #11
 8007fc6:	1d23      	adds	r3, r4, #4
 8007fc8:	f020 0007 	bic.w	r0, r0, #7
 8007fcc:	1ac2      	subs	r2, r0, r3
 8007fce:	bf1c      	itt	ne
 8007fd0:	1a1b      	subne	r3, r3, r0
 8007fd2:	50a3      	strne	r3, [r4, r2]
 8007fd4:	e7af      	b.n	8007f36 <_malloc_r+0x22>
 8007fd6:	6862      	ldr	r2, [r4, #4]
 8007fd8:	42a3      	cmp	r3, r4
 8007fda:	bf0c      	ite	eq
 8007fdc:	f8c8 2000 	streq.w	r2, [r8]
 8007fe0:	605a      	strne	r2, [r3, #4]
 8007fe2:	e7eb      	b.n	8007fbc <_malloc_r+0xa8>
 8007fe4:	4623      	mov	r3, r4
 8007fe6:	6864      	ldr	r4, [r4, #4]
 8007fe8:	e7ae      	b.n	8007f48 <_malloc_r+0x34>
 8007fea:	463c      	mov	r4, r7
 8007fec:	687f      	ldr	r7, [r7, #4]
 8007fee:	e7b6      	b.n	8007f5e <_malloc_r+0x4a>
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	42a3      	cmp	r3, r4
 8007ff6:	d1fb      	bne.n	8007ff0 <_malloc_r+0xdc>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	6053      	str	r3, [r2, #4]
 8007ffc:	e7de      	b.n	8007fbc <_malloc_r+0xa8>
 8007ffe:	230c      	movs	r3, #12
 8008000:	4630      	mov	r0, r6
 8008002:	6033      	str	r3, [r6, #0]
 8008004:	f000 f99c 	bl	8008340 <__malloc_unlock>
 8008008:	e794      	b.n	8007f34 <_malloc_r+0x20>
 800800a:	6005      	str	r5, [r0, #0]
 800800c:	e7d6      	b.n	8007fbc <_malloc_r+0xa8>
 800800e:	bf00      	nop
 8008010:	200002f8 	.word	0x200002f8

08008014 <_printf_common>:
 8008014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008018:	4616      	mov	r6, r2
 800801a:	4698      	mov	r8, r3
 800801c:	688a      	ldr	r2, [r1, #8]
 800801e:	4607      	mov	r7, r0
 8008020:	690b      	ldr	r3, [r1, #16]
 8008022:	460c      	mov	r4, r1
 8008024:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008028:	4293      	cmp	r3, r2
 800802a:	bfb8      	it	lt
 800802c:	4613      	movlt	r3, r2
 800802e:	6033      	str	r3, [r6, #0]
 8008030:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008034:	b10a      	cbz	r2, 800803a <_printf_common+0x26>
 8008036:	3301      	adds	r3, #1
 8008038:	6033      	str	r3, [r6, #0]
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	0699      	lsls	r1, r3, #26
 800803e:	bf42      	ittt	mi
 8008040:	6833      	ldrmi	r3, [r6, #0]
 8008042:	3302      	addmi	r3, #2
 8008044:	6033      	strmi	r3, [r6, #0]
 8008046:	6825      	ldr	r5, [r4, #0]
 8008048:	f015 0506 	ands.w	r5, r5, #6
 800804c:	d106      	bne.n	800805c <_printf_common+0x48>
 800804e:	f104 0a19 	add.w	sl, r4, #25
 8008052:	68e3      	ldr	r3, [r4, #12]
 8008054:	6832      	ldr	r2, [r6, #0]
 8008056:	1a9b      	subs	r3, r3, r2
 8008058:	42ab      	cmp	r3, r5
 800805a:	dc2b      	bgt.n	80080b4 <_printf_common+0xa0>
 800805c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008060:	6822      	ldr	r2, [r4, #0]
 8008062:	3b00      	subs	r3, #0
 8008064:	bf18      	it	ne
 8008066:	2301      	movne	r3, #1
 8008068:	0692      	lsls	r2, r2, #26
 800806a:	d430      	bmi.n	80080ce <_printf_common+0xba>
 800806c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008070:	4641      	mov	r1, r8
 8008072:	4638      	mov	r0, r7
 8008074:	47c8      	blx	r9
 8008076:	3001      	adds	r0, #1
 8008078:	d023      	beq.n	80080c2 <_printf_common+0xae>
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	341a      	adds	r4, #26
 800807e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008082:	f003 0306 	and.w	r3, r3, #6
 8008086:	2b04      	cmp	r3, #4
 8008088:	bf0a      	itet	eq
 800808a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800808e:	2500      	movne	r5, #0
 8008090:	6833      	ldreq	r3, [r6, #0]
 8008092:	f04f 0600 	mov.w	r6, #0
 8008096:	bf08      	it	eq
 8008098:	1aed      	subeq	r5, r5, r3
 800809a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800809e:	bf08      	it	eq
 80080a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080a4:	4293      	cmp	r3, r2
 80080a6:	bfc4      	itt	gt
 80080a8:	1a9b      	subgt	r3, r3, r2
 80080aa:	18ed      	addgt	r5, r5, r3
 80080ac:	42b5      	cmp	r5, r6
 80080ae:	d11a      	bne.n	80080e6 <_printf_common+0xd2>
 80080b0:	2000      	movs	r0, #0
 80080b2:	e008      	b.n	80080c6 <_printf_common+0xb2>
 80080b4:	2301      	movs	r3, #1
 80080b6:	4652      	mov	r2, sl
 80080b8:	4641      	mov	r1, r8
 80080ba:	4638      	mov	r0, r7
 80080bc:	47c8      	blx	r9
 80080be:	3001      	adds	r0, #1
 80080c0:	d103      	bne.n	80080ca <_printf_common+0xb6>
 80080c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ca:	3501      	adds	r5, #1
 80080cc:	e7c1      	b.n	8008052 <_printf_common+0x3e>
 80080ce:	18e1      	adds	r1, r4, r3
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	2030      	movs	r0, #48	@ 0x30
 80080d4:	3302      	adds	r3, #2
 80080d6:	4422      	add	r2, r4
 80080d8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80080dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80080e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80080e4:	e7c2      	b.n	800806c <_printf_common+0x58>
 80080e6:	2301      	movs	r3, #1
 80080e8:	4622      	mov	r2, r4
 80080ea:	4641      	mov	r1, r8
 80080ec:	4638      	mov	r0, r7
 80080ee:	47c8      	blx	r9
 80080f0:	3001      	adds	r0, #1
 80080f2:	d0e6      	beq.n	80080c2 <_printf_common+0xae>
 80080f4:	3601      	adds	r6, #1
 80080f6:	e7d9      	b.n	80080ac <_printf_common+0x98>

080080f8 <_printf_i>:
 80080f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080fc:	7e0f      	ldrb	r7, [r1, #24]
 80080fe:	4691      	mov	r9, r2
 8008100:	4680      	mov	r8, r0
 8008102:	460c      	mov	r4, r1
 8008104:	2f78      	cmp	r7, #120	@ 0x78
 8008106:	469a      	mov	sl, r3
 8008108:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800810a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800810e:	d807      	bhi.n	8008120 <_printf_i+0x28>
 8008110:	2f62      	cmp	r7, #98	@ 0x62
 8008112:	d80a      	bhi.n	800812a <_printf_i+0x32>
 8008114:	2f00      	cmp	r7, #0
 8008116:	f000 80d1 	beq.w	80082bc <_printf_i+0x1c4>
 800811a:	2f58      	cmp	r7, #88	@ 0x58
 800811c:	f000 80b8 	beq.w	8008290 <_printf_i+0x198>
 8008120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008124:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008128:	e03a      	b.n	80081a0 <_printf_i+0xa8>
 800812a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800812e:	2b15      	cmp	r3, #21
 8008130:	d8f6      	bhi.n	8008120 <_printf_i+0x28>
 8008132:	a101      	add	r1, pc, #4	@ (adr r1, 8008138 <_printf_i+0x40>)
 8008134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008138:	08008191 	.word	0x08008191
 800813c:	080081a5 	.word	0x080081a5
 8008140:	08008121 	.word	0x08008121
 8008144:	08008121 	.word	0x08008121
 8008148:	08008121 	.word	0x08008121
 800814c:	08008121 	.word	0x08008121
 8008150:	080081a5 	.word	0x080081a5
 8008154:	08008121 	.word	0x08008121
 8008158:	08008121 	.word	0x08008121
 800815c:	08008121 	.word	0x08008121
 8008160:	08008121 	.word	0x08008121
 8008164:	080082a3 	.word	0x080082a3
 8008168:	080081cf 	.word	0x080081cf
 800816c:	0800825d 	.word	0x0800825d
 8008170:	08008121 	.word	0x08008121
 8008174:	08008121 	.word	0x08008121
 8008178:	080082c5 	.word	0x080082c5
 800817c:	08008121 	.word	0x08008121
 8008180:	080081cf 	.word	0x080081cf
 8008184:	08008121 	.word	0x08008121
 8008188:	08008121 	.word	0x08008121
 800818c:	08008265 	.word	0x08008265
 8008190:	6833      	ldr	r3, [r6, #0]
 8008192:	1d1a      	adds	r2, r3, #4
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6032      	str	r2, [r6, #0]
 8008198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800819c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081a0:	2301      	movs	r3, #1
 80081a2:	e09c      	b.n	80082de <_printf_i+0x1e6>
 80081a4:	6833      	ldr	r3, [r6, #0]
 80081a6:	6820      	ldr	r0, [r4, #0]
 80081a8:	1d19      	adds	r1, r3, #4
 80081aa:	6031      	str	r1, [r6, #0]
 80081ac:	0606      	lsls	r6, r0, #24
 80081ae:	d501      	bpl.n	80081b4 <_printf_i+0xbc>
 80081b0:	681d      	ldr	r5, [r3, #0]
 80081b2:	e003      	b.n	80081bc <_printf_i+0xc4>
 80081b4:	0645      	lsls	r5, r0, #25
 80081b6:	d5fb      	bpl.n	80081b0 <_printf_i+0xb8>
 80081b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80081bc:	2d00      	cmp	r5, #0
 80081be:	da03      	bge.n	80081c8 <_printf_i+0xd0>
 80081c0:	232d      	movs	r3, #45	@ 0x2d
 80081c2:	426d      	negs	r5, r5
 80081c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081c8:	4858      	ldr	r0, [pc, #352]	@ (800832c <_printf_i+0x234>)
 80081ca:	230a      	movs	r3, #10
 80081cc:	e011      	b.n	80081f2 <_printf_i+0xfa>
 80081ce:	6821      	ldr	r1, [r4, #0]
 80081d0:	6833      	ldr	r3, [r6, #0]
 80081d2:	0608      	lsls	r0, r1, #24
 80081d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80081d8:	d402      	bmi.n	80081e0 <_printf_i+0xe8>
 80081da:	0649      	lsls	r1, r1, #25
 80081dc:	bf48      	it	mi
 80081de:	b2ad      	uxthmi	r5, r5
 80081e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80081e2:	6033      	str	r3, [r6, #0]
 80081e4:	4851      	ldr	r0, [pc, #324]	@ (800832c <_printf_i+0x234>)
 80081e6:	bf14      	ite	ne
 80081e8:	230a      	movne	r3, #10
 80081ea:	2308      	moveq	r3, #8
 80081ec:	2100      	movs	r1, #0
 80081ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80081f2:	6866      	ldr	r6, [r4, #4]
 80081f4:	2e00      	cmp	r6, #0
 80081f6:	60a6      	str	r6, [r4, #8]
 80081f8:	db05      	blt.n	8008206 <_printf_i+0x10e>
 80081fa:	6821      	ldr	r1, [r4, #0]
 80081fc:	432e      	orrs	r6, r5
 80081fe:	f021 0104 	bic.w	r1, r1, #4
 8008202:	6021      	str	r1, [r4, #0]
 8008204:	d04b      	beq.n	800829e <_printf_i+0x1a6>
 8008206:	4616      	mov	r6, r2
 8008208:	fbb5 f1f3 	udiv	r1, r5, r3
 800820c:	fb03 5711 	mls	r7, r3, r1, r5
 8008210:	5dc7      	ldrb	r7, [r0, r7]
 8008212:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008216:	462f      	mov	r7, r5
 8008218:	460d      	mov	r5, r1
 800821a:	42bb      	cmp	r3, r7
 800821c:	d9f4      	bls.n	8008208 <_printf_i+0x110>
 800821e:	2b08      	cmp	r3, #8
 8008220:	d10b      	bne.n	800823a <_printf_i+0x142>
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	07df      	lsls	r7, r3, #31
 8008226:	d508      	bpl.n	800823a <_printf_i+0x142>
 8008228:	6923      	ldr	r3, [r4, #16]
 800822a:	6861      	ldr	r1, [r4, #4]
 800822c:	4299      	cmp	r1, r3
 800822e:	bfde      	ittt	le
 8008230:	2330      	movle	r3, #48	@ 0x30
 8008232:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008236:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800823a:	1b92      	subs	r2, r2, r6
 800823c:	6122      	str	r2, [r4, #16]
 800823e:	464b      	mov	r3, r9
 8008240:	aa03      	add	r2, sp, #12
 8008242:	4621      	mov	r1, r4
 8008244:	4640      	mov	r0, r8
 8008246:	f8cd a000 	str.w	sl, [sp]
 800824a:	f7ff fee3 	bl	8008014 <_printf_common>
 800824e:	3001      	adds	r0, #1
 8008250:	d14a      	bne.n	80082e8 <_printf_i+0x1f0>
 8008252:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008256:	b004      	add	sp, #16
 8008258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	f043 0320 	orr.w	r3, r3, #32
 8008262:	6023      	str	r3, [r4, #0]
 8008264:	2778      	movs	r7, #120	@ 0x78
 8008266:	4832      	ldr	r0, [pc, #200]	@ (8008330 <_printf_i+0x238>)
 8008268:	6823      	ldr	r3, [r4, #0]
 800826a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800826e:	061f      	lsls	r7, r3, #24
 8008270:	6831      	ldr	r1, [r6, #0]
 8008272:	f851 5b04 	ldr.w	r5, [r1], #4
 8008276:	d402      	bmi.n	800827e <_printf_i+0x186>
 8008278:	065f      	lsls	r7, r3, #25
 800827a:	bf48      	it	mi
 800827c:	b2ad      	uxthmi	r5, r5
 800827e:	6031      	str	r1, [r6, #0]
 8008280:	07d9      	lsls	r1, r3, #31
 8008282:	bf44      	itt	mi
 8008284:	f043 0320 	orrmi.w	r3, r3, #32
 8008288:	6023      	strmi	r3, [r4, #0]
 800828a:	b11d      	cbz	r5, 8008294 <_printf_i+0x19c>
 800828c:	2310      	movs	r3, #16
 800828e:	e7ad      	b.n	80081ec <_printf_i+0xf4>
 8008290:	4826      	ldr	r0, [pc, #152]	@ (800832c <_printf_i+0x234>)
 8008292:	e7e9      	b.n	8008268 <_printf_i+0x170>
 8008294:	6823      	ldr	r3, [r4, #0]
 8008296:	f023 0320 	bic.w	r3, r3, #32
 800829a:	6023      	str	r3, [r4, #0]
 800829c:	e7f6      	b.n	800828c <_printf_i+0x194>
 800829e:	4616      	mov	r6, r2
 80082a0:	e7bd      	b.n	800821e <_printf_i+0x126>
 80082a2:	6833      	ldr	r3, [r6, #0]
 80082a4:	6825      	ldr	r5, [r4, #0]
 80082a6:	1d18      	adds	r0, r3, #4
 80082a8:	6961      	ldr	r1, [r4, #20]
 80082aa:	6030      	str	r0, [r6, #0]
 80082ac:	062e      	lsls	r6, r5, #24
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	d501      	bpl.n	80082b6 <_printf_i+0x1be>
 80082b2:	6019      	str	r1, [r3, #0]
 80082b4:	e002      	b.n	80082bc <_printf_i+0x1c4>
 80082b6:	0668      	lsls	r0, r5, #25
 80082b8:	d5fb      	bpl.n	80082b2 <_printf_i+0x1ba>
 80082ba:	8019      	strh	r1, [r3, #0]
 80082bc:	2300      	movs	r3, #0
 80082be:	4616      	mov	r6, r2
 80082c0:	6123      	str	r3, [r4, #16]
 80082c2:	e7bc      	b.n	800823e <_printf_i+0x146>
 80082c4:	6833      	ldr	r3, [r6, #0]
 80082c6:	2100      	movs	r1, #0
 80082c8:	1d1a      	adds	r2, r3, #4
 80082ca:	6032      	str	r2, [r6, #0]
 80082cc:	681e      	ldr	r6, [r3, #0]
 80082ce:	6862      	ldr	r2, [r4, #4]
 80082d0:	4630      	mov	r0, r6
 80082d2:	f000 f893 	bl	80083fc <memchr>
 80082d6:	b108      	cbz	r0, 80082dc <_printf_i+0x1e4>
 80082d8:	1b80      	subs	r0, r0, r6
 80082da:	6060      	str	r0, [r4, #4]
 80082dc:	6863      	ldr	r3, [r4, #4]
 80082de:	6123      	str	r3, [r4, #16]
 80082e0:	2300      	movs	r3, #0
 80082e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082e6:	e7aa      	b.n	800823e <_printf_i+0x146>
 80082e8:	6923      	ldr	r3, [r4, #16]
 80082ea:	4632      	mov	r2, r6
 80082ec:	4649      	mov	r1, r9
 80082ee:	4640      	mov	r0, r8
 80082f0:	47d0      	blx	sl
 80082f2:	3001      	adds	r0, #1
 80082f4:	d0ad      	beq.n	8008252 <_printf_i+0x15a>
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	079b      	lsls	r3, r3, #30
 80082fa:	d413      	bmi.n	8008324 <_printf_i+0x22c>
 80082fc:	68e0      	ldr	r0, [r4, #12]
 80082fe:	9b03      	ldr	r3, [sp, #12]
 8008300:	4298      	cmp	r0, r3
 8008302:	bfb8      	it	lt
 8008304:	4618      	movlt	r0, r3
 8008306:	e7a6      	b.n	8008256 <_printf_i+0x15e>
 8008308:	2301      	movs	r3, #1
 800830a:	4632      	mov	r2, r6
 800830c:	4649      	mov	r1, r9
 800830e:	4640      	mov	r0, r8
 8008310:	47d0      	blx	sl
 8008312:	3001      	adds	r0, #1
 8008314:	d09d      	beq.n	8008252 <_printf_i+0x15a>
 8008316:	3501      	adds	r5, #1
 8008318:	68e3      	ldr	r3, [r4, #12]
 800831a:	9903      	ldr	r1, [sp, #12]
 800831c:	1a5b      	subs	r3, r3, r1
 800831e:	42ab      	cmp	r3, r5
 8008320:	dcf2      	bgt.n	8008308 <_printf_i+0x210>
 8008322:	e7eb      	b.n	80082fc <_printf_i+0x204>
 8008324:	2500      	movs	r5, #0
 8008326:	f104 0619 	add.w	r6, r4, #25
 800832a:	e7f5      	b.n	8008318 <_printf_i+0x220>
 800832c:	08008652 	.word	0x08008652
 8008330:	08008663 	.word	0x08008663

08008334 <__malloc_lock>:
 8008334:	4801      	ldr	r0, [pc, #4]	@ (800833c <__malloc_lock+0x8>)
 8008336:	f7ff bc71 	b.w	8007c1c <__retarget_lock_acquire_recursive>
 800833a:	bf00      	nop
 800833c:	200002f0 	.word	0x200002f0

08008340 <__malloc_unlock>:
 8008340:	4801      	ldr	r0, [pc, #4]	@ (8008348 <__malloc_unlock+0x8>)
 8008342:	f7ff bc6c 	b.w	8007c1e <__retarget_lock_release_recursive>
 8008346:	bf00      	nop
 8008348:	200002f0 	.word	0x200002f0

0800834c <_realloc_r>:
 800834c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008350:	4607      	mov	r7, r0
 8008352:	4614      	mov	r4, r2
 8008354:	460d      	mov	r5, r1
 8008356:	b921      	cbnz	r1, 8008362 <_realloc_r+0x16>
 8008358:	4611      	mov	r1, r2
 800835a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800835e:	f7ff bdd9 	b.w	8007f14 <_malloc_r>
 8008362:	b92a      	cbnz	r2, 8008370 <_realloc_r+0x24>
 8008364:	4625      	mov	r5, r4
 8008366:	f000 f865 	bl	8008434 <_free_r>
 800836a:	4628      	mov	r0, r5
 800836c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008370:	f000 f8aa 	bl	80084c8 <_malloc_usable_size_r>
 8008374:	4284      	cmp	r4, r0
 8008376:	4606      	mov	r6, r0
 8008378:	d802      	bhi.n	8008380 <_realloc_r+0x34>
 800837a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800837e:	d8f4      	bhi.n	800836a <_realloc_r+0x1e>
 8008380:	4621      	mov	r1, r4
 8008382:	4638      	mov	r0, r7
 8008384:	f7ff fdc6 	bl	8007f14 <_malloc_r>
 8008388:	4680      	mov	r8, r0
 800838a:	b908      	cbnz	r0, 8008390 <_realloc_r+0x44>
 800838c:	4645      	mov	r5, r8
 800838e:	e7ec      	b.n	800836a <_realloc_r+0x1e>
 8008390:	42b4      	cmp	r4, r6
 8008392:	4622      	mov	r2, r4
 8008394:	4629      	mov	r1, r5
 8008396:	bf28      	it	cs
 8008398:	4632      	movcs	r2, r6
 800839a:	f000 f83d 	bl	8008418 <memcpy>
 800839e:	4629      	mov	r1, r5
 80083a0:	4638      	mov	r0, r7
 80083a2:	f000 f847 	bl	8008434 <_free_r>
 80083a6:	e7f1      	b.n	800838c <_realloc_r+0x40>

080083a8 <memmove>:
 80083a8:	4288      	cmp	r0, r1
 80083aa:	b510      	push	{r4, lr}
 80083ac:	eb01 0402 	add.w	r4, r1, r2
 80083b0:	d902      	bls.n	80083b8 <memmove+0x10>
 80083b2:	4284      	cmp	r4, r0
 80083b4:	4623      	mov	r3, r4
 80083b6:	d807      	bhi.n	80083c8 <memmove+0x20>
 80083b8:	1e43      	subs	r3, r0, #1
 80083ba:	42a1      	cmp	r1, r4
 80083bc:	d008      	beq.n	80083d0 <memmove+0x28>
 80083be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083c6:	e7f8      	b.n	80083ba <memmove+0x12>
 80083c8:	4402      	add	r2, r0
 80083ca:	4601      	mov	r1, r0
 80083cc:	428a      	cmp	r2, r1
 80083ce:	d100      	bne.n	80083d2 <memmove+0x2a>
 80083d0:	bd10      	pop	{r4, pc}
 80083d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083da:	e7f7      	b.n	80083cc <memmove+0x24>

080083dc <_sbrk_r>:
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	2300      	movs	r3, #0
 80083e0:	4d05      	ldr	r5, [pc, #20]	@ (80083f8 <_sbrk_r+0x1c>)
 80083e2:	4604      	mov	r4, r0
 80083e4:	4608      	mov	r0, r1
 80083e6:	602b      	str	r3, [r5, #0]
 80083e8:	f7f8 fc12 	bl	8000c10 <_sbrk>
 80083ec:	1c43      	adds	r3, r0, #1
 80083ee:	d102      	bne.n	80083f6 <_sbrk_r+0x1a>
 80083f0:	682b      	ldr	r3, [r5, #0]
 80083f2:	b103      	cbz	r3, 80083f6 <_sbrk_r+0x1a>
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	bd38      	pop	{r3, r4, r5, pc}
 80083f8:	200002fc 	.word	0x200002fc

080083fc <memchr>:
 80083fc:	b2c9      	uxtb	r1, r1
 80083fe:	4603      	mov	r3, r0
 8008400:	4402      	add	r2, r0
 8008402:	b510      	push	{r4, lr}
 8008404:	4293      	cmp	r3, r2
 8008406:	4618      	mov	r0, r3
 8008408:	d101      	bne.n	800840e <memchr+0x12>
 800840a:	2000      	movs	r0, #0
 800840c:	e003      	b.n	8008416 <memchr+0x1a>
 800840e:	7804      	ldrb	r4, [r0, #0]
 8008410:	3301      	adds	r3, #1
 8008412:	428c      	cmp	r4, r1
 8008414:	d1f6      	bne.n	8008404 <memchr+0x8>
 8008416:	bd10      	pop	{r4, pc}

08008418 <memcpy>:
 8008418:	440a      	add	r2, r1
 800841a:	1e43      	subs	r3, r0, #1
 800841c:	4291      	cmp	r1, r2
 800841e:	d100      	bne.n	8008422 <memcpy+0xa>
 8008420:	4770      	bx	lr
 8008422:	b510      	push	{r4, lr}
 8008424:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008428:	4291      	cmp	r1, r2
 800842a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800842e:	d1f9      	bne.n	8008424 <memcpy+0xc>
 8008430:	bd10      	pop	{r4, pc}
	...

08008434 <_free_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4605      	mov	r5, r0
 8008438:	2900      	cmp	r1, #0
 800843a:	d041      	beq.n	80084c0 <_free_r+0x8c>
 800843c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008440:	1f0c      	subs	r4, r1, #4
 8008442:	2b00      	cmp	r3, #0
 8008444:	bfb8      	it	lt
 8008446:	18e4      	addlt	r4, r4, r3
 8008448:	f7ff ff74 	bl	8008334 <__malloc_lock>
 800844c:	4a1d      	ldr	r2, [pc, #116]	@ (80084c4 <_free_r+0x90>)
 800844e:	6813      	ldr	r3, [r2, #0]
 8008450:	b933      	cbnz	r3, 8008460 <_free_r+0x2c>
 8008452:	6063      	str	r3, [r4, #4]
 8008454:	6014      	str	r4, [r2, #0]
 8008456:	4628      	mov	r0, r5
 8008458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800845c:	f7ff bf70 	b.w	8008340 <__malloc_unlock>
 8008460:	42a3      	cmp	r3, r4
 8008462:	d908      	bls.n	8008476 <_free_r+0x42>
 8008464:	6820      	ldr	r0, [r4, #0]
 8008466:	1821      	adds	r1, r4, r0
 8008468:	428b      	cmp	r3, r1
 800846a:	bf01      	itttt	eq
 800846c:	6819      	ldreq	r1, [r3, #0]
 800846e:	685b      	ldreq	r3, [r3, #4]
 8008470:	1809      	addeq	r1, r1, r0
 8008472:	6021      	streq	r1, [r4, #0]
 8008474:	e7ed      	b.n	8008452 <_free_r+0x1e>
 8008476:	461a      	mov	r2, r3
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	b10b      	cbz	r3, 8008480 <_free_r+0x4c>
 800847c:	42a3      	cmp	r3, r4
 800847e:	d9fa      	bls.n	8008476 <_free_r+0x42>
 8008480:	6811      	ldr	r1, [r2, #0]
 8008482:	1850      	adds	r0, r2, r1
 8008484:	42a0      	cmp	r0, r4
 8008486:	d10b      	bne.n	80084a0 <_free_r+0x6c>
 8008488:	6820      	ldr	r0, [r4, #0]
 800848a:	4401      	add	r1, r0
 800848c:	1850      	adds	r0, r2, r1
 800848e:	6011      	str	r1, [r2, #0]
 8008490:	4283      	cmp	r3, r0
 8008492:	d1e0      	bne.n	8008456 <_free_r+0x22>
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	4408      	add	r0, r1
 800849a:	6053      	str	r3, [r2, #4]
 800849c:	6010      	str	r0, [r2, #0]
 800849e:	e7da      	b.n	8008456 <_free_r+0x22>
 80084a0:	d902      	bls.n	80084a8 <_free_r+0x74>
 80084a2:	230c      	movs	r3, #12
 80084a4:	602b      	str	r3, [r5, #0]
 80084a6:	e7d6      	b.n	8008456 <_free_r+0x22>
 80084a8:	6820      	ldr	r0, [r4, #0]
 80084aa:	1821      	adds	r1, r4, r0
 80084ac:	428b      	cmp	r3, r1
 80084ae:	bf02      	ittt	eq
 80084b0:	6819      	ldreq	r1, [r3, #0]
 80084b2:	685b      	ldreq	r3, [r3, #4]
 80084b4:	1809      	addeq	r1, r1, r0
 80084b6:	6063      	str	r3, [r4, #4]
 80084b8:	bf08      	it	eq
 80084ba:	6021      	streq	r1, [r4, #0]
 80084bc:	6054      	str	r4, [r2, #4]
 80084be:	e7ca      	b.n	8008456 <_free_r+0x22>
 80084c0:	bd38      	pop	{r3, r4, r5, pc}
 80084c2:	bf00      	nop
 80084c4:	200002f8 	.word	0x200002f8

080084c8 <_malloc_usable_size_r>:
 80084c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084cc:	1f18      	subs	r0, r3, #4
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	bfbc      	itt	lt
 80084d2:	580b      	ldrlt	r3, [r1, r0]
 80084d4:	18c0      	addlt	r0, r0, r3
 80084d6:	4770      	bx	lr

080084d8 <_init>:
 80084d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084da:	bf00      	nop
 80084dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084de:	bc08      	pop	{r3}
 80084e0:	469e      	mov	lr, r3
 80084e2:	4770      	bx	lr

080084e4 <_fini>:
 80084e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e6:	bf00      	nop
 80084e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ea:	bc08      	pop	{r3}
 80084ec:	469e      	mov	lr, r3
 80084ee:	4770      	bx	lr
